{"version":3,"sources":["state/multicall/hooks.ts","config/localization/languages.ts","config/constants/nftsCollections/types.ts","config/constants/nftsCollections/index.ts","views/Nft/market/constants.ts","config/constants/farms.ts","config/constants/types.ts","state/lists/hooks.ts","contexts/Localization/helpers.ts","state/block/hooks.ts","utils/getRpcUrl.ts","hooks/useInterval.ts","hooks/useIsWindowVisible.ts","state/predictions/helpers.ts","utils/farmHelpers.ts","config/constants/priceHelperLps.ts","state/farms/fetchPublicFarmData.ts","state/farms/fetchFarm.ts","state/farms/fetchFarms.ts","utils/farmsPriceHelpers.ts","state/farms/fetchFarmsPrices.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","views/Pools/helpers.tsx","state/pools/fetchIfoPoolPublic.ts","state/pools/fetchIfoPoolUser.ts","state/pools/fetchPoolsUser.ts","state/pools/fetchVaultPublic.ts","state/pools/fetchVaultUser.ts","state/pools/index.ts","state/predictions/config.ts","state/predictions/queries.ts","state/predictions/index.ts","state/teams/index.tsx","config/constants/campaigns.ts","utils/achievements.ts","state/achievements/helpers.ts","state/achievements/index.ts","state/voting/helpers.ts","state/voting/index.tsx","config/constants/lottery.ts","state/lottery/helpers.ts","state/lottery/getLotteriesData.ts","state/lottery/getUserTicketsData.ts","state/lottery/getUserLotteryData.ts","state/lottery/index.ts","state/info/actions.ts","state/info/index.ts","state/global/actions.ts","state/user/reducer.ts","state/mint/actions.ts","state/transactions/reducer.ts","state/swap/reducer.ts","state/burn/actions.ts","state/mint/reducer.ts","state/lists/reducer.ts","state/burn/reducer.ts","state/multicall/reducer.ts","state/index.ts","state/teams/helpers.ts","config/constants/teams.ts","config/abi/erc20.ts","hooks/useContract.ts","state/profile/helpers.ts","state/profile/index.tsx","state/user/hooks/index.tsx","config/constants/ifo.ts","config/constants/contracts.ts","utils/addressHelpers.ts","state/block/index.ts","state/nftMarket/reducer.ts","state/user/hooks/useUserAddedTokens.ts","hooks/Tokens.ts","config/constants/tokens.ts","state/types.ts","hooks/useActiveWeb3React.ts","utils/contractHelpers.ts","state/user/actions.ts","utils/bigNumber.ts","utils/multicall.ts","config/constants/endpoints.ts","state/nftMarket/types.ts","state/nftMarket/helpers.ts","state/nftMarket/queries.ts","state/swap/actions.ts","utils/ENS/resolveENSContentHash.ts","hooks/useFetchListCallback.ts","state/lists/updater.ts","state/multicall/retry.ts","state/multicall/updater.tsx","hooks/useDebounce.ts","state/multicall/chunkArray.ts","components/Toast/types.ts","components/Toast/Toast.tsx","components/Toast/ToastContainer.tsx","utils/truncateHash.ts","components/Toast/DescriptionWithTx.tsx","contexts/ToastsContext/Provider.tsx","contexts/ToastsContext/Listener.tsx","hooks/useToast.ts","state/transactions/updater.tsx","hooks/useSubgraphHealth.ts","contexts/RefreshContext.tsx","hooks/useRefresh.ts","hooks/useTokenBalance.ts","components/SubgraphHealthIndicator/index.tsx","utils/web3React.ts","utils/wallet.ts","hooks/useAuth.ts","utils/clearUserStates.ts","hooks/usePreviousValue.ts","hooks/useLastUpdated.ts","components/Menu/UserMenu/CopyAddress.tsx","components/Menu/UserMenu/WalletInfo.tsx","state/transactions/hooks.tsx","components/Menu/UserMenu/TransactionRow.tsx","components/Menu/UserMenu/WalletModal.tsx","components/Menu/UserMenu/WalletTransactions.tsx","components/Header/config.ts","components/Header/Header.tsx","components/Footer/Footer.tsx","style/Global.tsx","components/SuspenseWithChunkError/index.tsx","components/Loader/Dots.tsx","components/EasterEgg/EasterEgg.tsx","routerHistory.ts","App.tsx","Providers.tsx","index.tsx","utils/sentry.ts","contexts/Localization/Provider.tsx","contexts/Localization/useTranslation.ts","config/constants/lists.ts","config/index.ts","state/multicall/actions.ts","utils/providers.ts","config/constants/pools.ts","utils/formatBalance.ts","utils/index.ts","state/user/hooks/helpers.ts","config/constants/index.ts","state/lists/actions.ts","state/transactions/actions.ts"],"names":["isMethodArg","x","indexOf","isValidMethodArgs","undefined","Array","isArray","every","xi","INVALID_RESULT","valid","blockNumber","data","NEVER_RELOAD","blocksPerFetch","Infinity","useCallsData","calls","options","chainId","useActiveWeb3React","callResults","useSelector","state","multicall","dispatch","useDispatch","serializedCallKeys","useMemo","JSON","stringify","filter","c","Boolean","map","toCallKey","sort","useEffect","callKeys","parse","length","key","parseCallKey","addMulticallListeners","removeMulticallListeners","call","result","INVALID_CALL_STATE","loading","syncing","error","LOADING_CALL_STATE","toCallState","callResult","contractInterface","fragment","latestBlockNumber","success","decodeFunctionResult","console","debug","useMultipleContractSingleData","addresses","methodName","callInputs","getFunction","callData","encodeFunctionData","results","address","currentBlock","useBlock","useSingleCallResult","contract","inputs","interface","EN","locale","language","code","languages","Object","values","CollectionKey","collections","PANCAKE","name","slug","SQUAD","description","pancakeBunniesAddress","getAddress","serializedTokens","serializeTokens","farms","pid","lpSymbol","lpAddresses","token","syrup","quoteToken","wbnb","cake","busd","PoolIds","PoolCategory","LotteryStatus","AuctionStatus","sortByListPriority","urlA","urlB","first","DEFAULT_LIST_OF_LISTS","includes","Number","MAX_SAFE_INTEGER","second","WrappedTokenInfo","tokenInfo","tags","decimals","symbol","this","logoURI","Token","EMPTY_LIST","ChainId","MAINNET","TESTNET","listCache","WeakMap","listToTokenMap","list","get","tokens","reduce","tokenMap","tagId","id","Error","set","useAllLists","lists","byUrl","combineMaps","map1","map2","useCombinedTokenMapFromUrls","urls","slice","allTokens","currentUrl","current","assign","useActiveListUrls","activeListUrls","url","UNSUPPORTED_LIST_URLS","useCombinedActiveList","DEFAULT_TOKEN_LIST","useCombinedInactiveList","allActiveListUrls","keys","useInactiveListUrls","useDefaultTokenList","useUnsupportedTokenList","UNSUPPORTED_TOKEN_LIST","LS_KEY","fetchLocale","a","fetch","process","response","json","getLanguageCodeFromLS","localStorage","getItem","block","nodes","getNodeUrl","REACT_APP_NODE_PRODUCTION","sample","useInterval","callback","delay","leading","savedCallback","useRef","tick","setInterval","clearInterval","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","useIsWindowVisible","useState","isVisible","setIsVisible","handleVisibilityChange","addEventListener","removeEventListener","Result","isArchivedPid","priceHelperLps","qsd","fetchFarm","farm","lpAddress","params","getMasterChefAddress","erc20","tokenBalanceLP","quoteTokenBalanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpTokenRatio","BigNumber","div","tokenAmountTotal","BIG_TEN","pow","quoteTokenAmountTotal","quoteTokenAmountMc","times","lpTotalInQuoteToken","masterchefABI","info","totalAllocPoint","allocPoint","_hex","BIG_ZERO","poolWeight","toJSON","tokenPriceVsQuote","multiplier","toString","fetchPublicFarmData","farmPublicData","fetchFarms","farmsToFetch","Promise","all","farmConfig","serializedFarm","filterFarmsByQuoteToken","preferredQuoteTokens","preferredFarm","find","some","getFarmFromTokenSymbol","tokenSymbol","farmsWithTokenSymbol","getFarmBaseTokenPrice","quoteTokenFarm","bnbPriceBusd","hasTokenPriceVsQuote","quoteTokenInBusd","getFarmQuoteTokenPrice","BIG_ONE","fetchFarmsPrices","bnbBusdFarm","farmsWithPrices","tokenPriceBusd","quoteTokenPriceBusd","fetchFarmUserAllowances","account","masterChefAddress","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsConfig","userData","allowance","loadArchivedFarmsData","userDataLoaded","loadingKeys","fetchFarmsPublicDataAsync","createAsyncThunk","pids","farmsWithPriceHelpers","concat","priceHelperLpsConfig","farmsWithoutHelperLps","condition","arg","getState","type","typePrefix","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","index","serializeLoadingKey","action","suffix","split","meta","farmsSlice","createSlice","reducers","extraReducers","builder","addCase","fulfilled","liveFarmData","payload","farmData","forEach","userDataEl","findIndex","addMatcher","isPending","isFulfilled","isRejected","convertSharesToCake","shares","cakePerFullShare","decimalsToRound","sharePriceNumber","getBalanceNumber","amountInCake","multipliedBy","cakeAsNumberBalance","cakeAsBigNumber","getDecimalAmount","cakeAsDisplayBalance","getFullDisplayBalance","fetchPublicIfoPoolData","method","getIfoPoolAddress","multicallv2","ifoPoolAbi","sharePrice","estimatedCakeBountyReward","totalPendingCakeHarvest","startBlock","endBlock","totalSharesAsBigNumber","sharePriceAsBigNumber","totalCakeInVaultEstimate","totalShares","pricePerFullShare","totalCakeInVault","creditStartBlock","toNumber","creditEndBlock","fetchIfoPoolFeesData","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","fetchIfoPoolUser","userContractResponse","creditResponse","isLoading","userShares","lastDepositedTime","lastUserActionTime","cakeAtLastUserAction","credit","avgBalance","poolsConfig","pool","stakingToken","sousId","getMasterchefContract","fetchPublicVaultData","getCakeVaultAddress","cakeVaultAbi","fetchVaultFees","cakeVaultContract","getCakeVaultContract","fetchVaultUser","userInfo","initialPoolVaultState","freeze","fees","cakeVault","ifoPool","cakePool","fetchCakeVaultPublicData","contractAddress","getCakeContract","publicVaultInfo","fetchCakeVaultFees","vaultFees","fetchCakeVaultUserData","fetchIfoPoolPublicData","fetchIfoPoolFees","fetchIfoPoolUserAndCredit","fetchIfoPoolUserData","PoolsSlice","setPoolPublicData","poolIndex","setPoolUserData","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","value","p","actions","ROUNDS_PER_PAGE","numberOrNull","valueNum","isNaN","transformBetResponse","betResponse","bet","hash","amount","parseFloat","position","BetPosition","BULL","BEAR","claimed","claimedAt","claimedBlock","claimedHash","claimedBNB","claimedNetBNB","createdAt","updatedAt","user","transformUserResponse","round","transformRoundResponse","userResponse","totalBets","totalBetsBull","totalBetsBear","totalBNB","totalBNBBull","totalBNBBear","totalBetsClaimed","totalBNBClaimed","winRate","averageBNB","netBNB","roundResponse","positionResponse","epoch","failed","startAt","startHash","lockAt","lockBlock","lockHash","lockPrice","lockRoundId","closeAt","closeBlock","closeHash","closePrice","closeRoundId","totalAmount","bullBets","bullAmount","bearBets","bearAmount","bets","HOUSE","getBetHistory","where","skip","request","GRAPH_API_PREDICTION","gql","getLedgerData","epochs","getPredictionsAddress","ledgerCalls","predictionsAbi","defaultPredictionUserOptions","orderBy","orderDir","getPredictionUsers","users","getPredictionUser","toLowerCase","getClaimStatuses","claimableCalls","claimableResponses","accum","claimableResponse","claimable","getPredictionData","staticCalls","currentEpoch","intervalSeconds","minBetAmount","paused","bufferSeconds","status","PredictionStatus","PAUSED","LIVE","getRoundsData","makeFutureRoundResponse","startTimestamp","lockTimestamp","closeTimestamp","ethers","from","rewardBaseCalAmount","rewardAmount","oracleCalled","lockOracleId","closeOracleId","makeRoundData","rounds","serializePredictionsLedgerResponse","ledgerResponse","makeLedgerData","ledgers","eq","serializePredictionsRoundsResponse","fetchUsersRoundsLength","getPredictionsContract","getUserRoundsLength","fetchUserRounds","cursor","size","getUserRounds","INITIAL","isHistoryPaneOpen","isChartPaneOpen","isFetchingHistory","historyFilter","HistoryFilter","ALL","lastOraclePrice","history","totalHistory","currentHistoryPage","hasHistoryLoaded","claimableStatuses","leaderboard","selectedAddress","loadingState","LeaderboardLoadingState","filters","timePeriod","hasMoreResults","addressResults","initializePredictions","marketData","range","roundsResponse","initialRoundData","reduxNodeRound","initializedData","ledgerResponses","merge","fetchRound","predictionContract","fetchRounds","fetchMarketData","fetchLedgerData","fetchClaimableStatuses","fetchHistory","fetchNodeHistory","page","userRoundsLength","emptyResult","maxPages","lte","Math","ceil","sub","lt","userRounds","epochStr","roundData","reduxRound","ledger","ledgerAmount","formatUnits","gt","filterLeaderboard","totalBets_gte","usersResponse","fetchAddressResult","rejectWithValue","filterNextPageLeaderboard","predictions","predictionsSlice","setLeaderboardFilter","setHistoryPaneState","setChartPaneState","setHistoryFilter","setLastOraclePrice","markAsCollected","setSelectedAddress","pending","IDLE","LOADING","rejected","newestRound","maxBy","futureRound","futureRounds","currentRound","i","push","isInitialized","teamsList","team","teamsSlice","fetchStart","fetchFailed","teamFetchSucceeded","teamsFetchSucceeded","campaigns","title","badge","campaignMap","Map","campaign","getAchievementTitle","getAchievementDescription","getUserPointIncreaseEvents","GRAPH_API_PROFILE","points","getAchievements","pointIncreaseEvents","userPoint","has","campaignId","campaignMeta","achievements","achievementFetchStatus","AchievementFetchStatus","NOT_FETCHED","fetchAchievements","achievementSlice","addAchievement","FETCHING","FETCHED","ERROR","getProposals","ProposalState","ACTIVE","SNAPSHOT_API","proposals","getProposal","proposal","getVotes","votes","getVoteVerificationStatuses","simpleRpcProvider","getBlockNumber","votesToVerify","vote","voter","verificationHash","metadata","total","votingPower","SNAPSHOT_VOTING_API","headers","body","ok","statusText","isValid","getAllVotes","proposalId","votesPerChunk","resolve","reject","fetchVoteChunk","newSkip","voteChunk","proposalLoadingStatus","VotingStateLoadingStatus","voteLoadingStatus","fetchProposals","fetchProposal","fetchVotes","verifyVotes","snapshot","proposalVotes","voting","votingSlice","_inValid","TICKET_LIMIT_PER_REQUEST","lotteryContract","getLotteryV2Contract","processViewLotterySuccessResponse","lotteryId","startTime","endTime","priceTicketInCake","discountDivisor","treasuryFee","firstTicketId","lastTicketId","amountCollectedInCake","finalNumber","cakePerBracket","countWinnersPerBracket","rewardsBreakdown","statusKey","serializedCakePerBracket","cakeInBracket","ethersToSerializedBigNumber","serializedCountWinnersPerBracket","winnersInBracket","serializedRewardsBreakdown","reward","processViewLotteryErrorResponse","PENDING","fetchLottery","viewLottery","lotteryData","fetchMultipleLotteries","lotteryIds","getLotteryV2Address","lotteryV2Abi","requireSuccess","multicallRes","processedResponses","res","fetchCurrentLotteryIdAndMaxBuy","currentLotteryId","maxNumberTicketsPerBuyOrClaim","getRoundIdsArray","currentIdAsInt","parseInt","roundIds","roundId","hasRoundBeenClaimed","tickets","ticket","applyNodeDataToLotteriesGraphResponse","nodeData","graphResponse","nodeRound","ticketPrice","totalTickets","totalUsers","winningTickets","nodeRoundsWithGraphData","nodeRoundData","graphRoundData","graphResponseRound","lastCombinedDataRound","lastCombinedDataRoundIndex","graphRound","remainingSubgraphRounds","splice","getGraphLotteries","GRAPH_API_LOTTERY","lotteries","getLotteriesData","idsForNodesCall","mergedData","processRawTicketsResponse","ticketsResponse","ticketIds","ticketNumbers","ticketStatuses","ticketId","number","viewUserInfoForLotteryId","perRequestLimit","fetchUserTicketsForOneRound","numReturned","ticketData","fetchUserTicketsForMultipleRounds","idsToCheck","ticketsForMultipleRounds","ticketsForRound","userTickets","applyNodeDataToUserGraphResponse","userNodeData","userGraphData","lotteryNodeData","ticketDataForRound","roundTickets","userNodeRound","userGraphRound","getGraphLotteryUser","blankUser","totalCake","userRes","lottery","getUserLotteryData","idsForTicketsNodeCall","roundDataAndUserTickets","userRoundsNodeData","idsForLotteriesNodeCall","lotteriesNodeData","mergedRoundData","graphResponseWithNodeRounds","isTransitioning","lotteriesData","userLotteryData","fetchCurrentLottery","lotteryInfo","fetchCurrentLotteryId","currentIdAndMaxBuy","fetchUserTicketsAndLotteries","userLotteriesRes","userParticipationInCurrentRound","userLotteries","fetchPublicLotteries","fetchUserLotteries","fetchAdditionalUserLotteries","additionalUserLotteries","setLotteryIsTransitioning","LotterySlice","mergedRounds","updateProtocolData","createAction","updateProtocolChartData","updateProtocolTransactions","updatePoolData","addPoolKeys","updatePoolChartData","updatePoolTransactions","updateTokenData","addTokenKeys","addTokenPoolAddresses","updateTokenChartData","updateTokenTransactions","updateTokenPriceData","protocol","overview","chartData","transactions","pools","byAddress","createReducer","protocolData","poolData","poolAddresses","poolAddress","tokenData","tokenAddresses","priceData","tokenAddress","secondsInterval","oldestFetchedTimestamp","updateVersion","currentTimestamp","Date","getTime","pairKey","token0Address","token1Address","Field","userExpertMode","userSingleHopOnly","userSlippageTolerance","INITIAL_ALLOWED_SLIPPAGE","userDeadline","DEFAULT_DEADLINE_FROM_NOW","pairs","timestamp","audioPlay","isDark","isExchangeChartDisplayed","isSubgraphHealthIndicatorDisplayed","userChartViewMode","ChartViewMode","BASIC","userFarmStakedOnly","FarmStakedOnly","ON_FINISHED","userPoolStakedOnly","userPoolsViewMode","ViewMode","TABLE","userFarmsViewMode","userPredictionAcceptedRisk","userPredictionChartDisclaimerShow","userExpertModeAcknowledgementShow","userUsernameVisibility","gasPrice","GAS_PRICE_GWEI","default","watchlistTokens","watchlistPools","showPhishingWarningBanner","lastUpdateVersionTimestamp","updateUserExpertMode","updateUserSlippageTolerance","updateUserDeadline","updateUserSingleHopOnly","addSerializedToken","serializedToken","removeSerializedToken","addSerializedPair","serializedPair","token0","token1","removeSerializedPair","tokenAAddress","tokenBAddress","muteAudio","unmuteAudio","toggleTheme","updateUserFarmStakedOnly","updateUserPoolStakedOnly","updateUserPoolsViewMode","updateUserFarmsViewMode","updateUserPredictionAcceptedRisk","userAcceptedRisk","updateUserPredictionChartDisclaimerShow","userShowDisclaimer","updateUserExpertModeAcknowledgementShow","updateUserUsernameVisibility","updateGasPrice","addWatchlistToken","tokenWatchlist","newTokens","addWatchlistPool","poolsWatchlist","newPools","hidePhishingWarningBanner","setIsExchangeChartDisplayed","setChartViewMode","setSubgraphHealthIndicatorDisplayed","now","addTransaction","approval","summary","claim","txs","addedTime","clearAllTransactions","checkedTransaction","tx","lastCheckedBlockNumber","max","finalizeTransaction","receipt","confirmedTime","independentField","INPUT","typedValue","currencyId","OUTPUT","replaceSwapState","recipient","inputCurrencyId","outputCurrencyId","pairDataById","derivedPairDataById","selectCurrency","otherField","switchCurrencies","typeInput","setRecipient","updatePairData","pairData","pairId","timeWindow","updateDerivedPairData","resetMintState","CURRENCY_A","otherTypedValue","noLiquidity","NEW_LIST_STATE","loadingRequestId","pendingUpdate","lastInitializedDefaultListOfLists","memo","listUrl","DEFAULT_ACTIVE_LIST_URLS","fetchTokenList","requestId","tokenList","getVersionUpgrade","version","VersionUpgrade","NONE","errorMessage","addList","removeList","u","enableList","disableList","acceptListUpdate","lastInitializedSet","s","l","add","Set","newListOfListsSet","LIQUIDITY_PERCENT","listeners","callListeners","callKey","fetchingMulticallResults","fetchingBlockNumber","errorFetchingMulticallResults","updateMulticallResults","PERSISTED_KEYS","safeCloneDeep","cloneDeep","store","configureStore","devTools","reducer","achievementsReducer","blockReducer","farmsReducer","poolsReducer","predictionsReducer","profile","profileReducer","teams","teamsReducer","votingReducer","lotteryReducer","infoReducer","nftMarket","nftMarketReducer","swap","mint","burn","middleware","getDefaultMiddleware","thunk","save","states","debounce","preloadedState","load","userInitialState","transactionsInitialState","listsInitialState","profileInitialState","useAppDispatch","profileContract","getProfileContract","getTeam","teamId","getTeamProfile","teamName","numberUsers","numberPoints","isJoinable","staticTeamInfo","staticTeam","getTeams","teamsById","numberTeams","nbTeams","getPancakeProfileAddress","profileABI","teamData","onChainTeamData","images","lg","md","sm","alt","ipfs","IPFS_GATEWAY","background","textColor","Interface","ERC20_ABI","ERC20_BYTES32_ABI","useContract","ABI","withSignerIfPossible","library","getContract","getProviderOrSigner","useTokenContract","useBytes32TokenContract","useMulticallContract","getMulticallAddress","multiCallAbi","transformProfileResponse","profileResponse","userId","collectionAddress","tokenId","isActive","getUsername","username","getProfileAvatar","hasRegistered","getUserProfile","nft","getNftApi","apiRes","collectionName","collection","attributes","image","original","thumbnail","getProfile","nftToken","Cookies","avatar","domain","secure","expires","profileAvatars","fetchProfile","fetchProfileAvatar","fetchProfileUsername","profileSlice","profileClear","addPoints","usernameFetchStatus","ProfileAvatarFetchStatus","avatarFetchStatus","useSubgraphHealthIndicatorManager","useCallback","newIsDisplayed","useThemeManager","toggleThemeAction","cakeBnbLpToken","ifos","poolBasic","saleAmount","raiseAmount","cakeToBurn","distributionRatio","poolUnlimited","currency","dpt","releaseBlockNumber","articleUrl","tokenOfferingPrice","santos","porto","dar","dkt","kalm","hotcross","hzn","belt","watch","bry","wsote","helmet","ten","ditto","blink","masterChef","sousChef","lotteryV2","multiCall","pancakeProfile","pancakeRabbits","bunnyFactory","claimRefund","pointCenterIfo","bunnySpecial","tradingCompetition","tradingCompetitionV2","easterNft","chainlinkOracle","bunnySpecialCakeVault","bunnySpecialPrediction","bunnySpecialLottery","bunnySpecialXmas","farmAuction","AnniversaryAchievement","nftSale","pancakeSquad","presale","getPancakeRabbitsAddress","getBunnyFactoryAddress","getClaimRefundAddress","getPointCenterIfoAddress","getBunnySpecialAddress","getTradingCompetitionAddress","getTradingCompetitionAddressV2","getEasterNftAddress","getChainlinkOracleAddress","getBunnySpecialCakeVaultAddress","getBunnySpecialPredictionAddress","getBunnySpecialLotteryAddress","getBunnySpecialXmasAddress","getFarmAuctionAddress","getAnniversaryAchievement","getNftMarketAddress","getNftSaleAddress","getPancakeSquadAddress","getPresaleAddress","blockSlice","initialBlock","setBlock","initialNftFilterState","NftFilterLoadingState","activeFilters","showOnlyOnSale","ordering","direction","initialNftActivityFilterState","typeFilters","initializationState","NFTMarketInitializationState","UNINITIALIZED","nfts","activityFilters","isUpdatingPancakeBunnies","latestPancakeBunniesUpdateAt","userNftsInitializationState","UserNftInitializationState","activity","askOrderHistory","buyTradeHistory","sellTradeHistory","fetchCollections","getCollectionsApi","getCollectionsSg","collectionsMarket","combineCollectionData","fetchCollection","getCollectionApi","getCollectionSg","collectionMarket","fetchNftsFromCollections","getNftsFromCollectionApi","tokenIds","getMarketDataForTokenIds","nftsMarket","apiMetadata","filterNftsFromCollection","nftFilters","attrParams","attr","traitType","isEmpty","fetchNftsFiltered","attrFilters","apiToken","getNftsMarketData","tokenId_in","nftTokens","apiTokenMarketData","tokenMarketData","fetchNewPBAndUpdateExisting","bunnyId","existingTokensWithBunnyId","allExistingPBTokenIds","existingMetadata","orderDirection","updatedNfts","updatedNftsMarket","updatedTokens","getMetadataWithFallback","otherId","getPancakeBunniesAttributesField","combineApiAndSgResponseToNftToken","newNfts","getNftsByBunnyIdSg","moreTokensWithRequestedBunnyId","fetchUserNfts","profileNftWithCollectionAddress","getCompleteAccountNftData","completeNftData","updateUserNft","location","NftLocation","WALLET","marketDataForNft","getNftsFromDifferentCollectionsApi","metadataForNft","removeUserNft","addUserNft","nftLocation","fetchUserActivity","getUserActivity","toLocaleLowerCase","userActivity","NftMarket","removeAllFilters","addActivityTypeFilters","removeActivityTypeFilters","activeFilter","removeAllActivityFilters","setOrdering","setShowOnlyOnSale","resetUserNftState","INITIALIZED","existingNftsWithoutNewOnes","newToken","INITIALIZING","userNftsState","nftToUpdate","indexInState","copyOfState","nftToRemove","useUserAddedTokens","serializedTokensMap","deserializeToken","useTokensFromMap","includeUserAdded","userAddedTokens","mapWithoutUrls","newMap","tokenMap_","useAllTokens","useAllInactiveTokens","inactiveTokens","activeTokensAddresses","mainnetTokens","bnb","sera","tlos","beta","stephero","pros","qbt","cvp","bscdefi","dai","usdt","btcb","ust","eth","usdc","pha","babycake","bmon","hero","wsg","mcrn","revv","skill","if","sps","chess","titan","harmony","mask","dvi","adx","bscpad","rabbit","form","txl","orbs","cos","bunny","alice","for","bux","nuls","ramp","bfi","dexe","bel","tpt","xmark","bmxx","iotx","bor","bopen","dodo","swingby","zee","swgb","swg","sfp","lina","lit","hget","bdo","egld","front","btcst","bscx","balbt","asr","atm","og","reef","juv","psg","vai","unfi","twt","hard","broobee","stax","nar","nya","ctk","inj","sxp","alpha","xvs","sushi","comp","bifi","dusk","beth","mamzn","mgoogl","mnflx","mtsla","ltc","ada","band","dot","eos","link","xrp","atom","yfii","xtz","bch","yfi","uni","fil","bake","burger","bdigg","bbadger","trade","pnt","mir","pbtc","lto","pcws","zil","lien","swth","dft","gum","dego","nrv","easy","oddz","hoo","apys","bondly","tko","itam","arpa","eps","jgn","tlm","perl","alpa","suter","cgg","mix","hakka","xed","τbtc","alpaca","dfd","lmt","btt","trx","win","mcoin","math","kun","hyfi","oin","doge","fine","one","pmon","τdoge","btr","ubxt","wmass","rfox","xend","cyc","chr","deri","well","wex","waultx","popen","ez","vrt","tusd","mtrg","ktn","qkc","bcfx","mx","ata","mbox","boring","marsh","ampl","o3","hai","htb","woo","$dg","safemoon","axs","c98","pots","gnt","rusd","bp","sfund","naos","cart","light","rpg","mcb","lazio","arv","moni","xms","zoo","fina","xwg","eternal","kart","qi","sheesha","bcoin","quidd","nabox","xcv","idia","tt","gmee","htd","thg","ccar","high","sdao","antex","bbt","woop","gm","aog","bath","insur","testnetTokens","unserializedTokens","serializeToken","VaultKey","SnapshotCommand","ProposalType","useWeb3React","web3React","refEth","provider","setProvider","abi","signer","signerOrProvider","Contract","getBep20Contract","bep20Abi","getErc721Contract","erc721Abi","getIfoV1Contract","ifoV1Abi","getIfoV2Contract","ifoV2Abi","getSouschefContract","config","poolCategory","BINANCE","sousChefBnb","getSouschefV2Contract","sousChefV2","getPointCenterIfoContract","cakeAbi","getPancakeRabbitContract","pancakeRabbitsAbi","getBunnyFactoryContract","bunnyFactoryAbi","getBunnySpecialContract","bunnySpecialAbi","getClaimRefundContract","claimRefundAbi","getTradingCompetitionContract","tradingCompetitionAbi","getTradingCompetitionContractV2","tradingCompetitionV2Abi","getEasterNftContract","easterNftAbi","getIfoPoolContract","getChainlinkOracleContract","chainlinkOracleAbi","getMulticallContract","MultiCallAbi","getBunnySpecialCakeVaultContract","bunnySpecialCakeVaultAbi","getBunnySpecialPredictionContract","bunnySpecialPredictionAbi","getBunnySpecialLotteryContract","bunnySpecialLotteryAbi","getBunnySpecialXmasContract","bunnySpecialXmasAbi","getFarmAuctionContract","farmAuctionAbi","getAnniversaryAchievementContract","anniversaryAchievementAbi","getNftMarketContract","nftMarketAbi","getNftSaleContract","nftSaleAbi","getPancakeSquadContract","pancakeSquadAbi","getErc721CollectionContract","erc721CollectionAbi","getPresaleContract","presaleAbi","getSeraContract","seraAbi","ethersBn","ethersToBigNumber","multi","itf","utils","calldata","aggregate","returnData","tryAggregate","REACT_APP_GRAPH_API_PROFILE","REACT_APP_GRAPH_API_PREDICTION","REACT_APP_GRAPH_API_LOTTERY","REACT_APP_SNAPSHOT_VOTING_API","SNAPSHOT_BASE_URL","REACT_APP_SNAPSHOT_BASE_URL","API_NFT","REACT_APP_API_NFT","GRAPH_API_NFTMARKET","REACT_APP_GRAPH_API_NFT_MARKET","GRAPH_HEALTH","AskOrderType","MarketEvent","isPBCollection","requestPath","promises","responses","resp","existingTokenIds","isTradable","tokenId_not_in","displayType","fetchWalletTokenIdsForCollections","walletNftPromises","balanceOf","balanceOfResponse","getTokenId","tokenOfOwnerByIndex","tokenIdBn","tokenIdPromises","tokensWithCollectionAddress","walletNfts","flat","collectionApiData","collectionSgData","collectionsMarketObj","prev","attachMarketDataToWalletNfts","marketDataForWalletNfts","walletNft","marketNft","metadataUrl","transactionHistory","currentSeller","currentAskPrice","latestTradedPriceInBNB","tradeVolumeBNB","totalTrades","combineNftMarketAndMetadata","nftsWithMetadata","nftsForSale","tokenIdsInWallet","tokenIdsForSale","profileNftId","forSaleNft","PROFILE","FORSALE","getNftLocationForMarketNft","walletNftIdsWithCollectionAddress","unshift","uniqueCollectionAddresses","uniq","walletNftId","walletNftsByCollection","idWithCollectionAddress","walletMarketDataRequests","walletNftByCollection","tokenIdIn","walletMarketDataResponses","walletMarketData","walletNftsWithMarketData","walletTokenIds","marketDataForSaleNfts","forSaleNftIds","metadataForAllNfts","REGISTRAR_ABI","constant","outputs","payable","stateMutability","REGISTRAR_ADDRESS","RESOLVER_ABI","internalType","resolverContract","resolverAddress","ensName","ensRegistrarContract","namehash","resolver","contenthash","useFetchListCallback","useWeb3Provider","ensResolver","resolveENSContentHash","sendDispatch","nanoid","getTokenList","then","catch","message","Updater","fetchList","fetchAllListsCallback","PATCH","MINOR","MAJOR","waitRandom","min","ms","random","setTimeout","CancelledError","RetryableError","fetchChunk","multicallContract","chunk","minBlockNumber","obj","blockTag","resultsBlockNumber","half","floor","c0","c1","debouncedListeners","debouncedValue","setDebouncedValue","handler","clearTimeout","useDebounce","cancellations","listeningKeys","allListeners","keyListeners","previousMin","activeListeningKeys","unserializedOutdatedCallKeys","minDataBlockNumber","outdatedListeningKeys","serializedOutdatedCallKeys","outdatedCallKeys","chunkedCalls","items","maxChunkSize","numChunks","chunkSize","ix","chunkArray","fn","rejectCancelled","n","minWait","maxWait","completed","promise","cancel","retry","fetchBlockNumber","firstCallKeyIndex","curr","lastCallKeyIndex","types","alertTypeMap","alertVariants","INFO","SUCCESS","DANGER","WARNING","StyledToast","styled","theme","mediaQueries","Toast","toast","onRemove","style","ttl","props","timer","ref","removeHandler","handleRemove","window","CSSTransition","nodeRef","timeout","onMouseEnter","onMouseLeave","variant","onClick","StyledToastContainer","ToastContainer","toasts","stackSpacing","TransitionGroup","zIndex","top","truncateHash","startLength","endLength","substring","DescriptionWithTx","txHash","children","t","useTranslation","as","external","href","getBscScanLink","ToastsContext","createContext","ToastsProvider","setToasts","prevToasts","kebabCase","currentToasts","prevToast","Provider","clear","remove","toastError","toastTypes","toastInfo","toastSuccess","toastWarning","ToastListener","useToast","toastContext","useContext","blocksSinceCheck","minutesPending","shouldCheck","getTransactionReceipt","blockHash","to","transactionHash","transactionIndex","SubgraphStatus","createRefreshContext","interval","RefreshContext","React","Context","count","setCount","SlowRefresh","FastRefresh","RefreshContextProvider","useSlowFresh","FetchStatus","useSubgraphHealth","UNKNOWN","chainHeadBlock","latestBlock","blockDifference","sgHealth","setSgHealth","slowRefresh","indexingStatusForCurrentVersion","isHealthy","health","chains","chainHeadBlockDifference","NOT_OK","OK","getSubgraphHealth","StyledCard","Card","IndicatorWrapper","Box","Dot","$color","colors","SubgraphHealth","sgStatus","alwaysShowIndicator","forceIndicatorDisplay","showIndicator","indicatorProps","delayed","label","color","slow","healthy","indicator","secondRemainingBlockSync","BSC_BLOCK_TIME","useTooltip","blockNumberFromSubgraph","placement","targetRef","tooltipVisible","tooltip","bottom","right","TooltipContent","pb","SubgraphHealthIndicator","useLocation","pathname","rpcUrl","injected","InjectedConnector","supportedChainIds","walletconnect","WalletConnectConnector","rpc","qrcode","pollingInterval","bscConnector","BscConnector","connectorsByName","ConnectorNames","Injected","WalletConnect","BSC","getLibrary","providers","Web3Provider","setupNetwork","ethereum","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","BASE_BSC_SCAN_URL","useAuth","activate","deactivate","login","connectorID","connector","UnsupportedChainIdError","removeItem","connectorLocalStorageKey","NoEthereumProviderError","NoBscProviderError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","walletConnectProvider","logout","Sentry","scope","setUser","close","clearUserStates","usePreviousValue","useLastUpdated","lastUpdated","setStateLastUpdated","previousLastUpdated","setLastUpdated","useTokenBalance","FAILED","balance","fetchStatus","balanceState","setBalanceState","fastRefresh","fetchBalance","useGetBnbBalance","setFetchStatus","setBalance","getBalance","walletBalance","refresh","Wrapper","Flex","dropdown","Address","text","Tooltip","isTooltipDisplayed","contrast","invertedContrast","CopyAddress","setIsTooltipDisplayed","displayTooltip","readOnly","navigator","clipboard","permissions","writeText","queryCommandSupported","ele","createElement","appendChild","select","execCommand","removeChild","width","WalletInfo","hasLowBnbBalance","onDismiss","cakeBalance","cakeFetchStatus","fontSize","textTransform","fontWeight","mb","alignItems","justifyContent","height","formatBigNumber","useAllTransactions","isTransactionRecent","WalletView","TxnIcon","Summary","TxnLink","Link","renderIcon","txn","spin","TransactionRow","WalletTransactions","allTransactions","sortedTransactions","minHeight","scale","px","textAlign","LOW_BNB_BALANCE","parseUnits","ModalHeader","UIKitModalHeader","gradients","bubblegum","Tabs","cardBorder","WalletModal","initialView","WALLET_INFO","view","setView","minWidth","onItemClick","newIndex","activeIndex","fullWidth","maxWidth","TRANSACTIONS","icon","WalletButton","HEADER_HEIGHT","Header","img","log","accountEllipsis","onPresentConnectModal","useWalletModal","useModal","onPresentWalletModal","className","src","item","GlobalStyle","createGlobalStyle","SuspenseWithChunkError","hasError","isJsChunkLoadError","isCssChunkLoadError","isChunkLoadError","isRecoveringFromChunkError","nextState","replaceState","reload","fallback","Component","Dots","span","EasterEgg","show","setShow","startFalling","useKonamiCheatCode","onAnimationEnd","createBrowserHistory","Dashboard","lazy","Invest","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","Global","path","exact","component","Footer","iterations","ThemeProviderWrapper","dark","Providers","Updaters","Blocklist","BLOCKED_ADDRESSES","dsn","integrations","Integrations","BrowserTracing","Breadcrumbs","environment","tracesSampleRate","beforeSend","event","hint","err","originalException","ignoreErrors","ReactDOM","render","StrictMode","getElementById","isFetching","currentLanguage","languageMap","translations","LanguageContext","LanguageProvider","codeFromStorage","setState","enLocale","currentLocale","prevState","fetchInitialLocales","setLanguage","setItem","translate","translatedText","match","interpolatedText","dataKey","templateKey","RegExp","replace","languageContext","BASE_BSC_SCAN_URLS","BLOCKS_PER_YEAR","CAKE_PER_YEAR","BASE_URL","ADDRESS_REGEX","LOWER_HEX_REGEX","test","pcs","RPC_URL","getRpcUrl","StaticJsonRpcProvider","vaultPoolConfig","CakeVault","autoCompoundFrequency","gasLimit","tokenImage","primarySrc","secondarySrc","IfoPool","earningToken","CORE","harvest","tokenPerBlock","sortOrder","isFinished","getBalanceAmount","dividedBy","displayDecimals","toFixed","remainder","mod","isAddress","basisPointsToPercent","num","Percent","JSBI","BigInt","getSigner","connectUnchecked","AddressZero","GAS_PRICE","projectLink","fast","instant","testnet","ROUTER_ADDRESS","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","BLOCKED_PRICE_IMPACT_NON_EXPERT","exponentiate"],"mappings":"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AI/rC,IAAMG,EAAS,6CAA8C,GAAI,OAAQ,UAAW,uBAC9F6rC,IAAK,IAAIhsC,IAAMG,EAAS,6CAA8C,GAAI,MAAO,cAAe,mBAChG8rC,IAAK,IAAIjsC,IACPG,EACA,6CACA,GACA,MACA,kCACA,8BAEF+rC,QAAS,IAAIlsC,IACXG,EACA,6CACA,GACA,UACA,4BACA,8BAEFxB,KAAM,IAAIqB,IACRG,EACA,6CACA,GACA,OACA,cACA,+BAEFgsC,IAAK,IAAInsC,IACPG,EACA,6CACA,GACA,MACA,iBACA,6BAEFisC,KAAM,IAAIpsC,IACRG,EACA,6CACA,GACA,OACA,aACA,sBAEFksC,KAAM,IAAIrsC,IACRG,EACA,6CACA,GACA,OACA,cACA,wBAEFmsC,IAAK,IAAItsC,IACPG,EACA,6CACA,GACA,MACA,oBACA,2BAEFosC,IAAK,IAAIvsC,IACPG,EACA,6CACA,GACA,MACA,6BACA,4BAEFqsC,KAAM,IAAIxsC,IACRG,EACA,6CACA,GACA,OACA,uBACA,8BAEF2gC,KAAM,IAAI9gC,IACRG,EACA,6CACA,GACA,OACA,eACA,sBAEF0gC,IAAK,IAAI7gC,IACPG,EACA,6CACA,GACA,MACA,eACA,4BAEF4gC,SAAU,IAAI/gC,IACZG,EACA,6CACA,GACA,WACA,iBACA,6BAEF8gC,KAAM,IAAIjhC,IACRG,EACA,6CACA,GACA,OACA,aACA,yBAEF+gC,MAAO,IAAIlhC,IACTG,EACA,6CACA,GACA,QACA,mBACA,2BAEFghC,IAAK,IAAInhC,IACPG,EACA,6CACA,GACA,MACA,cACA,yBAEFihC,MAAO,IAAIphC,IACTG,EACA,6CACA,GACA,QACA,gBACA,4BAEFkhC,OAAQ,IAAIrhC,IACVG,EACA,6CACA,GACA,SACA,eACA,8BAEFmhC,IAAK,IAAIthC,IACPG,EACA,6CACA,GACA,MACA,cACA,2BAEFohC,MAAO,IAAIvhC,IACTG,EACA,6CACA,EACA,QACA,cACA,wBAEFqhC,MAAO,IAAIxhC,IACTG,EACA,6CACA,EACA,QACA,cACA,0BAEF5B,MAAO,IAAIyB,IACTG,EACA,6CACA,GACA,QACA,iBACA,gCAEFssC,IAAK,IAAIzsC,IACPG,EACA,6CACA,GACA,MACA,cACA,yBAEFusC,SAAU,IAAI1sC,IACZG,EACA,6CACA,GACA,WACA,kBACA,yBAEFwsC,KAAM,IAAI3sC,IACRG,EACA,6CACA,GACA,OACA,gBACA,wBAEFysC,KAAM,IAAI5sC,IACRG,EACA,6CACA,GACA,OACA,iBACA,wBAEF0sC,IAAK,IAAI7sC,IACPG,EACA,6CACA,GACA,MACA,0BACA,mBAEF2sC,KAAM,IAAI9sC,IACRG,EACA,6CACA,GACA,OACA,oBACA,oCAEF4sC,KAAM,IAAI/sC,IACRG,EACA,6CACA,GACA,OACA,aACA,+BAEF6sC,MAAO,IAAIhtC,IACTG,EACA,6CACA,GACA,QACA,qBACA,gCAEF8sC,GAAI,IAAIjtC,IACNG,EACA,6CACA,GACA,KACA,2BACA,+BAEF+sC,IAAK,IAAIltC,IACPG,EACA,6CACA,GACA,MACA,sBACA,6BAEFgtC,MAAO,IAAIntC,IACTG,EACA,6CACA,GACA,QACA,cACA,0BAEFitC,MAAO,IAAIptC,IACTG,EACA,6CACA,GACA,QACA,kBACA,yBAEFktC,QAAS,IAAIrtC,IACXG,EACA,6CACA,GACA,MACA,oBACA,4BAEFmtC,KAAM,IAAIttC,IAAMG,EAAS,6CAA8C,GAAI,OAAQ,aAAc,oBACjGotC,IAAK,IAAIvtC,IACPG,EACA,6CACA,GACA,MACA,wBACA,4BAEFqtC,IAAK,IAAIxtC,IACPG,EACA,6CACA,GACA,MACA,qBACA,4BAEFstC,OAAQ,IAAIztC,IACVG,EACA,6CACA,GACA,SACA,eACA,uBAEFutC,OAAQ,IAAI1tC,IACVG,EACA,6CACA,GACA,SACA,uBACA,iCAEFwtC,KAAM,IAAI3tC,IACRG,EACA,6CACA,GACA,OACA,kBACA,yBAEFytC,IAAK,IAAI5tC,IAAMG,EAAS,6CAA8C,GAAI,MAAO,aAAc,qBAC/F0tC,KAAM,IAAI7tC,IACRG,EACA,6CACA,GACA,OACA,aACA,yBAEF2tC,IAAK,IAAI9tC,IACPG,EACA,6CACA,GACA,MACA,kBACA,6BAEF4tC,MAAO,IAAI/tC,IACTG,EACA,6CACA,GACA,QACA,qBACA,iCAEF6tC,MAAO,IAAIhuC,IACTG,EACA,6CACA,EACA,QACA,0BACA,oCAEF8tC,IAAK,IAAIjuC,IACPG,EACA,6CACA,GACA,MACA,gBACA,6BAEF+tC,IAAK,IAAIluC,IACPG,EACA,6CACA,GACA,MACA,mBACA,kCAEFguC,KAAM,IAAInuC,IACRG,EACA,6CACA,EACA,OACA,aACA,wBAEFiuC,KAAM,IAAIpuC,IACRG,EACA,6CACA,GACA,OACA,kBACA,yBAEFkuC,IAAK,IAAIruC,IACPG,EACA,6CACA,GACA,MACA,iBACA,qBAEFmuC,KAAM,IAAItuC,IACRG,EACA,6CACA,GACA,OACA,aACA,yBAEFouC,IAAK,IAAIvuC,IACPG,EACA,6CACA,GACA,MACA,uBACA,qBAEFquC,IAAK,IAAIxuC,IACPG,EACA,6CACA,EACA,MACA,oBACA,gCAEFsuC,MAAO,IAAIzuC,IACTG,EACA,6CACA,EACA,QACA,2BACA,sCAEFuuC,KAAM,IAAI1uC,IACRG,EACA,6CACA,GACA,OACA,mBACA,+BAEFwuC,KAAM,IAAI3uC,IACRG,EACA,6CACA,GACA,OACA,kCACA,qBAEFyuC,IAAK,IAAI5uC,IACPG,EACA,6CACA,GACA,MACA,kBACA,8BAEF0uC,MAAO,IAAI7uC,IACTG,EACA,6CACA,GACA,QACA,wBACA,uBAEF2uC,KAAM,IAAI9uC,IACRG,EACA,6CACA,GACA,OACA,aACA,sBAEF4uC,QAAS,IAAI/uC,IACXG,EACA,6CACA,GACA,UACA,wBACA,4BAEF6uC,IAAK,IAAIhvC,IACPG,EACA,6CACA,GACA,MACA,iBACA,wBAEF8uC,KAAM,IAAIjvC,IACRG,EACA,6CACA,GACA,OACA,aACA,0BAEF+uC,IAAK,IAAIlvC,IACPG,EACA,6CACA,GACA,MACA,YACA,0BAEFgvC,IAAK,IAAInvC,IACPG,EACA,6CACA,GACA,MACA,gBACA,2BAEFivC,KAAM,IAAIpvC,IACRG,EACA,6CACA,GACA,OACA,uBACA,2BAEFkvC,IAAK,IAAIrvC,IACPG,EACA,6CACA,GACA,MACA,iBACA,6BAEFmvC,KAAM,IAAItvC,IACRG,EACA,6CACA,EACA,OACA,eACA,2BAEFovC,IAAK,IAAIvvC,IACPG,EACA,6CACA,GACA,MACA,gBACA,uBAEFqvC,KAAM,IAAIxvC,IACRG,EACA,6CACA,GACA,OACA,eACA,uBAEFsvC,MAAO,IAAIzvC,IACTG,EACA,6CACA,GACA,QACA,iBACA,yBAEFuvC,MAAO,IAAI1vC,IACTG,EACA,6CACA,GACA,QACA,4BACA,uBAEFwvC,KAAM,IAAI3vC,IACRG,EACA,6CACA,GACA,OACA,aACA,sBAEFyvC,MAAO,IAAI5vC,IACTG,EACA,6CACA,GACA,QACA,sBACA,6BAEF0vC,IAAK,IAAI7vC,IACPG,EACA,6CACA,EACA,MACA,gBACA,0BAEF2vC,IAAK,IAAI9vC,IACPG,EACA,6CACA,EACA,MACA,yBACA,0BAEF4vC,GAAI,IAAI/vC,IACNG,EACA,6CACA,EACA,KACA,gBACA,0BAEF6vC,KAAM,IAAIhwC,IACRG,EACA,6CACA,GACA,OACA,qBACA,yBAEF8vC,IAAK,IAAIjwC,IACPG,EACA,6CACA,EACA,MACA,iBACA,0BAEF+vC,IAAK,IAAIlwC,IACPG,EACA,6CACA,EACA,MACA,4BACA,0BAEFgwC,IAAK,IAAInwC,IACPG,EACA,6CACA,GACA,MACA,iBACA,8CAEFiwC,KAAM,IAAIpwC,IACRG,EACA,6CACA,GACA,OACA,aACA,6BAEFkwC,IAAK,IAAIrwC,IACPG,EACA,6CACA,GACA,MACA,qBACA,4BAEFmwC,KAAM,IAAItwC,IACRG,EACA,6CACA,EACA,OACA,aACA,wBAEFowC,QAAS,IAAIvwC,IACXG,EACA,6CACA,GACA,UACA,eACA,sBAEFqwC,KAAM,IAAIxwC,IACRG,EACA,6CACA,GACA,OACA,gBACA,4BAEFswC,IAAK,IAAIzwC,IACPG,EACA,6CACA,GACA,MACA,oBACA,4BAEFuwC,IAAK,IAAI1wC,IACPG,EACA,6CACA,GACA,MACA,iBACA,yBAEFwwC,IAAK,IAAI3wC,IACPG,EACA,6CACA,EACA,MACA,eACA,kCAEFywC,IAAK,IAAI5wC,IACPG,EACA,6CACA,GACA,MACA,2BACA,kCAEF0wC,IAAK,IAAI7wC,IAAMG,EAAS,6CAA8C,GAAI,MAAO,cAAe,qBAChG2wC,MAAO,IAAI9wC,IACTG,EACA,6CACA,GACA,QACA,sBACA,4BAEF4wC,IAAK,IAAI/wC,IAAMG,EAAS,6CAA8C,GAAI,MAAO,cAAe,qBAChG6wC,MAAO,IAAIhxC,IACTG,EACA,6CACA,GACA,QACA,yBACA,sBAEF8wC,KAAM,IAAIjxC,IACRG,EACA,6CACA,GACA,OACA,yBACA,6BAEF+wC,KAAM,IAAIlxC,IACRG,EACA,6CACA,GACA,OACA,sBACA,0BAEFgxC,KAAM,IAAInxC,IACRG,EACA,6CACA,GACA,OACA,qBACA,yBAEFixC,KAAM,IAAIpxC,IACRG,EACA,6CACA,GACA,OACA,qBACA,8CAEFkxC,MAAO,IAAIrxC,IACTG,EACA,6CACA,GACA,QACA,4BACA,2BAEFmxC,OAAQ,IAAItxC,IACVG,EACA,6CACA,GACA,SACA,6BACA,2BAEFoxC,MAAO,IAAIvxC,IACTG,EACA,6CACA,GACA,QACA,4BACA,2BAEFqxC,MAAO,IAAIxxC,IACTG,EACA,6CACA,GACA,QACA,4BACA,2BAEFsxC,IAAK,IAAIzxC,IACPG,EACA,6CACA,GACA,MACA,6BACA,yBAEFuxC,IAAK,IAAI1xC,IACPG,EACA,6CACA,GACA,MACA,6BACA,4BAEFwxC,KAAM,IAAI3xC,IACRG,EACA,6CACA,GACA,OACA,kCACA,6BAEFyxC,IAAK,IAAI5xC,IACPG,EACA,6CACA,GACA,MACA,6BACA,6BAEF0xC,IAAK,IAAI7xC,IACPG,EACA,6CACA,GACA,MACA,wBACA,mBAEF2xC,KAAM,IAAI9xC,IACRG,EACA,6CACA,GACA,OACA,8BACA,uBAEF4xC,IAAK,IAAI/xC,IACPG,EACA,6CACA,GACA,MACA,wBACA,2BAEF6xC,KAAM,IAAIhyC,IACRG,EACA,6CACA,GACA,OACA,2BACA,2BAEF8xC,KAAM,IAAIjyC,IACRG,EACA,6CACA,GACA,OACA,iCACA,wBAEF+xC,IAAK,IAAIlyC,IACPG,EACA,6CACA,GACA,MACA,0BACA,0BAEFgyC,IAAK,IAAInyC,IACPG,EACA,6CACA,GACA,MACA,iCACA,qBAEFiyC,IAAK,IAAIpyC,IACPG,EACA,6CACA,GACA,MACA,kCACA,0BAEFkyC,IAAK,IAAIryC,IACPG,EACA,6CACA,GACA,MACA,4BACA,wBAEFmyC,IAAK,IAAItyC,IACPG,EACA,6CACA,GACA,MACA,6BACA,wBAEFoyC,KAAM,IAAIvyC,IACRG,EACA,6CACA,GACA,OACA,mBACA,+BAEFqyC,OAAQ,IAAIxyC,IACVG,EACA,6CACA,GACA,SACA,mBACA,2BAEFsyC,MAAO,IAAIzyC,IACTG,EACA,6CACA,GACA,QACA,yBACA,2BAEFuyC,QAAS,IAAI1yC,IACXG,EACA,6CACA,GACA,UACA,2BACA,2BAEFwyC,MAAO,IAAI3yC,IACTG,EACA,6CACA,GACA,QACA,iBACA,yBAEFyyC,IAAK,IAAI5yC,IACPG,EACA,6CACA,GACA,MACA,iBACA,uBAEF0yC,IAAK,IAAI7yC,IACPG,EACA,6CACA,GACA,MACA,wBACA,2BAEF2yC,KAAM,IAAI9yC,IACRG,EACA,6CACA,GACA,OACA,oBACA,uBAEF4yC,IAAK,IAAI/yC,IACPG,EACA,6CACA,GACA,MACA,oBACA,2BAEF6yC,KAAM,IAAIhzC,IACRG,EACA,6CACA,GACA,OACA,mBACA,kCAEF8yC,IAAK,IAAIjzC,IACPG,EACA,6CACA,GACA,MACA,gBACA,4BAEF+yC,KAAM,IAAIlzC,IACRG,EACA,6CACA,EACA,OACA,qBACA,yBAEFgzC,KAAM,IAAInzC,IACRG,EACA,6CACA,EACA,OACA,yBACA,6BAEFizC,IAAK,IAAIpzC,IACPG,EACA,6CACA,GACA,MACA,gBACA,gCAEFkzC,IAAK,IAAIrzC,IACPG,EACA,6CACA,GACA,MACA,sBACA,6BAEFmzC,KAAM,IAAItzC,IACRG,EACA,6CACA,GACA,OACA,qBACA,iCAEFozC,IAAK,IAAIvzC,IACPG,EACA,6CACA,GACA,MACA,sBACA,qBAEFqzC,KAAM,IAAIxzC,IACRG,EACA,6CACA,GACA,OACA,aACA,2BAEFszC,KAAM,IAAIzzC,IAAMG,EAAS,6CAA8C,GAAI,OAAQ,aAAc,oBACjGuzC,IAAK,IAAI1zC,IAAMG,EAAS,6CAA8C,EAAG,MAAO,YAAa,oBAC7FwzC,KAAM,IAAI3zC,IACRG,EACA,6CACA,GACA,OACA,iBACA,wBAEFyzC,OAAQ,IAAI5zC,IACVG,EACA,6CACA,GACA,SACA,eACA,+BAEF0zC,IAAK,IAAI7zC,IACPG,EACA,6CACA,GACA,MACA,mBACA,+BAEF2zC,KAAM,IAAI9zC,IACRG,EACA,6CACA,GACA,OACA,qBACA,yBAEF4zC,KAAM,IAAI/zC,IACRG,EACA,6CACA,GACA,OACA,kBACA,yBAEF6zC,IAAK,IAAIh0C,IACPG,EACA,6CACA,GACA,MACA,yBACA,6BAEF8zC,IAAK,IAAIj0C,IACPG,EACA,6CACA,GACA,MACA,wBACA,wBAEF+zC,IAAK,IAAIl0C,IACPG,EACA,6CACA,EACA,MACA,6BACA,2BAEFg0C,KAAM,IAAIn0C,IACRG,EACA,6CACA,GACA,OACA,SACA,4BAEFi0C,KAAM,IAAIp0C,IACRG,EACA,6CACA,GACA,OACA,YACA,4BAEF6gC,IAAK,IAAIhhC,IACPG,EACA,6CACA,GACA,MACA,yBACA,gCAEFk0C,MAAO,IAAIr0C,IACTG,EACA,6CACA,GACA,QACA,iBACA,+BAEFm0C,IAAK,IAAIt0C,IACPG,EACA,6CACA,GACA,MACA,oBACA,8BAEFo0C,IAAK,IAAIv0C,IACPG,EACA,6CACA,GACA,MACA,YACA,oCAEFq0C,MAAO,IAAIx0C,IACTG,EACA,6CACA,GACA,QACA,cACA,0BAEFs0C,IAAK,IAAIz0C,IACPG,EACA,6CACA,GACA,MACA,gBACA,4BAEFu0C,YAAM,IAAI10C,IACRG,EACA,6CACA,EACA,YACA,sBACA,8BAEFw0C,OAAQ,IAAI30C,IACVG,EACA,6CACA,GACA,SACA,cACA,kCAEFy0C,IAAK,IAAI50C,IACPG,EACA,6CACA,GACA,MACA,iBACA,yBAEF00C,IAAK,IAAI70C,IACPG,EACA,6CACA,GACA,MACA,qBACA,yBAEF20C,IAAK,IAAI90C,IACPG,EACA,6CACA,GACA,MACA,+BACA,+BAEF40C,IAAK,IAAI/0C,IACPG,EACA,6CACA,GACA,MACA,aACA,yBAEF60C,IAAK,IAAIh1C,IACPG,EACA,6CACA,GACA,MACA,YACA,yBAEF80C,MAAO,IAAIj1C,IACTG,EACA,6CACA,GACA,QACA,4BACA,2BAEF+0C,KAAM,IAAIl1C,IACRG,EACA,6CACA,GACA,OACA,aACA,2BAEFg1C,IAAK,IAAIn1C,IACPG,EACA,6CACA,GACA,MACA,wBACA,0BAEF8E,IAAK,IAAIjF,IACPG,EACA,6CACA,GACA,MACA,gCACA,0BAEFi1C,KAAM,IAAIp1C,IACRG,EACA,6CACA,GACA,OACA,aACA,uBAEFk1C,IAAK,IAAIr1C,IACPG,EACA,6CACA,EACA,MACA,mBACA,wBAEFm1C,KAAM,IAAIt1C,IACRG,EACA,6CACA,EACA,OACA,uBACA,yBAEFo1C,KAAM,IAAIv1C,IACRG,EACA,6CACA,GACA,OACA,kBACA,0BAEFq1C,IAAK,IAAIx1C,IACPG,EACA,6CACA,GACA,MACA,eACA,2BAEFs1C,KAAM,IAAIz1C,IACRG,EACA,6CACA,GACA,OACA,iBACA,yBAEFu1C,aAAO,IAAI11C,IACTG,EACA,6CACA,EACA,aACA,iBACA,8BAEFw1C,IAAK,IAAI31C,IACPG,EACA,6CACA,GACA,MACA,eACA,2BAEFy1C,KAAM,IAAI51C,IACRG,EACA,6CACA,GACA,OACA,eACA,uBAEF01C,MAAO,IAAI71C,IACTG,EACA,6CACA,EACA,QACA,qBACA,2BAEF21C,KAAM,IAAI91C,IACRG,EACA,6CACA,GACA,OACA,aACA,8BAEF41C,KAAM,IAAI/1C,IACRG,EACA,6CACA,GACA,OACA,aACA,yBAEF61C,IAAK,IAAIh2C,IAAMG,EAAS,6CAA8C,GAAI,MAAO,YAAa,wBAC9F81C,IAAK,IAAIj2C,IACPG,EACA,6CACA,EACA,MACA,eACA,wBAEF+1C,KAAM,IAAIl2C,IACRG,EACA,6CACA,GACA,OACA,aACA,gCAEFg2C,KAAM,IAAIn2C,IACRG,EACA,6CACA,GACA,OACA,gBACA,8BAEFi2C,IAAK,IAAIp2C,IACPG,EACA,6CACA,GACA,MACA,kBACA,0BAEFk2C,OAAQ,IAAIr2C,IACVG,EACA,6CACA,GACA,SACA,cACA,0BAEFm2C,MAAO,IAAIt2C,IACTG,EACA,6CACA,GACA,QACA,wBACA,uBAEFo2C,GAAI,IAAIv2C,IACNG,EACA,6CACA,GACA,KACA,gBACA,2BAEFq2C,IAAK,IAAIx2C,IACPG,EACA,6CACA,GACA,MACA,qBACA,qBAEFs2C,KAAM,IAAIz2C,IACRG,EACA,6CACA,GACA,OACA,4BACA,4BAEFu2C,KAAM,IAAI12C,IACRG,EACA,6CACA,GACA,OACA,qBACA,yBAEFw2C,IAAK,IAAI32C,IACPG,EACA,6CACA,GACA,MACA,gBACA,uBAEFy2C,IAAK,IAAI52C,IACPG,EACA,6CACA,GACA,MACA,mBACA,0BAEF02C,KAAM,IAAI72C,IACRG,EACA,6CACA,GACA,OACA,oBACA,mCAEF22C,GAAI,IAAI92C,IAAMG,EAAS,6CAA8C,GAAI,KAAM,WAAY,wBAC3F42C,IAAK,IAAI/2C,IACPG,EACA,6CACA,GACA,MACA,iBACA,4BAEF62C,KAAM,IAAIh3C,IACRG,EACA,6CACA,GACA,OACA,cACA,2BAEF82C,OAAQ,IAAIj3C,IACVG,EACA,6CACA,GACA,SACA,kBACA,8BAEF+2C,MAAO,IAAIl3C,IACTG,EACA,6CACA,GACA,QACA,kBACA,yBAEFg3C,KAAM,IAAIn3C,IACRG,EACA,6CACA,EACA,OACA,aACA,+BAEFi3C,GAAI,IAAIp3C,IACNG,EACA,6CACA,GACA,KACA,gBACA,uBAEFk3C,IAAK,IAAIr3C,IAAMG,EAAS,6CAA8C,EAAG,MAAO,eAAgB,sBAChGm3C,IAAK,IAAIt3C,IACPG,EACA,6CACA,GACA,MACA,eACA,0BAEFo3C,IAAK,IAAIv3C,IACPG,EACA,6CACA,GACA,MACA,yBACA,wBAEFq3C,IAAK,IAAIx3C,IACPG,EACA,6CACA,GACA,MACA,wBACA,4BAEFs3C,SAAU,IAAIz3C,IACZG,EACA,6CACA,EACA,WACA,iBACA,yBAEFu3C,IAAK,IAAI13C,IACPG,EACA,6CACA,GACA,MACA,qCACA,6BAEFw3C,IAAK,IAAI33C,IACPG,EACA,6CACA,GACA,MACA,eACA,uBAEFy3C,KAAM,IAAI53C,IACRG,EACA,6CACA,GACA,OACA,gBACA,wBAEF03C,IAAK,IAAI73C,IACPG,EACA,6CACA,GACA,MACA,mBACA,oCAEF23C,KAAM,IAAI93C,IACRG,EACA,6CACA,GACA,OACA,aACA,iCAEF43C,GAAI,IAAI/3C,IACNG,EACA,6CACA,GACA,KACA,kBACA,8BAEF63C,MAAO,IAAIh4C,IACTG,EACA,6CACA,GACA,QACA,qBACA,yBAEF83C,KAAM,IAAIj4C,IACRG,EACA,6CACA,GACA,OACA,YACA,yBAEF+3C,KAAM,IAAIl4C,IACRG,EACA,6CACA,GACA,OACA,eACA,yBAEFg4C,MAAO,IAAIn4C,IACTG,EACA,6CACA,GACA,QACA,YACA,sCAEFi4C,IAAK,IAAIp4C,IACPG,EACA,6CACA,GACA,MACA,mBACA,oCAEFk4C,IAAK,IAAIr4C,IACPG,EACA,6CACA,GACA,MACA,QACA,8BAEFm4C,MAAO,IAAIt4C,IACTG,EACA,6CACA,EACA,QACA,qBACA,2DAEFo4C,IAAK,IAAIv4C,IAAMG,EAAS,6CAA8C,EAAG,MAAO,QAAS,yBACzFq4C,KAAM,IAAIx4C,IACRG,EACA,6CACA,GACA,OACA,kBACA,+BAEFs4C,IAAK,IAAIz4C,IACPG,EACA,6CACA,GACA,MACA,iBACA,8BAEFu4C,IAAK,IAAI14C,IACPG,EACA,6CACA,GACA,MACA,mBACA,4BAEFw4C,KAAM,IAAI34C,IACRG,EACA,6CACA,GACA,OACA,iBACA,2BAEFygC,IAAK,IAAI5gC,IACPG,EACA,6CACA,EACA,MACA,oBACA,oCAEFy4C,IAAK,IAAI54C,IACPG,EACA,6CACA,GACA,MACA,gBACA,sBAEF04C,QAAS,IAAI74C,IACXG,EACA,6CACA,GACA,UACA,sBACA,4BAEFwgC,MAAO,IAAI3gC,IACTG,EACA,6CACA,EACA,QACA,qBACA,2DAEF24C,KAAM,IAAI94C,IACRG,EACA,6CACA,GACA,OACA,cACA,2BAEF44C,GAAI,IAAI/4C,IAAMG,EAAS,6CAA8C,GAAI,KAAM,QAAS,qBACxF64C,QAAS,IAAIh5C,IACXG,EACA,6CACA,GACA,UACA,kBACA,kCAEF84C,MAAO,IAAIj5C,IACTG,EACA,6CACA,GACA,QACA,cACA,0BAEF+4C,MAAO,IAAIl5C,IACTG,EACA,6CACA,GACA,QACA,cACA,+BAEFugC,OAAQ,IAAI1gC,IACVG,EACA,6CACA,EACA,SACA,sBACA,0DAEFg5C,MAAO,IAAIn5C,IACTG,EACA,6CACA,GACA,QACA,cACA,qBAEFi5C,IAAK,IAAIp5C,IACPG,EACA,6CACA,GACA,MACA,YACA,yBAEFk5C,KAAM,IAAIr5C,IACRG,EACA,6CACA,GACA,OACA,kDACA,+BAEFm5C,GAAI,IAAIt5C,IACNG,EACA,6CACA,GACA,KACA,gBACA,gCAEFo5C,KAAM,IAAIv5C,IACRG,EACA,6CACA,GACA,OACA,QACA,+BAEFq5C,IAAK,IAAIx5C,IAAMG,EAAS,6CAA8C,GAAI,MAAO,WAAY,wBAC7FmgC,IAAK,IAAItgC,IACPG,EACA,6CACA,GACA,MACA,mBACA,4BAEFs5C,IAAK,IAAIz5C,IACPG,EACA,6CACA,GACA,MACA,aACA,4BAEFu5C,KAAM,IAAI15C,IACRG,EACA,6CACA,GACA,OACA,aACA,0BAEFw5C,KAAM,IAAI35C,IACRG,EACA,6CACA,GACA,OACA,mBACA,8BAEFy5C,KAAM,IAAI55C,IACRG,EACA,6CACA,GACA,OACA,kBACA,kCAEF05C,MAAO,IA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","file":"static/js/main.c257336e.chunk.js","sourcesContent":["import { Interface, FunctionFragment } from '@ethersproject/abi'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport {\r\n  addMulticallListeners,\r\n  Call,\r\n  removeMulticallListeners,\r\n  parseCallKey,\r\n  toCallKey,\r\n  ListenerOptions,\r\n} from './actions'\r\n\r\nexport interface Result extends ReadonlyArray<any> {\r\n  readonly [key: string]: any\r\n}\r\n\r\ntype MethodArg = string | number | BigNumber\r\ntype MethodArgs = Array<MethodArg | MethodArg[]>\r\n\r\ntype OptionalMethodInputs = Array<MethodArg | MethodArg[] | undefined> | undefined\r\n\r\nfunction isMethodArg(x: unknown): x is MethodArg {\r\n  return ['string', 'number'].indexOf(typeof x) !== -1\r\n}\r\n\r\nfunction isValidMethodArgs(x: unknown): x is MethodArgs | undefined {\r\n  return (\r\n    x === undefined ||\r\n    (Array.isArray(x) && x.every((xi) => isMethodArg(xi) || (Array.isArray(xi) && xi.every(isMethodArg))))\r\n  )\r\n}\r\n\r\ninterface CallResult {\r\n  readonly valid: boolean\r\n  readonly data: string | undefined\r\n  readonly blockNumber: number | undefined\r\n}\r\n\r\nconst INVALID_RESULT: CallResult = { valid: false, blockNumber: undefined, data: undefined }\r\n\r\n// use this options object\r\nexport const NEVER_RELOAD: ListenerOptions = {\r\n  blocksPerFetch: Infinity,\r\n}\r\n\r\n// the lowest level call for subscribing to contract data\r\nfunction useCallsData(calls: (Call | undefined)[], options?: ListenerOptions): CallResult[] {\r\n  const { chainId } = useActiveWeb3React()\r\n  const callResults = useSelector<AppState, AppState['multicall']['callResults']>(\r\n    (state) => state.multicall.callResults,\r\n  )\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const serializedCallKeys: string = useMemo(\r\n    () =>\r\n      JSON.stringify(\r\n        calls\r\n          ?.filter((c): c is Call => Boolean(c))\r\n          ?.map(toCallKey)\r\n          ?.sort() ?? [],\r\n      ),\r\n    [calls],\r\n  )\r\n\r\n  // update listeners when there is an actual change that persists for at least 100ms\r\n  useEffect(() => {\r\n    const callKeys: string[] = JSON.parse(serializedCallKeys)\r\n    if (!chainId || callKeys.length === 0) return undefined\r\n    // eslint-disable-next-line @typescript-eslint/no-shadow\r\n    const calls = callKeys.map((key) => parseCallKey(key))\r\n    dispatch(\r\n      addMulticallListeners({\r\n        chainId,\r\n        calls,\r\n        options,\r\n      }),\r\n    )\r\n\r\n    return () => {\r\n      dispatch(\r\n        removeMulticallListeners({\r\n          chainId,\r\n          calls,\r\n          options,\r\n        }),\r\n      )\r\n    }\r\n  }, [chainId, dispatch, options, serializedCallKeys])\r\n\r\n  return useMemo(\r\n    () =>\r\n      calls.map<CallResult>((call) => {\r\n        if (!chainId || !call) return INVALID_RESULT\r\n\r\n        const result = callResults[chainId]?.[toCallKey(call)]\r\n        let data\r\n        if (result?.data && result?.data !== '0x') {\r\n          // eslint-disable-next-line prefer-destructuring\r\n          data = result.data\r\n        }\r\n\r\n        return { valid: true, data, blockNumber: result?.blockNumber }\r\n      }),\r\n    [callResults, calls, chainId],\r\n  )\r\n}\r\n\r\ninterface CallState {\r\n  readonly valid: boolean\r\n  // the result, or undefined if loading or errored/no data\r\n  readonly result: Result | undefined\r\n  // true if the result has never been fetched\r\n  readonly loading: boolean\r\n  // true if the result is not for the latest block\r\n  readonly syncing: boolean\r\n  // true if the call was made and is synced, but the return data is invalid\r\n  readonly error: boolean\r\n}\r\n\r\nconst INVALID_CALL_STATE: CallState = { valid: false, result: undefined, loading: false, syncing: false, error: false }\r\nconst LOADING_CALL_STATE: CallState = { valid: true, result: undefined, loading: true, syncing: true, error: false }\r\n\r\nfunction toCallState(\r\n  callResult: CallResult | undefined,\r\n  contractInterface: Interface | undefined,\r\n  fragment: FunctionFragment | undefined,\r\n  latestBlockNumber: number | undefined,\r\n): CallState {\r\n  if (!callResult) return INVALID_CALL_STATE\r\n  const { valid, data, blockNumber } = callResult\r\n  if (!valid) return INVALID_CALL_STATE\r\n  if (valid && !blockNumber) return LOADING_CALL_STATE\r\n  if (!contractInterface || !fragment || !latestBlockNumber) return LOADING_CALL_STATE\r\n  const success = data && data.length > 2\r\n  const syncing = (blockNumber ?? 0) < latestBlockNumber\r\n  let result: Result | undefined\r\n  if (success && data) {\r\n    try {\r\n      result = contractInterface.decodeFunctionResult(fragment, data)\r\n    } catch (error) {\r\n      console.debug('Result data parsing failed', fragment, data)\r\n      return {\r\n        valid: true,\r\n        loading: false,\r\n        error: true,\r\n        syncing,\r\n        result,\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    valid: true,\r\n    loading: false,\r\n    syncing,\r\n    result,\r\n    error: !success,\r\n  }\r\n}\r\n\r\nexport function useSingleContractMultipleData(\r\n  contract: Contract | null | undefined,\r\n  methodName: string,\r\n  callInputs: OptionalMethodInputs[],\r\n  options?: ListenerOptions,\r\n): CallState[] {\r\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\r\n\r\n  const calls = useMemo(\r\n    () =>\r\n      contract && fragment && callInputs && callInputs.length > 0\r\n        ? callInputs.map<Call>((inputs) => {\r\n            return {\r\n              address: contract.address,\r\n              callData: contract.interface.encodeFunctionData(fragment, inputs),\r\n            }\r\n          })\r\n        : [],\r\n    [callInputs, contract, fragment],\r\n  )\r\n\r\n  const results = useCallsData(calls, options)\r\n\r\n  const { currentBlock } = useBlock()\r\n\r\n  return useMemo(() => {\r\n    return results.map((result) => toCallState(result, contract?.interface, fragment, currentBlock))\r\n  }, [fragment, contract, results, currentBlock])\r\n}\r\n\r\nexport function useMultipleContractSingleData(\r\n  addresses: (string | undefined)[],\r\n  contractInterface: Interface,\r\n  methodName: string,\r\n  callInputs?: OptionalMethodInputs,\r\n  options?: ListenerOptions,\r\n): CallState[] {\r\n  const fragment = useMemo(() => contractInterface.getFunction(methodName), [contractInterface, methodName])\r\n  const callData: string | undefined = useMemo(\r\n    () =>\r\n      fragment && isValidMethodArgs(callInputs)\r\n        ? contractInterface.encodeFunctionData(fragment, callInputs)\r\n        : undefined,\r\n    [callInputs, contractInterface, fragment],\r\n  )\r\n\r\n  const calls = useMemo(\r\n    () =>\r\n      fragment && addresses && addresses.length > 0 && callData\r\n        ? addresses.map<Call | undefined>((address) => {\r\n            return address && callData\r\n              ? {\r\n                  address,\r\n                  callData,\r\n                }\r\n              : undefined\r\n          })\r\n        : [],\r\n    [addresses, callData, fragment],\r\n  )\r\n\r\n  const results = useCallsData(calls, options)\r\n\r\n  const { currentBlock } = useBlock()\r\n\r\n  return useMemo(() => {\r\n    return results.map((result) => toCallState(result, contractInterface, fragment, currentBlock))\r\n  }, [fragment, results, contractInterface, currentBlock])\r\n}\r\n\r\nexport function useSingleCallResult(\r\n  contract: Contract | null | undefined,\r\n  methodName: string,\r\n  inputs?: OptionalMethodInputs,\r\n  options?: ListenerOptions,\r\n): CallState {\r\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\r\n\r\n  const calls = useMemo<Call[]>(() => {\r\n    return contract && fragment && isValidMethodArgs(inputs)\r\n      ? [\r\n          {\r\n            address: contract.address,\r\n            callData: contract.interface.encodeFunctionData(fragment, inputs),\r\n          },\r\n        ]\r\n      : []\r\n  }, [contract, fragment, inputs])\r\n\r\n  const result = useCallsData(calls, options)[0]\r\n  const { currentBlock } = useBlock()\r\n\r\n  return useMemo(() => {\r\n    return toCallState(result, contract?.interface, fragment, currentBlock)\r\n  }, [result, contract, fragment, currentBlock])\r\n}\r\n","import { Language } from '@pancakeswap/uikit'\r\n\r\nexport const AR: Language = { locale: 'ar-SA', language: 'العربية', code: 'ar' }\r\nexport const BN: Language = { locale: 'bn-BD', language: 'বাংলা', code: 'bn' }\r\nexport const EN: Language = { locale: 'en-US', language: 'English', code: 'en' }\r\nexport const DE: Language = { locale: 'de-DE', language: 'Deutsch', code: 'de' }\r\nexport const EL: Language = { locale: 'el-GR', language: 'Ελληνικά', code: 'el' }\r\nexport const ESES: Language = { locale: 'es-ES', language: 'Español', code: 'es-ES' }\r\nexport const FI: Language = { locale: 'fi-FI', language: 'Suomalainen', code: 'fi' }\r\nexport const FIL: Language = { locale: 'fil-PH', language: 'Filipino', code: 'fil' }\r\nexport const FR: Language = { locale: 'fr-FR', language: 'Français', code: 'fr' }\r\nexport const HI: Language = { locale: 'hi-IN', language: 'हिंदी', code: 'hi' }\r\nexport const HU: Language = { locale: 'hu-HU', language: 'Magyar', code: 'hu' }\r\nexport const ID: Language = { locale: 'id-ID', language: 'Bahasa Indonesia', code: 'id' }\r\nexport const IT: Language = { locale: 'it-IT', language: 'Italiano', code: 'it' }\r\nexport const JA: Language = { locale: 'ja-JP', language: '日本語', code: 'ja' }\r\nexport const KO: Language = { locale: 'ko-KR', language: '한국어', code: 'ko' }\r\nexport const NL: Language = { locale: 'nl-NL', language: 'Nederlands', code: 'nl' }\r\nexport const PL: Language = { locale: 'pl-PL', language: 'Polski', code: 'pl' }\r\nexport const PTBR: Language = { locale: 'pt-BR', language: 'Português (Brazil)', code: 'pt-br' }\r\nexport const PTPT: Language = { locale: 'pt-PT', language: 'Português', code: 'pt-pt' }\r\nexport const RO: Language = { locale: 'ro-RO', language: 'Română', code: 'ro' }\r\nexport const RU: Language = { locale: 'ru-RU', language: 'Русский', code: 'ru' }\r\nexport const SVSE: Language = { locale: 'sv-SE', language: 'Svenska', code: 'sv' }\r\nexport const TA: Language = { locale: 'ta-IN', language: 'தமிழ்', code: 'ta' }\r\nexport const TR: Language = { locale: 'tr-TR', language: 'Türkçe', code: 'tr' }\r\nexport const UK: Language = { locale: 'uk-UA', language: 'Українська', code: 'uk' }\r\nexport const VI: Language = { locale: 'vi-VN', language: 'Tiếng Việt', code: 'vi' }\r\nexport const ZHCN: Language = { locale: 'zh-CN', language: '简体中文', code: 'zh-cn' }\r\nexport const ZHTW: Language = { locale: 'zh-TW', language: '繁體中文', code: 'zh-tw' }\r\n\r\nexport const languages = {\r\n  'ar-SA': AR,\r\n  'bn-BD': BN,\r\n  'en-US': EN,\r\n  'de-DE': DE,\r\n  'el-GR': EL,\r\n  'es-ES': ESES,\r\n  'fi-FI': FI,\r\n  'fil-PH': FIL,\r\n  'fr-FR': FR,\r\n  'hi-IN': HI,\r\n  'hu-HU': HU,\r\n  'id-ID': ID,\r\n  'it-IT': IT,\r\n  'ja-JP': JA,\r\n  'ko-KR': KO,\r\n  'nl-NL': NL,\r\n  'pl-PL': PL,\r\n  'pt-BR': PTBR,\r\n  'pt-PT': PTPT,\r\n  'ro-RO': RO,\r\n  'ru-RU': RU,\r\n  'sv-SE': SVSE,\r\n  'ta-IN': TA,\r\n  'tr-TR': TR,\r\n  'uk-UA': UK,\r\n  'vi-VN': VI,\r\n  'zh-CN': ZHCN,\r\n  'zh-TW': ZHTW,\r\n}\r\n\r\nexport const languageList = Object.values(languages)\r\n","import { Address } from '../types'\r\n\r\nexport enum CollectionKey {\r\n  PANCAKE = 'pancake',\r\n  SQUAD = 'pancakeSquad',\r\n}\r\n\r\nexport type Collection = {\r\n  name: string\r\n  description?: string\r\n  slug: string\r\n  address: Address\r\n}\r\n\r\nexport type Collections = {\r\n  [key in CollectionKey]: Collection\r\n}\r\n","import { Collections, CollectionKey } from './types'\r\n\r\nconst collections: Collections = {\r\n  [CollectionKey.PANCAKE]: {\r\n    name: 'Pancake Bunnies',\r\n    slug: 'pancake-bunnies',\r\n    address: {\r\n      250: '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07',\r\n      4002: '0x60935F36e4631F73f0f407e68642144e07aC7f5E',\r\n    },\r\n  },\r\n  [CollectionKey.SQUAD]: {\r\n    name: 'Pancake Squad',\r\n    description: \"PancakeSwap's first official generative NFT collection.. Join the squad.\",\r\n    slug: 'pancake-squad',\r\n    address: {\r\n      250: '0x0a8901b0E25DEb55A87524f0cC164E9644020EBA',\r\n      4002: '0xEf12ef570300bFA65c4F022deAaA3dfF4f5d5c91',\r\n    },\r\n  },\r\n}\r\n\r\nexport default collections\r\n","import collections from 'config/constants/nftsCollections'\r\nimport { CollectionKey } from 'config/constants/nftsCollections/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\n\r\nexport const nftsBaseUrl = '/nfts'\r\nexport const pancakeBunniesAddress = getAddress(collections[CollectionKey.PANCAKE].address)\r\nexport const pancakeSquadAddress = getAddress(collections[CollectionKey.SQUAD].address)\r\n","import { serializeTokens } from './tokens'\r\nimport { SerializedFarmConfig } from './types'\r\n\r\nconst serializedTokens = serializeTokens()\r\n\r\nconst farms: SerializedFarmConfig[] = [\r\n  /**\r\n   * These 3 farms (PID 0, 251, 252) should always be at the top of the file.\r\n   */\r\n  {\r\n    pid: 0,\r\n    lpSymbol: 'CAKE',\r\n    lpAddresses: {\r\n      4002: '0x9C21123D94b93361a29B2C2EFB3d5CD8B17e0A9e',\r\n      250: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n    },\r\n    token: serializedTokens.syrup,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 251,\r\n    lpSymbol: 'CAKE-BNB LP',\r\n    lpAddresses: {\r\n      4002: '0x3ed8936cAFDF85cfDBa29Fbe5940A5b0524824F4',\r\n      250: '0x0eD7e52944161450477ee417DE9Cd3a859b14fD0',\r\n    },\r\n    token: serializedTokens.cake,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n  {\r\n    pid: 252,\r\n    lpSymbol: 'BUSD-BNB LP',\r\n    lpAddresses: {\r\n      4002: '',\r\n      250: '0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16',\r\n    },\r\n    token: serializedTokens.busd,\r\n    quoteToken: serializedTokens.wbnb,\r\n  },\r\n]\r\n\r\nexport default farms\r\n","import BigNumber from 'bignumber.js'\r\nimport { Token } from '@pancakeswap/sdk'\r\n\r\nexport type TranslatableText =\r\n  | string\r\n  | {\r\n      key: string\r\n      data?: {\r\n        [key: string]: string | number\r\n      }\r\n    }\r\nexport interface Address {\r\n  4002?: string\r\n  250: string\r\n}\r\n\r\nexport interface SerializedToken {\r\n  chainId: number\r\n  address: string\r\n  decimals: number\r\n  symbol?: string\r\n  name?: string\r\n  projectLink?: string\r\n}\r\n\r\nexport enum PoolIds {\r\n  poolBasic = 'poolBasic',\r\n  poolUnlimited = 'poolUnlimited',\r\n}\r\n\r\nexport type IfoStatus = 'idle' | 'coming_soon' | 'live' | 'finished'\r\n\r\ninterface IfoPoolInfo {\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  distributionRatio: number // Range [0-1]\r\n}\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  currency: Token\r\n  token: Token\r\n  releaseBlockNumber: number\r\n  articleUrl: string\r\n  campaignId: string\r\n  tokenOfferingPrice: number\r\n  description?: string\r\n  twitterUrl?: string\r\n  telegramUrl?: string\r\n  version: number\r\n  [PoolIds.poolBasic]?: IfoPoolInfo\r\n  [PoolIds.poolUnlimited]: IfoPoolInfo\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n  'AUTO' = 'Auto',\r\n}\r\n\r\ninterface FarmConfigBaseProps {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  multiplier?: string\r\n  isCommunity?: boolean\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface SerializedFarmConfig extends FarmConfigBaseProps {\r\n  token: SerializedToken\r\n  quoteToken: SerializedToken\r\n}\r\n\r\nexport interface DeserializedFarmConfig extends FarmConfigBaseProps {\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\ninterface PoolConfigBaseProps {\r\n  sousId: number\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  enableEmergencyWithdraw?: boolean\r\n}\r\n\r\nexport interface SerializedPoolConfig extends PoolConfigBaseProps {\r\n  earningToken: SerializedToken\r\n  stakingToken: SerializedToken\r\n}\r\n\r\nexport interface DeserializedPoolConfig extends PoolConfigBaseProps {\r\n  earningToken: Token\r\n  stakingToken: Token\r\n}\r\n\r\nexport type Images = {\r\n  lg: string\r\n  md: string\r\n  sm: string\r\n  ipfs?: string\r\n}\r\n\r\nexport type TeamImages = {\r\n  alt: string\r\n} & Images\r\n\r\nexport type Team = {\r\n  id: number\r\n  name: string\r\n  description: string\r\n  isJoinable?: boolean\r\n  users: number\r\n  points: number\r\n  images: TeamImages\r\n  background: string\r\n  textColor: string\r\n}\r\n\r\nexport type CampaignType = 'ifo' | 'teambattle' | 'participation'\r\n\r\nexport type Campaign = {\r\n  id: string\r\n  type: CampaignType\r\n  title?: TranslatableText\r\n  description?: TranslatableText\r\n  badge?: string\r\n}\r\n\r\nexport type PageMeta = {\r\n  title: string\r\n  description?: string\r\n  image?: string\r\n}\r\n\r\nexport enum LotteryStatus {\r\n  PENDING = 'pending',\r\n  OPEN = 'open',\r\n  CLOSE = 'close',\r\n  CLAIMABLE = 'claimable',\r\n}\r\n\r\nexport interface LotteryTicket {\r\n  id: string\r\n  number: string\r\n  status: boolean\r\n  rewardBracket?: number\r\n  roundId?: string\r\n  cakeReward?: string\r\n}\r\n\r\nexport interface LotteryTicketClaimData {\r\n  ticketsWithUnclaimedRewards: LotteryTicket[]\r\n  allWinningTickets: LotteryTicket[]\r\n  cakeTotal: BigNumber\r\n  roundId: string\r\n}\r\n\r\n// Farm Auction\r\nexport interface FarmAuctionBidderConfig {\r\n  account: string\r\n  farmName: string\r\n  tokenAddress: string\r\n  quoteToken: Token\r\n  tokenName: string\r\n  projectSite?: string\r\n  lpAddress?: string\r\n}\r\n\r\n// Note: this status is slightly different compared to 'status' comfing\r\n// from Farm Auction smart contract\r\nexport enum AuctionStatus {\r\n  ToBeAnnounced, // No specific dates/blocks to display\r\n  Pending, // Auction is scheduled but not live yet (i.e. waiting for startBlock)\r\n  Open, // Auction is open for bids\r\n  Finished, // Auction end block is reached, bidding is not possible\r\n  Closed, // Auction was closed in smart contract\r\n}\r\n\r\nexport interface Auction {\r\n  id: number\r\n  status: AuctionStatus\r\n  startBlock: number\r\n  startDate: Date\r\n  endBlock: number\r\n  endDate: Date\r\n  auctionDuration: number\r\n  initialBidAmount: number\r\n  topLeaderboard: number\r\n  leaderboardThreshold: BigNumber\r\n}\r\n\r\nexport interface BidderAuction {\r\n  id: number\r\n  amount: BigNumber\r\n  claimed: boolean\r\n}\r\n\r\nexport interface Bidder extends FarmAuctionBidderConfig {\r\n  position?: number\r\n  isTopPosition: boolean\r\n  samePositionAsAbove: boolean\r\n  amount: BigNumber\r\n}\r\n\r\nexport interface ConnectedBidder {\r\n  account: string\r\n  isWhitelisted: boolean\r\n  bidderData?: Bidder\r\n}\r\n","import { ChainId, Token } from '@pancakeswap/sdk'\r\nimport { Tags, TokenInfo, TokenList } from '@uniswap/token-lists'\r\nimport { useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { DEFAULT_LIST_OF_LISTS } from 'config/constants/lists'\r\nimport { AppState } from '../index'\r\nimport DEFAULT_TOKEN_LIST from '../../config/constants/tokenLists/pancake-default.tokenlist.json'\r\nimport { UNSUPPORTED_LIST_URLS } from '../../config/constants/lists'\r\nimport UNSUPPORTED_TOKEN_LIST from '../../config/constants/tokenLists/pancake-unsupported.tokenlist.json'\r\n\r\ntype TagDetails = Tags[keyof Tags]\r\nexport interface TagInfo extends TagDetails {\r\n  id: string\r\n}\r\n\r\n// use ordering of default list of lists to assign priority\r\nfunction sortByListPriority(urlA: string, urlB: string) {\r\n  const first = DEFAULT_LIST_OF_LISTS.includes(urlA) ? DEFAULT_LIST_OF_LISTS.indexOf(urlA) : Number.MAX_SAFE_INTEGER\r\n  const second = DEFAULT_LIST_OF_LISTS.includes(urlB) ? DEFAULT_LIST_OF_LISTS.indexOf(urlB) : Number.MAX_SAFE_INTEGER\r\n\r\n  // need reverse order to make sure mapping includes top priority last\r\n  if (first < second) return 1\r\n  if (first > second) return -1\r\n  return 0\r\n}\r\n\r\n/**\r\n * Token instances created from token info.\r\n */\r\nexport class WrappedTokenInfo extends Token {\r\n  public readonly tokenInfo: TokenInfo\r\n\r\n  public readonly tags: TagInfo[]\r\n\r\n  constructor(tokenInfo: TokenInfo, tags: TagInfo[]) {\r\n    super(tokenInfo.chainId, tokenInfo.address, tokenInfo.decimals, tokenInfo.symbol, tokenInfo.name)\r\n    this.tokenInfo = tokenInfo\r\n    this.tags = tags\r\n  }\r\n\r\n  public get logoURI(): string | undefined {\r\n    return this.tokenInfo.logoURI\r\n  }\r\n}\r\n\r\nexport type TokenAddressMap = Readonly<\r\n  { [chainId in ChainId]: Readonly<{ [tokenAddress: string]: { token: WrappedTokenInfo; list: TokenList } }> }\r\n>\r\n\r\n/**\r\n * An empty result, useful as a default.\r\n */\r\nconst EMPTY_LIST: TokenAddressMap = {\r\n  [ChainId.MAINNET]: {},\r\n  [ChainId.TESTNET]: {},\r\n}\r\n\r\nconst listCache: WeakMap<TokenList, TokenAddressMap> | null =\r\n  typeof WeakMap !== 'undefined' ? new WeakMap<TokenList, TokenAddressMap>() : null\r\n\r\nexport function listToTokenMap(list: TokenList): TokenAddressMap {\r\n  const result = listCache?.get(list)\r\n  if (result) return result\r\n\r\n  const map = list.tokens.reduce<TokenAddressMap>(\r\n    (tokenMap, tokenInfo) => {\r\n      const tags: TagInfo[] =\r\n        tokenInfo.tags\r\n          ?.map((tagId) => {\r\n            if (!list.tags?.[tagId]) return undefined\r\n            return { ...list.tags[tagId], id: tagId }\r\n          })\r\n          ?.filter((x): x is TagInfo => Boolean(x)) ?? []\r\n      const token = new WrappedTokenInfo(tokenInfo, tags)\r\n      if (tokenMap[token.chainId][token.address] !== undefined) throw Error('Duplicate tokens.')\r\n      return {\r\n        ...tokenMap,\r\n        [token.chainId]: {\r\n          ...tokenMap[token.chainId],\r\n          [token.address]: {\r\n            token,\r\n            list,\r\n          },\r\n        },\r\n      }\r\n    },\r\n    { ...EMPTY_LIST },\r\n  )\r\n  listCache?.set(list, map)\r\n  return map\r\n}\r\n\r\nexport function useAllLists(): {\r\n  readonly [url: string]: {\r\n    readonly current: TokenList | null\r\n    readonly pendingUpdate: TokenList | null\r\n    readonly loadingRequestId: string | null\r\n    readonly error: string | null\r\n  }\r\n} {\r\n  return useSelector<AppState, AppState['lists']['byUrl']>((state) => state.lists.byUrl)\r\n}\r\n\r\nfunction combineMaps(map1: TokenAddressMap, map2: TokenAddressMap): TokenAddressMap {\r\n  return {\r\n    [ChainId.MAINNET]: { ...map1[ChainId.MAINNET], ...map2[ChainId.MAINNET] },\r\n    [ChainId.TESTNET]: { ...map1[ChainId.TESTNET], ...map2[ChainId.TESTNET] },\r\n  }\r\n}\r\n\r\n// merge tokens contained within lists from urls\r\nfunction useCombinedTokenMapFromUrls(urls: string[] | undefined): TokenAddressMap {\r\n  const lists = useAllLists()\r\n\r\n  return useMemo(() => {\r\n    if (!urls) return EMPTY_LIST\r\n\r\n    return (\r\n      urls\r\n        .slice()\r\n        // sort by priority so top priority goes last\r\n        .sort(sortByListPriority)\r\n        .reduce((allTokens, currentUrl) => {\r\n          const current = lists[currentUrl]?.current\r\n          if (!current) return allTokens\r\n          try {\r\n            const newTokens = Object.assign(listToTokenMap(current))\r\n            return combineMaps(allTokens, newTokens)\r\n          } catch (error) {\r\n            console.error('Could not show token list due to error', error)\r\n            return allTokens\r\n          }\r\n        }, EMPTY_LIST)\r\n    )\r\n  }, [lists, urls])\r\n}\r\n\r\n// filter out unsupported lists\r\nexport function useActiveListUrls(): string[] | undefined {\r\n  return useSelector<AppState, AppState['lists']['activeListUrls']>((state) => state.lists.activeListUrls)?.filter(\r\n    (url) => !UNSUPPORTED_LIST_URLS.includes(url),\r\n  )\r\n}\r\n\r\nexport function useInactiveListUrls(): string[] {\r\n  const lists = useAllLists()\r\n  const allActiveListUrls = useActiveListUrls()\r\n  return Object.keys(lists).filter((url) => !allActiveListUrls?.includes(url) && !UNSUPPORTED_LIST_URLS.includes(url))\r\n}\r\n\r\n// get all the tokens from active lists, combine with local default tokens\r\nexport function useCombinedActiveList(): TokenAddressMap {\r\n  const activeListUrls = useActiveListUrls()\r\n  const activeTokens = useCombinedTokenMapFromUrls(activeListUrls)\r\n  const defaultTokenMap = listToTokenMap(DEFAULT_TOKEN_LIST)\r\n  return combineMaps(activeTokens, defaultTokenMap)\r\n}\r\n\r\n// all tokens from inactive lists\r\nexport function useCombinedInactiveList(): TokenAddressMap {\r\n  const allInactiveListUrls: string[] = useInactiveListUrls()\r\n  return useCombinedTokenMapFromUrls(allInactiveListUrls)\r\n}\r\n\r\n// used to hide warnings on import for default tokens\r\nexport function useDefaultTokenList(): TokenAddressMap {\r\n  return listToTokenMap(DEFAULT_TOKEN_LIST)\r\n}\r\n\r\n// list of tokens not supported on interface, used to show warnings and prevent swaps and adds\r\nexport function useUnsupportedTokenList(): TokenAddressMap {\r\n  // get hard coded unsupported tokens\r\n  const localUnsupportedListMap = listToTokenMap(UNSUPPORTED_TOKEN_LIST)\r\n\r\n  // get any loaded unsupported tokens\r\n  const loadedUnsupportedListMap = useCombinedTokenMapFromUrls(UNSUPPORTED_LIST_URLS)\r\n\r\n  // format into one token address map\r\n  return combineMaps(localUnsupportedListMap, loadedUnsupportedListMap)\r\n}\r\n\r\nexport function useIsListActive(url: string): boolean {\r\n  const activeListUrls = useActiveListUrls()\r\n  return Boolean(activeListUrls?.includes(url))\r\n}\r\n","import { EN } from 'config/localization/languages'\r\n\r\nconst publicUrl = process.env.PUBLIC_URL\r\n\r\nexport const LS_KEY = 'pancakeswap_language'\r\n\r\nexport const fetchLocale = async (locale) => {\r\n  const response = await fetch(`${publicUrl}/locales/${locale}.json`)\r\n  const data = await response.json()\r\n  return data\r\n}\r\n\r\nexport const getLanguageCodeFromLS = () => {\r\n  try {\r\n    const codeFromStorage = localStorage.getItem(LS_KEY)\r\n\r\n    return codeFromStorage || EN.locale\r\n  } catch {\r\n    return EN.locale\r\n  }\r\n}\r\n","import useInterval from 'hooks/useInterval'\r\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport { setBlock } from '.'\r\nimport { State } from '../types'\r\n\r\nexport const usePollBlockNumber = (refreshTime = 6000) => {\r\n  const dispatch = useAppDispatch()\r\n  const isWindowVisible = useIsWindowVisible()\r\n\r\n  useInterval(\r\n    () => {\r\n      const fetchBlock = async () => {\r\n        const blockNumber = await simpleRpcProvider.getBlockNumber()\r\n        dispatch(setBlock(blockNumber))\r\n      }\r\n\r\n      fetchBlock()\r\n    },\r\n    isWindowVisible ? refreshTime : null,\r\n    true,\r\n  )\r\n}\r\n\r\nexport const useBlock = () => {\r\n  return useSelector((state: State) => state.block)\r\n}\r\n\r\nexport const useInitialBlock = () => {\r\n  return useSelector((state: State) => state.block.initialBlock)\r\n}\r\n","import sample from 'lodash/sample'\r\n\r\n// if (\r\n//   process.env.NODE_ENV !== 'production' &&\r\n//   (!process.env.REACT_APP_NODE_1 || !process.env.REACT_APP_NODE_2 || !process.env.REACT_APP_NODE_3)\r\n// ) {\r\n//   throw Error('One base RPC URL is undefined')\r\n// }\r\n\r\n// Array of available nodes to connect to\r\nexport const nodes = [process.env.REACT_APP_NODE_4, process.env.REACT_APP_NODE_4, process.env.REACT_APP_NODE_4]\r\n\r\nconst getNodeUrl = () => {\r\n  // Use custom node if available (both for development and production)\r\n  // However on the testnet it wouldn't work, so if on testnet - comment out the REACT_APP_NODE_PRODUCTION from env file\r\n  if (process.env.REACT_APP_NODE_PRODUCTION) {\r\n    return process.env.REACT_APP_NODE_PRODUCTION\r\n  }\r\n  return sample(nodes)\r\n}\r\n\r\nexport default getNodeUrl\r\n","import { useEffect, useRef } from 'react'\r\n\r\nexport default function useInterval(callback: () => void, delay: null | number, leading = true) {\r\n  const savedCallback = useRef<() => void>()\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback\r\n  }, [callback])\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      const { current } = savedCallback\r\n      if (current) {\r\n        current()\r\n      }\r\n    }\r\n\r\n    if (delay !== null) {\r\n      if (leading) tick()\r\n      const id = setInterval(tick, delay)\r\n      return () => clearInterval(id)\r\n    }\r\n    return undefined\r\n  }, [delay, leading])\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document\r\n\r\nfunction isWindowVisible() {\r\n  if (!VISIBILITY_STATE_SUPPORTED) {\r\n    return true\r\n  }\r\n\r\n  return document.visibilityState === 'visible'\r\n}\r\n\r\n/**\r\n * Returns whether the window is currently visible to the user.\r\n */\r\nexport default function useIsWindowVisible() {\r\n  const [isVisible, setIsVisible] = useState(isWindowVisible())\r\n\r\n  useEffect(() => {\r\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined\r\n\r\n    const handleVisibilityChange = () => {\r\n      setIsVisible(isWindowVisible())\r\n    }\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange)\r\n    return () => {\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange)\r\n    }\r\n  }, [setIsVisible])\r\n\r\n  return isVisible\r\n}\r\n","import { request, gql } from 'graphql-request'\r\nimport { GRAPH_API_PREDICTION } from 'config/constants/endpoints'\r\nimport { ethers } from 'ethers'\r\nimport {\r\n  Bet,\r\n  LedgerData,\r\n  BetPosition,\r\n  PredictionsState,\r\n  PredictionStatus,\r\n  ReduxNodeLedger,\r\n  ReduxNodeRound,\r\n  Round,\r\n  RoundData,\r\n  PredictionUser,\r\n  HistoryFilter,\r\n} from 'state/types'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport { getPredictionsContract } from 'utils/contractHelpers'\r\nimport predictionsAbi from 'config/abi/predictions.json'\r\nimport { getPredictionsAddress } from 'utils/addressHelpers'\r\nimport { PredictionsClaimableResponse, PredictionsLedgerResponse, PredictionsRoundsResponse } from 'utils/types'\r\nimport {\r\n  BetResponse,\r\n  getRoundBaseFields,\r\n  getBetBaseFields,\r\n  getUserBaseFields,\r\n  RoundResponse,\r\n  TotalWonMarketResponse,\r\n  UserResponse,\r\n} from './queries'\r\nimport { ROUNDS_PER_PAGE } from './config'\r\n\r\nexport enum Result {\r\n  WIN = 'win',\r\n  LOSE = 'lose',\r\n  CANCELED = 'canceled',\r\n  HOUSE = 'house',\r\n  LIVE = 'live',\r\n}\r\n\r\nexport const numberOrNull = (value: string) => {\r\n  if (value === null) {\r\n    return null\r\n  }\r\n\r\n  const valueNum = Number(value)\r\n  return Number.isNaN(valueNum) ? null : valueNum\r\n}\r\n\r\nconst getRoundPosition = (positionResponse: string) => {\r\n  if (positionResponse === 'Bull') {\r\n    return BetPosition.BULL\r\n  }\r\n\r\n  if (positionResponse === 'Bear') {\r\n    return BetPosition.BEAR\r\n  }\r\n\r\n  if (positionResponse === 'House') {\r\n    return BetPosition.HOUSE\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport const transformBetResponse = (betResponse: BetResponse): Bet => {\r\n  const bet = {\r\n    id: betResponse.id,\r\n    hash: betResponse.hash,\r\n    block: numberOrNull(betResponse.block),\r\n    amount: betResponse.amount ? parseFloat(betResponse.amount) : 0,\r\n    position: betResponse.position === 'Bull' ? BetPosition.BULL : BetPosition.BEAR,\r\n    claimed: betResponse.claimed,\r\n    claimedAt: numberOrNull(betResponse.claimedAt),\r\n    claimedBlock: numberOrNull(betResponse.claimedBlock),\r\n    claimedHash: betResponse.claimedHash,\r\n    claimedBNB: betResponse.claimedBNB ? parseFloat(betResponse.claimedBNB) : 0,\r\n    claimedNetBNB: betResponse.claimedNetBNB ? parseFloat(betResponse.claimedNetBNB) : 0,\r\n    createdAt: numberOrNull(betResponse.createdAt),\r\n    updatedAt: numberOrNull(betResponse.updatedAt),\r\n  } as Bet\r\n\r\n  if (betResponse.user) {\r\n    bet.user = transformUserResponse(betResponse.user)\r\n  }\r\n\r\n  if (betResponse.round) {\r\n    bet.round = transformRoundResponse(betResponse.round)\r\n  }\r\n\r\n  return bet\r\n}\r\n\r\nexport const transformUserResponse = (userResponse: UserResponse): PredictionUser => {\r\n  const {\r\n    id,\r\n    createdAt,\r\n    updatedAt,\r\n    block,\r\n    totalBets,\r\n    totalBetsBull,\r\n    totalBetsBear,\r\n    totalBNB,\r\n    totalBNBBull,\r\n    totalBNBBear,\r\n    totalBetsClaimed,\r\n    totalBNBClaimed,\r\n    winRate,\r\n    averageBNB,\r\n    netBNB,\r\n  } = userResponse\r\n\r\n  return {\r\n    id,\r\n    createdAt: numberOrNull(createdAt),\r\n    updatedAt: numberOrNull(updatedAt),\r\n    block: numberOrNull(block),\r\n    totalBets: numberOrNull(totalBets),\r\n    totalBetsBull: numberOrNull(totalBetsBull),\r\n    totalBetsBear: numberOrNull(totalBetsBear),\r\n    totalBNB: totalBNB ? parseFloat(totalBNB) : 0,\r\n    totalBNBBull: totalBNBBull ? parseFloat(totalBNBBull) : 0,\r\n    totalBNBBear: totalBNBBear ? parseFloat(totalBNBBear) : 0,\r\n    totalBetsClaimed: numberOrNull(totalBetsClaimed),\r\n    totalBNBClaimed: totalBNBClaimed ? parseFloat(totalBNBClaimed) : 0,\r\n    winRate: winRate ? parseFloat(winRate) : 0,\r\n    averageBNB: averageBNB ? parseFloat(averageBNB) : 0,\r\n    netBNB: netBNB ? parseFloat(netBNB) : 0,\r\n  }\r\n}\r\n\r\nexport const transformRoundResponse = (roundResponse: RoundResponse): Round => {\r\n  const {\r\n    id,\r\n    epoch,\r\n    failed,\r\n    position,\r\n    startAt,\r\n    startBlock,\r\n    startHash,\r\n    lockAt,\r\n    lockBlock,\r\n    lockHash,\r\n    lockPrice,\r\n    lockRoundId,\r\n    closeAt,\r\n    closeBlock,\r\n    closeHash,\r\n    closePrice,\r\n    closeRoundId,\r\n    totalBets,\r\n    totalAmount,\r\n    bullBets,\r\n    bullAmount,\r\n    bearBets,\r\n    bearAmount,\r\n    bets = [],\r\n  } = roundResponse\r\n\r\n  return {\r\n    id,\r\n    failed,\r\n    startHash,\r\n    lockHash,\r\n    lockRoundId,\r\n    closeRoundId,\r\n    closeHash,\r\n    position: getRoundPosition(position),\r\n    epoch: numberOrNull(epoch),\r\n    startAt: numberOrNull(startAt),\r\n    startBlock: numberOrNull(startBlock),\r\n    lockAt: numberOrNull(lockAt),\r\n    lockBlock: numberOrNull(lockBlock),\r\n    lockPrice: lockPrice ? parseFloat(lockPrice) : 0,\r\n    closeAt: numberOrNull(closeAt),\r\n    closeBlock: numberOrNull(closeBlock),\r\n    closePrice: closePrice ? parseFloat(closePrice) : 0,\r\n    totalBets: numberOrNull(totalBets),\r\n    totalAmount: totalAmount ? parseFloat(totalAmount) : 0,\r\n    bullBets: numberOrNull(bullBets),\r\n    bullAmount: bullAmount ? parseFloat(bullAmount) : 0,\r\n    bearBets: numberOrNull(bearBets),\r\n    bearAmount: bearAmount ? parseFloat(bearAmount) : 0,\r\n    bets: bets.map(transformBetResponse),\r\n  }\r\n}\r\n\r\nexport const getRoundResult = (bet: Bet, currentEpoch: number): Result => {\r\n  const { round } = bet\r\n  if (round.failed) {\r\n    return Result.CANCELED\r\n  }\r\n\r\n  if (round.epoch >= currentEpoch - 1) {\r\n    return Result.LIVE\r\n  }\r\n\r\n  if (bet.round.position === BetPosition.HOUSE) {\r\n    return Result.HOUSE\r\n  }\r\n\r\n  const roundResultPosition = round.closePrice > round.lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n\r\n  return bet.position === roundResultPosition ? Result.WIN : Result.LOSE\r\n}\r\n\r\nexport const getFilteredBets = (bets: Bet[], filter: HistoryFilter) => {\r\n  switch (filter) {\r\n    case HistoryFilter.COLLECTED:\r\n      return bets.filter((bet) => bet.claimed === true)\r\n    case HistoryFilter.UNCOLLECTED:\r\n      return bets.filter((bet) => {\r\n        return !bet.claimed && (bet.position === bet.round.position || bet.round.failed === true)\r\n      })\r\n    case HistoryFilter.ALL:\r\n    default:\r\n      return bets\r\n  }\r\n}\r\n\r\nexport const getTotalWon = async (): Promise<number> => {\r\n  const { market } = (await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getTotalWonData {\r\n        market(id: 1) {\r\n          totalBNB\r\n          totalBNBTreasury\r\n        }\r\n      }\r\n    `,\r\n  )) as { market: TotalWonMarketResponse }\r\n\r\n  const totalBNB = market.totalBNB ? parseFloat(market.totalBNB) : 0\r\n  const totalBNBTreasury = market.totalBNBTreasury ? parseFloat(market.totalBNBTreasury) : 0\r\n\r\n  return Math.max(totalBNB - totalBNBTreasury, 0)\r\n}\r\n\r\ntype WhereClause = Record<string, string | number | boolean | string[]>\r\n\r\nexport const getBetHistory = async (where: WhereClause = {}, first = 1000, skip = 0): Promise<BetResponse[]> => {\r\n  const response = await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getBetHistory($first: Int!, $skip: Int!, $where: Bet_filter) {\r\n        bets(first: $first, skip: $skip, where: $where, order: createdAt, orderDirection: desc) {\r\n          ${getBetBaseFields()}\r\n          round {\r\n            ${getRoundBaseFields()}\r\n          }\r\n          user {\r\n            ${getUserBaseFields()}\r\n          } \r\n        }\r\n      }\r\n    `,\r\n    { first, skip, where },\r\n  )\r\n  return response.bets\r\n}\r\n\r\nexport const getBet = async (betId: string): Promise<BetResponse> => {\r\n  const response = await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getBet($id: ID!) {\r\n        bet(id: $id) {\r\n          ${getBetBaseFields()}\r\n          round {\r\n            ${getRoundBaseFields()}\r\n          }\r\n          user {\r\n            ${getUserBaseFields()}\r\n          } \r\n        }\r\n      }\r\n  `,\r\n    {\r\n      id: betId.toLowerCase(),\r\n    },\r\n  )\r\n  return response.bet\r\n}\r\n\r\nexport const getLedgerData = async (account: string, epochs: number[]) => {\r\n  const address = getPredictionsAddress()\r\n  const ledgerCalls = epochs.map((epoch) => ({\r\n    address,\r\n    name: 'ledger',\r\n    params: [epoch, account],\r\n  }))\r\n  const response = await multicallv2<PredictionsLedgerResponse[]>(predictionsAbi, ledgerCalls)\r\n  return response\r\n}\r\n\r\nexport const LEADERBOARD_RESULTS_PER_PAGE = 20\r\n\r\ninterface GetPredictionUsersOptions {\r\n  skip?: number\r\n  first?: number\r\n  orderBy?: string\r\n  orderDir?: string\r\n  where?: WhereClause\r\n}\r\n\r\nconst defaultPredictionUserOptions = {\r\n  skip: 0,\r\n  first: LEADERBOARD_RESULTS_PER_PAGE,\r\n  orderBy: 'createdAt',\r\n  orderDir: 'desc',\r\n}\r\n\r\nexport const getPredictionUsers = async (options: GetPredictionUsersOptions = {}): Promise<UserResponse[]> => {\r\n  const { first, skip, where, orderBy, orderDir } = { ...defaultPredictionUserOptions, ...options }\r\n  const response = await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getUsers($first: Int!, $skip: Int!, $where: User_filter, $orderBy: User_orderBy, $orderDir: OrderDirection) {\r\n        users(first: $first, skip: $skip, where: $where, orderBy: $orderBy, orderDirection: $orderDir) {\r\n          ${getUserBaseFields()} \r\n        }\r\n      }\r\n    `,\r\n    { first, skip, where, orderBy, orderDir },\r\n  )\r\n  return response.users\r\n}\r\n\r\nexport const getPredictionUser = async (account: string): Promise<UserResponse> => {\r\n  const response = await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getUser($id: ID!) {\r\n        user(id: $id) {\r\n          ${getUserBaseFields()}\r\n        }\r\n      }\r\n  `,\r\n    {\r\n      id: account.toLowerCase(),\r\n    },\r\n  )\r\n  return response.user\r\n}\r\n\r\nexport const getClaimStatuses = async (\r\n  account: string,\r\n  epochs: number[],\r\n): Promise<PredictionsState['claimableStatuses']> => {\r\n  const address = getPredictionsAddress()\r\n  const claimableCalls = epochs.map((epoch) => ({\r\n    address,\r\n    name: 'claimable',\r\n    params: [epoch, account],\r\n  }))\r\n  const claimableResponses = await multicallv2<[PredictionsClaimableResponse][]>(predictionsAbi, claimableCalls)\r\n\r\n  return claimableResponses.reduce((accum, claimableResponse, index) => {\r\n    const epoch = epochs[index]\r\n    const [claimable] = claimableResponse\r\n\r\n    return {\r\n      ...accum,\r\n      [epoch]: claimable,\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport type MarketData = Pick<\r\n  PredictionsState,\r\n  'status' | 'currentEpoch' | 'intervalSeconds' | 'minBetAmount' | 'bufferSeconds'\r\n>\r\nexport const getPredictionData = async (): Promise<MarketData> => {\r\n  const address = getPredictionsAddress()\r\n  const staticCalls = ['currentEpoch', 'intervalSeconds', 'minBetAmount', 'paused', 'bufferSeconds'].map((method) => ({\r\n    address,\r\n    name: method,\r\n  }))\r\n  const [[currentEpoch], [intervalSeconds], [minBetAmount], [paused], [bufferSeconds]] = await multicallv2(\r\n    predictionsAbi,\r\n    staticCalls,\r\n  )\r\n\r\n  return {\r\n    status: paused ? PredictionStatus.PAUSED : PredictionStatus.LIVE,\r\n    currentEpoch: currentEpoch.toNumber(),\r\n    intervalSeconds: intervalSeconds.toNumber(),\r\n    minBetAmount: minBetAmount.toString(),\r\n    bufferSeconds: bufferSeconds.toNumber(),\r\n  }\r\n}\r\n\r\nexport const getRoundsData = async (epochs: number[]): Promise<PredictionsRoundsResponse[]> => {\r\n  const address = getPredictionsAddress()\r\n  const calls = epochs.map((epoch) => ({\r\n    address,\r\n    name: 'rounds',\r\n    params: [epoch],\r\n  }))\r\n  const response = await multicallv2<PredictionsRoundsResponse[]>(predictionsAbi, calls)\r\n  return response\r\n}\r\n\r\nexport const makeFutureRoundResponse = (epoch: number, startTimestamp: number): ReduxNodeRound => {\r\n  return {\r\n    epoch,\r\n    startTimestamp,\r\n    lockTimestamp: null,\r\n    closeTimestamp: null,\r\n    lockPrice: null,\r\n    closePrice: null,\r\n    totalAmount: ethers.BigNumber.from(0).toJSON(),\r\n    bullAmount: ethers.BigNumber.from(0).toJSON(),\r\n    bearAmount: ethers.BigNumber.from(0).toJSON(),\r\n    rewardBaseCalAmount: ethers.BigNumber.from(0).toJSON(),\r\n    rewardAmount: ethers.BigNumber.from(0).toJSON(),\r\n    oracleCalled: false,\r\n    lockOracleId: null,\r\n    closeOracleId: null,\r\n  }\r\n}\r\n\r\nexport const makeRoundData = (rounds: ReduxNodeRound[]): RoundData => {\r\n  return rounds.reduce((accum, round) => {\r\n    return {\r\n      ...accum,\r\n      [round.epoch.toString()]: round,\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport const serializePredictionsLedgerResponse = (ledgerResponse: PredictionsLedgerResponse): ReduxNodeLedger => ({\r\n  position: ledgerResponse.position === 0 ? BetPosition.BULL : BetPosition.BEAR,\r\n  amount: ledgerResponse.amount.toJSON(),\r\n  claimed: ledgerResponse.claimed,\r\n})\r\n\r\nexport const makeLedgerData = (account: string, ledgers: PredictionsLedgerResponse[], epochs: number[]): LedgerData => {\r\n  return ledgers.reduce((accum, ledgerResponse, index) => {\r\n    if (!ledgerResponse) {\r\n      return accum\r\n    }\r\n\r\n    // If the amount is zero that means the user did not bet\r\n    if (ledgerResponse.amount.eq(0)) {\r\n      return accum\r\n    }\r\n\r\n    const epoch = epochs[index].toString()\r\n\r\n    return {\r\n      ...accum,\r\n      [account]: {\r\n        ...accum[account],\r\n        [epoch]: serializePredictionsLedgerResponse(ledgerResponse),\r\n      },\r\n    }\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Serializes the return from the \"rounds\" call for redux\r\n */\r\nexport const serializePredictionsRoundsResponse = (response: PredictionsRoundsResponse): ReduxNodeRound => {\r\n  const {\r\n    epoch,\r\n    startTimestamp,\r\n    lockTimestamp,\r\n    closeTimestamp,\r\n    lockPrice,\r\n    closePrice,\r\n    totalAmount,\r\n    bullAmount,\r\n    bearAmount,\r\n    rewardBaseCalAmount,\r\n    rewardAmount,\r\n    oracleCalled,\r\n    lockOracleId,\r\n    closeOracleId,\r\n  } = response\r\n\r\n  return {\r\n    oracleCalled,\r\n    epoch: epoch.toNumber(),\r\n    startTimestamp: startTimestamp.eq(0) ? null : startTimestamp.toNumber(),\r\n    lockTimestamp: lockTimestamp.eq(0) ? null : lockTimestamp.toNumber(),\r\n    closeTimestamp: closeTimestamp.eq(0) ? null : closeTimestamp.toNumber(),\r\n    lockPrice: lockPrice.eq(0) ? null : lockPrice.toJSON(),\r\n    closePrice: closePrice.eq(0) ? null : closePrice.toJSON(),\r\n    totalAmount: totalAmount.toJSON(),\r\n    bullAmount: bullAmount.toJSON(),\r\n    bearAmount: bearAmount.toJSON(),\r\n    rewardBaseCalAmount: rewardBaseCalAmount.toJSON(),\r\n    rewardAmount: rewardAmount.toJSON(),\r\n    lockOracleId: lockOracleId.toString(),\r\n    closeOracleId: closeOracleId.toString(),\r\n  }\r\n}\r\n\r\n/**\r\n * Parse serialized values back into ethers.BigNumber\r\n * ethers.BigNumber values are stored with the \"toJSON()\" method, e.g  { type: \"BigNumber\", hex: string }\r\n */\r\nexport const parseBigNumberObj = <T = Record<string, any>, K = Record<string, any>>(data: T): K => {\r\n  return Object.keys(data).reduce((accum, key) => {\r\n    const value = data[key]\r\n\r\n    if (value && value?.type === 'BigNumber') {\r\n      return {\r\n        ...accum,\r\n        [key]: ethers.BigNumber.from(value),\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...accum,\r\n      [key]: value,\r\n    }\r\n  }, {}) as K\r\n}\r\n\r\nexport const fetchUsersRoundsLength = async (account: string) => {\r\n  try {\r\n    const contract = getPredictionsContract()\r\n    const length = await contract.getUserRoundsLength(account)\r\n    return length\r\n  } catch {\r\n    return ethers.BigNumber.from(0)\r\n  }\r\n}\r\n\r\n/**\r\n * Fetches rounds a user has participated in\r\n */\r\nexport const fetchUserRounds = async (\r\n  account: string,\r\n  cursor = 0,\r\n  size = ROUNDS_PER_PAGE,\r\n): Promise<{ [key: string]: ReduxNodeLedger }> => {\r\n  const contract = getPredictionsContract()\r\n\r\n  try {\r\n    const [rounds, ledgers] = await contract.getUserRounds(account, cursor, size)\r\n\r\n    return rounds.reduce((accum, round, index) => {\r\n      return {\r\n        ...accum,\r\n        [round.toString()]: serializePredictionsLedgerResponse(ledgers[index]),\r\n      }\r\n    }, {})\r\n  } catch {\r\n    // When the results run out the contract throws an error.\r\n    return null\r\n  }\r\n}\r\n","const ARCHIVED_FARMS_START_PID = 139\r\nconst ARCHIVED_FARMS_END_PID = 250\r\n\r\nconst isArchivedPid = (pid: number) => pid >= ARCHIVED_FARMS_START_PID && pid <= ARCHIVED_FARMS_END_PID\r\n\r\nexport default isArchivedPid\r\n","import tokens from './tokens'\r\nimport { SerializedFarmConfig } from './types'\r\n\r\nconst priceHelperLps: SerializedFarmConfig[] = [\r\n  /**\r\n   * These LPs are just used to help with price calculation for MasterChef LPs (farms.ts).\r\n   * This list is added to the MasterChefLps and passed to fetchFarm. The calls to get contract information about the token/quoteToken in the LP are still made.\r\n   * The absence of a PID means the masterchef contract calls are skipped for this farm.\r\n   * Prices are then fetched for all farms (masterchef + priceHelperLps).\r\n   * Before storing to redux, farms without a PID are filtered out.\r\n   */\r\n  {\r\n    pid: null,\r\n    lpSymbol: 'QSD-BNB LP',\r\n    lpAddresses: {\r\n      4002: '',\r\n      250: '0x7b3ae32eE8C532016f3E31C8941D937c59e055B9',\r\n    },\r\n    token: tokens.qsd,\r\n    quoteToken: tokens.wbnb,\r\n  },\r\n]\r\n\r\nexport default priceHelperLps\r\n","import BigNumber from 'bignumber.js'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { BIG_TEN, BIG_ZERO } from 'utils/bigNumber'\r\nimport multicall from 'utils/multicall'\r\nimport { SerializedFarm, SerializedBigNumber } from '../types'\r\n\r\ntype PublicFarmData = {\r\n  tokenAmountTotal: SerializedBigNumber\r\n  lpTotalInQuoteToken: SerializedBigNumber\r\n  lpTotalSupply: SerializedBigNumber\r\n  tokenPriceVsQuote: SerializedBigNumber\r\n  poolWeight: SerializedBigNumber\r\n  multiplier: string\r\n}\r\n\r\nconst fetchFarm = async (farm: SerializedFarm): Promise<PublicFarmData> => {\r\n  const { pid, lpAddresses, token, quoteToken } = farm\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const calls = [\r\n    // Balance of token in the LP contract\r\n    {\r\n      address: token.address,\r\n      name: 'balanceOf',\r\n      params: [lpAddress],\r\n    },\r\n    // Balance of quote token on LP contract\r\n    {\r\n      address: quoteToken.address,\r\n      name: 'balanceOf',\r\n      params: [lpAddress],\r\n    },\r\n    // Balance of LP tokens in the master chef contract\r\n    {\r\n      address: lpAddress,\r\n      name: 'balanceOf',\r\n      params: [getMasterChefAddress()],\r\n    },\r\n    // Total supply of LP tokens\r\n    {\r\n      address: lpAddress,\r\n      name: 'totalSupply',\r\n    },\r\n    // Token decimals\r\n    {\r\n      address: token.address,\r\n      name: 'decimals',\r\n    },\r\n    // Quote token decimals\r\n    {\r\n      address: quoteToken.address,\r\n      name: 'decimals',\r\n    },\r\n  ]\r\n\r\n  const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] =\r\n    await multicall(erc20, calls)\r\n\r\n  // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\r\n  const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n  // Raw amount of token in the LP, including those not staked\r\n  const tokenAmountTotal = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals))\r\n  const quoteTokenAmountTotal = new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals))\r\n\r\n  // Amount of quoteToken in the LP that are staked in the MC\r\n  const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio)\r\n\r\n  // Total staked in LP, in quote token value\r\n  const lpTotalInQuoteToken = quoteTokenAmountMc.times(new BigNumber(2))\r\n\r\n  // Only make masterchef calls if farm has pid\r\n  const [info, totalAllocPoint] =\r\n    pid || pid === 0\r\n      ? await multicall(masterchefABI, [\r\n          {\r\n            address: getMasterChefAddress(),\r\n            name: 'poolInfo',\r\n            params: [pid],\r\n          },\r\n          {\r\n            address: getMasterChefAddress(),\r\n            name: 'totalAllocPoint',\r\n          },\r\n        ])\r\n      : [null, null]\r\n\r\n  const allocPoint = info ? new BigNumber(info.allocPoint?._hex) : BIG_ZERO\r\n  const poolWeight = totalAllocPoint ? allocPoint.div(new BigNumber(totalAllocPoint)) : BIG_ZERO\r\n\r\n  return {\r\n    tokenAmountTotal: tokenAmountTotal.toJSON(),\r\n    lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\r\n    lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n    tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),\r\n    poolWeight: poolWeight.toJSON(),\r\n    multiplier: `${allocPoint.div(100).toString()}X`,\r\n  }\r\n}\r\n\r\nexport default fetchFarm\r\n","import { SerializedFarm } from 'state/types'\r\nimport fetchPublicFarmData from './fetchPublicFarmData'\r\n\r\nconst fetchFarm = async (farm: SerializedFarm): Promise<SerializedFarm> => {\r\n  const farmPublicData = await fetchPublicFarmData(farm)\r\n\r\n  return { ...farm, ...farmPublicData }\r\n}\r\n\r\nexport default fetchFarm\r\n","import { SerializedFarmConfig } from 'config/constants/types'\r\nimport fetchFarm from './fetchFarm'\r\n\r\nconst fetchFarms = async (farmsToFetch: SerializedFarmConfig[]) => {\r\n  const data = await Promise.all(\r\n    farmsToFetch.map(async (farmConfig) => {\r\n      const farm = await fetchFarm(farmConfig)\r\n      const serializedFarm = { ...farm, token: farm.token, quoteToken: farm.quoteToken }\r\n      return serializedFarm\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","import { SerializedFarm } from 'state/types'\r\n\r\n/**\r\n * Returns the first farm with a quote token that matches from an array of preferred quote tokens\r\n * @param farms Array of farms\r\n * @param preferredQuoteTokens Array of preferred quote tokens\r\n * @returns A preferred farm, if found - or the first element of the farms array\r\n */\r\nexport const filterFarmsByQuoteToken = (\r\n  farms: SerializedFarm[],\r\n  preferredQuoteTokens: string[] = ['BUSD', 'WBNB'],\r\n): SerializedFarm => {\r\n  const preferredFarm = farms.find((farm) => {\r\n    return preferredQuoteTokens.some((quoteToken) => {\r\n      return farm.quoteToken.symbol === quoteToken\r\n    })\r\n  })\r\n  return preferredFarm || farms[0]\r\n}\r\n\r\nexport default filterFarmsByQuoteToken\r\n","import BigNumber from 'bignumber.js'\r\nimport { BIG_ONE, BIG_ZERO } from 'utils/bigNumber'\r\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers'\r\nimport { SerializedFarm } from 'state/types'\r\nimport tokens from 'config/constants/tokens'\r\n\r\nconst getFarmFromTokenSymbol = (\r\n  farms: SerializedFarm[],\r\n  tokenSymbol: string,\r\n  preferredQuoteTokens?: string[],\r\n): SerializedFarm => {\r\n  const farmsWithTokenSymbol = farms.filter((farm) => farm.token.symbol === tokenSymbol)\r\n  const filteredFarm = filterFarmsByQuoteToken(farmsWithTokenSymbol, preferredQuoteTokens)\r\n  return filteredFarm\r\n}\r\n\r\nconst getFarmBaseTokenPrice = (\r\n  farm: SerializedFarm,\r\n  quoteTokenFarm: SerializedFarm,\r\n  bnbPriceBusd: BigNumber,\r\n): BigNumber => {\r\n  const hasTokenPriceVsQuote = Boolean(farm.tokenPriceVsQuote)\r\n\r\n  if (farm.quoteToken.symbol === tokens.busd.symbol) {\r\n    return hasTokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  if (farm.quoteToken.symbol === tokens.wbnb.symbol) {\r\n    return hasTokenPriceVsQuote ? bnbPriceBusd.times(farm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  // We can only calculate profits without a quoteTokenFarm for BUSD/BNB farms\r\n  if (!quoteTokenFarm) {\r\n    return BIG_ZERO\r\n  }\r\n\r\n  // Possible alternative farm quoteTokens:\r\n  // UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)\r\n  // If the farm's quote token isn't BUSD or WBNB, we then use the quote token, of the original farm's quote token\r\n  // i.e. for farm PNT - pBTC we use the pBTC farm's quote token - BNB, (pBTC - BNB)\r\n  // from the BNB - pBTC price, we can calculate the PNT - BUSD price\r\n  if (quoteTokenFarm.quoteToken.symbol === tokens.wbnb.symbol) {\r\n    const quoteTokenInBusd = bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote)\r\n    return hasTokenPriceVsQuote && quoteTokenInBusd\r\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\r\n      : BIG_ZERO\r\n  }\r\n\r\n  if (quoteTokenFarm.quoteToken.symbol === tokens.busd.symbol) {\r\n    const quoteTokenInBusd = quoteTokenFarm.tokenPriceVsQuote\r\n    return hasTokenPriceVsQuote && quoteTokenInBusd\r\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\r\n      : BIG_ZERO\r\n  }\r\n\r\n  // Catch in case token does not have immediate or once-removed BUSD/WBNB quoteToken\r\n  return BIG_ZERO\r\n}\r\n\r\nconst getFarmQuoteTokenPrice = (\r\n  farm: SerializedFarm,\r\n  quoteTokenFarm: SerializedFarm,\r\n  bnbPriceBusd: BigNumber,\r\n): BigNumber => {\r\n  if (farm.quoteToken.symbol === 'BUSD') {\r\n    return BIG_ONE\r\n  }\r\n\r\n  if (farm.quoteToken.symbol === 'WBNB') {\r\n    return bnbPriceBusd\r\n  }\r\n\r\n  if (!quoteTokenFarm) {\r\n    return BIG_ZERO\r\n  }\r\n\r\n  if (quoteTokenFarm.quoteToken.symbol === 'WBNB') {\r\n    return quoteTokenFarm.tokenPriceVsQuote ? bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\r\n    return quoteTokenFarm.tokenPriceVsQuote ? new BigNumber(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  return BIG_ZERO\r\n}\r\n\r\nconst fetchFarmsPrices = async (farms: SerializedFarm[]) => {\r\n  const bnbBusdFarm = farms.find((farm) => farm.pid === 252)\r\n  const bnbPriceBusd = bnbBusdFarm.tokenPriceVsQuote ? BIG_ONE.div(bnbBusdFarm.tokenPriceVsQuote) : BIG_ZERO\r\n\r\n  const farmsWithPrices = farms.map((farm) => {\r\n    const quoteTokenFarm = getFarmFromTokenSymbol(farms, farm.quoteToken.symbol)\r\n    const tokenPriceBusd = getFarmBaseTokenPrice(farm, quoteTokenFarm, bnbPriceBusd)\r\n    const quoteTokenPriceBusd = getFarmQuoteTokenPrice(farm, quoteTokenFarm, bnbPriceBusd)\r\n\r\n    return {\r\n      ...farm,\r\n      tokenPriceBusd: tokenPriceBusd.toJSON(),\r\n      quoteTokenPriceBusd: quoteTokenPriceBusd.toJSON(),\r\n    }\r\n  })\r\n\r\n  return farmsWithPrices\r\n}\r\n\r\nexport default fetchFarmsPrices\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { SerializedFarmConfig } from 'config/constants/types'\r\n\r\nexport const fetchFarmUserAllowances = async (account: string, farmsToFetch: SerializedFarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n\r\n  const calls = farmsToFetch.map((farm) => {\r\n    const lpContractAddress = getAddress(farm.lpAddresses)\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAddress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string, farmsToFetch: SerializedFarmConfig[]) => {\r\n  const calls = farmsToFetch.map((farm) => {\r\n    const lpContractAddress = getAddress(farm.lpAddresses)\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string, farmsToFetch: SerializedFarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n\r\n  const calls = farmsToFetch.map((farm) => {\r\n    return {\r\n      address: masterChefAddress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string, farmsToFetch: SerializedFarmConfig[]) => {\r\n  const masterChefAddress = getMasterChefAddress()\r\n\r\n  const calls = farmsToFetch.map((farm) => {\r\n    return {\r\n      address: masterChefAddress,\r\n      name: 'pendingCake',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n","import type {\r\n  UnknownAsyncThunkFulfilledAction,\r\n  UnknownAsyncThunkPendingAction,\r\n  UnknownAsyncThunkRejectedAction,\r\n  // eslint-disable-next-line import/no-unresolved\r\n} from '@reduxjs/toolkit/dist/matchers'\r\nimport { createAsyncThunk, createSlice, isPending, isFulfilled, isRejected } from '@reduxjs/toolkit'\r\nimport stringify from 'fast-json-stable-stringify'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport type { AppState } from 'state'\r\nimport priceHelperLpsConfig from 'config/constants/priceHelperLps'\r\nimport fetchFarms from './fetchFarms'\r\nimport fetchFarmsPrices from './fetchFarmsPrices'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { SerializedFarmsState, SerializedFarm } from '../types'\r\n\r\nconst noAccountFarmConfig = farmsConfig.map((farm) => ({\r\n  ...farm,\r\n  userData: {\r\n    allowance: '0',\r\n    tokenBalance: '0',\r\n    stakedBalance: '0',\r\n    earnings: '0',\r\n  },\r\n}))\r\n\r\nconst initialState: SerializedFarmsState = {\r\n  data: noAccountFarmConfig,\r\n  loadArchivedFarmsData: false,\r\n  userDataLoaded: false,\r\n  loadingKeys: {},\r\n}\r\n\r\nexport const nonArchivedFarms = farmsConfig.filter(({ pid }) => !isArchivedPid(pid))\r\n\r\n// Async thunks\r\nexport const fetchFarmsPublicDataAsync = createAsyncThunk<\r\n  SerializedFarm[],\r\n  number[],\r\n  {\r\n    state: AppState\r\n  }\r\n>(\r\n  'farms/fetchFarmsPublicDataAsync',\r\n  async (pids) => {\r\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\r\n\r\n    // Add price helper farms\r\n    const farmsWithPriceHelpers = farmsToFetch.concat(priceHelperLpsConfig)\r\n\r\n    const farms = await fetchFarms(farmsWithPriceHelpers)\r\n    const farmsWithPrices = await fetchFarmsPrices(farms)\r\n\r\n    // Filter out price helper LP config farms\r\n    const farmsWithoutHelperLps = farmsWithPrices.filter((farm: SerializedFarm) => {\r\n      return farm.pid || farm.pid === 0\r\n    })\r\n\r\n    return farmsWithoutHelperLps\r\n  },\r\n  {\r\n    condition: (arg, { getState }) => {\r\n      const { farms } = getState()\r\n      if (farms.loadingKeys[stringify({ type: fetchFarmsPublicDataAsync.typePrefix, arg })]) {\r\n        console.debug('farms action is fetching, skipping here')\r\n        return false\r\n      }\r\n      return true\r\n    },\r\n  },\r\n)\r\n\r\ninterface FarmUserDataResponse {\r\n  pid: number\r\n  allowance: string\r\n  tokenBalance: string\r\n  stakedBalance: string\r\n  earnings: string\r\n}\r\n\r\nexport const fetchFarmUserDataAsync = createAsyncThunk<\r\n  FarmUserDataResponse[],\r\n  { account: string; pids: number[] },\r\n  {\r\n    state: AppState\r\n  }\r\n>(\r\n  'farms/fetchFarmUserDataAsync',\r\n  async ({ account, pids }) => {\r\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\r\n    const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch)\r\n    const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch)\r\n    const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch)\r\n    const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch)\r\n\r\n    return userFarmAllowances.map((farmAllowance, index) => {\r\n      return {\r\n        pid: farmsToFetch[index].pid,\r\n        allowance: userFarmAllowances[index],\r\n        tokenBalance: userFarmTokenBalances[index],\r\n        stakedBalance: userStakedBalances[index],\r\n        earnings: userFarmEarnings[index],\r\n      }\r\n    })\r\n  },\r\n  {\r\n    condition: (arg, { getState }) => {\r\n      const { farms } = getState()\r\n      if (farms.loadingKeys[stringify({ type: fetchFarmUserDataAsync.typePrefix, arg })]) {\r\n        console.debug('farms user action is fetching, skipping here')\r\n        return false\r\n      }\r\n      return true\r\n    },\r\n  },\r\n)\r\n\r\ntype UnknownAsyncThunkFulfilledOrPendingAction =\r\n  | UnknownAsyncThunkFulfilledAction\r\n  | UnknownAsyncThunkPendingAction\r\n  | UnknownAsyncThunkRejectedAction\r\n\r\nconst serializeLoadingKey = (\r\n  action: UnknownAsyncThunkFulfilledOrPendingAction,\r\n  suffix: UnknownAsyncThunkFulfilledOrPendingAction['meta']['requestStatus'],\r\n) => {\r\n  const type = action.type.split(`/${suffix}`)[0]\r\n  return stringify({\r\n    arg: action.meta.arg,\r\n    type,\r\n  })\r\n}\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    // Update farms with live data\r\n    builder.addCase(fetchFarmsPublicDataAsync.fulfilled, (state, action) => {\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = action.payload.find((farmData) => farmData.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    })\r\n\r\n    // Update farms with user data\r\n    builder.addCase(fetchFarmUserDataAsync.fulfilled, (state, action) => {\r\n      action.payload.forEach((userDataEl) => {\r\n        const { pid } = userDataEl\r\n        const index = state.data.findIndex((farm) => farm.pid === pid)\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n      state.userDataLoaded = true\r\n    })\r\n\r\n    builder.addMatcher(isPending, (state, action) => {\r\n      state.loadingKeys[serializeLoadingKey(action, 'pending')] = true\r\n    })\r\n    builder.addMatcher(isFulfilled, (state, action) => {\r\n      state.loadingKeys[serializeLoadingKey(action, 'fulfilled')] = false\r\n    })\r\n    builder.addMatcher(isRejected, (state, action) => {\r\n      state.loadingKeys[serializeLoadingKey(action, 'rejected')] = false\r\n    })\r\n  },\r\n})\r\n\r\nexport default farmsSlice.reducer\r\n","import BigNumber from 'bignumber.js'\r\nimport { vaultPoolConfig } from 'config/constants/pools'\r\nimport { DeserializedPool } from 'state/types'\r\nimport { getApy } from 'utils/compoundApyHelpers'\r\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance'\r\n\r\nexport const convertSharesToCake = (\r\n  shares: BigNumber,\r\n  cakePerFullShare: BigNumber,\r\n  decimals = 18,\r\n  decimalsToRound = 3,\r\n) => {\r\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\r\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\r\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\r\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\r\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\r\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\r\n}\r\n\r\nexport const convertCakeToShares = (\r\n  cake: BigNumber,\r\n  cakePerFullShare: BigNumber,\r\n  decimals = 18,\r\n  decimalsToRound = 3,\r\n) => {\r\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\r\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\r\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\r\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\r\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound)\r\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\r\n}\r\n\r\nconst MANUAL_POOL_AUTO_COMPOUND_FREQUENCY = 0\r\n\r\nexport const getAprData = (pool: DeserializedPool, performanceFee: number) => {\r\n  const { vaultKey, apr } = pool\r\n\r\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\r\n  const autoCompoundFrequency = vaultKey\r\n    ? vaultPoolConfig[vaultKey].autoCompoundFrequency\r\n    : MANUAL_POOL_AUTO_COMPOUND_FREQUENCY\r\n\r\n  if (vaultKey) {\r\n    const autoApr = getApy(apr, autoCompoundFrequency, 365, performanceFee) * 100\r\n    return { apr: autoApr, autoCompoundFrequency }\r\n  }\r\n  return { apr, autoCompoundFrequency }\r\n}\r\n\r\nexport const getCakeVaultEarnings = (\r\n  account: string,\r\n  cakeAtLastUserAction: BigNumber,\r\n  userShares: BigNumber,\r\n  pricePerFullShare: BigNumber,\r\n  earningTokenPrice: number,\r\n) => {\r\n  const hasAutoEarnings =\r\n    account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0)\r\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\r\n  const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction)\r\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0\r\n\r\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice)\r\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0\r\n  return { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay }\r\n}\r\n\r\nexport const getPoolBlockInfo = (pool: DeserializedPool, currentBlock: number) => {\r\n  const { startBlock, endBlock, isFinished } = pool\r\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\r\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\r\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\r\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\r\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart\r\n  return { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay }\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport { convertSharesToCake } from 'views/Pools/helpers'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport ifoPoolAbi from 'config/abi/ifoPool.json'\r\nimport { getIfoPoolAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\n\r\nexport const fetchPublicIfoPoolData = async () => {\r\n  try {\r\n    const calls = [\r\n      'getPricePerFullShare',\r\n      'totalShares',\r\n      'calculateHarvestCakeRewards',\r\n      'calculateTotalPendingCakeRewards',\r\n      'startBlock',\r\n      'endBlock',\r\n    ].map((method) => ({\r\n      address: getIfoPoolAddress(),\r\n      name: method,\r\n    }))\r\n\r\n    const [[sharePrice], [shares], [estimatedCakeBountyReward], [totalPendingCakeHarvest], [startBlock], [endBlock]] =\r\n      await multicallv2(ifoPoolAbi, calls)\r\n\r\n    const totalSharesAsBigNumber = shares ? new BigNumber(shares.toString()) : BIG_ZERO\r\n    const sharePriceAsBigNumber = sharePrice ? new BigNumber(sharePrice.toString()) : BIG_ZERO\r\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\r\n    return {\r\n      totalShares: totalSharesAsBigNumber.toJSON(),\r\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\r\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\r\n      estimatedCakeBountyReward: new BigNumber(estimatedCakeBountyReward.toString()).toJSON(),\r\n      totalPendingCakeHarvest: new BigNumber(totalPendingCakeHarvest.toString()).toJSON(),\r\n      creditStartBlock: startBlock.toNumber(),\r\n      creditEndBlock: endBlock.toNumber(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      totalShares: null,\r\n      pricePerFullShare: null,\r\n      totalCakeInVault: null,\r\n      estimatedCakeBountyReward: null,\r\n      totalPendingCakeHarvest: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport const fetchIfoPoolFeesData = async () => {\r\n  try {\r\n    const calls = ['performanceFee', 'callFee', 'withdrawFee', 'withdrawFeePeriod'].map((method) => ({\r\n      address: getIfoPoolAddress(),\r\n      name: method,\r\n    }))\r\n\r\n    const [[performanceFee], [callFee], [withdrawalFee], [withdrawalFeePeriod]] = await multicallv2(ifoPoolAbi, calls)\r\n\r\n    return {\r\n      performanceFee: performanceFee.toNumber(),\r\n      callFee: callFee.toNumber(),\r\n      withdrawalFee: withdrawalFee.toNumber(),\r\n      withdrawalFeePeriod: withdrawalFeePeriod.toNumber(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      performanceFee: null,\r\n      callFee: null,\r\n      withdrawalFee: null,\r\n      withdrawalFeePeriod: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchPublicIfoPoolData\r\n","import BigNumber from 'bignumber.js'\r\nimport ifoPoolAbi from 'config/abi/ifoPool.json'\r\nimport { getIfoPoolAddress } from 'utils/addressHelpers'\r\nimport { multicallv2 } from 'utils/multicall'\r\n\r\nconst fetchIfoPoolUser = async (account: string) => {\r\n  try {\r\n    const calls = ['userInfo', 'getUserCredit'].map((method) => ({\r\n      address: getIfoPoolAddress(),\r\n      name: method,\r\n      params: [account],\r\n    }))\r\n    const [userContractResponse, creditResponse] = await multicallv2(ifoPoolAbi, calls)\r\n\r\n    return {\r\n      isLoading: false,\r\n      userShares: new BigNumber(userContractResponse.shares.toString()).toJSON(),\r\n      lastDepositedTime: userContractResponse.lastDepositedTime.toString(),\r\n      lastUserActionTime: userContractResponse.lastUserActionTime.toString(),\r\n      cakeAtLastUserAction: new BigNumber(userContractResponse.cakeAtLastUserAction.toString()).toJSON(),\r\n      credit: new BigNumber(creditResponse.avgBalance.toString()).toJSON(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      isLoading: true,\r\n      userShares: null,\r\n      lastDepositedTime: null,\r\n      lastUserActionTime: null,\r\n      cakeAtLastUserAction: null,\r\n      credit: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchIfoPoolUser\r\n","import poolsConfig from 'config/constants/pools'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterchefContract } from 'utils/contractHelpers'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport BigNumber from 'bignumber.js'\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((pool) => pool.stakingToken.symbol !== 'BNB')\r\nconst bnbPools = poolsConfig.filter((pool) => pool.stakingToken.symbol === 'BNB')\r\nconst nonMasterPools = poolsConfig.filter((pool) => pool.sousId !== 0)\r\nconst masterChefContract = getMasterchefContract()\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((pool) => ({\r\n    address: pool.stakingToken.address,\r\n    name: 'allowance',\r\n    params: [account, getAddress(pool.contractAddress)],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((pool) => ({\r\n    address: pool.stakingToken.address,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await simpleRpcProvider.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance.toString()).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.userInfo('0', account)\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount.toString()).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: getAddress(p.contractAddress),\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.pendingCake('0', account)\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward.toString()).toJSON() }\r\n}\r\n","import BigNumber from 'bignumber.js'\r\nimport { convertSharesToCake } from 'views/Pools/helpers'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport cakeVaultAbi from 'config/abi/cakeVault.json'\r\nimport { getCakeVaultAddress } from 'utils/addressHelpers'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\n\r\nexport const fetchPublicVaultData = async () => {\r\n  try {\r\n    const calls = [\r\n      'getPricePerFullShare',\r\n      'totalShares',\r\n      'calculateHarvestCakeRewards',\r\n      'calculateTotalPendingCakeRewards',\r\n    ].map((method) => ({\r\n      address: getCakeVaultAddress(),\r\n      name: method,\r\n    }))\r\n\r\n    const [[sharePrice], [shares], [estimatedCakeBountyReward], [totalPendingCakeHarvest]] = await multicallv2(\r\n      cakeVaultAbi,\r\n      calls,\r\n    )\r\n\r\n    const totalSharesAsBigNumber = shares ? new BigNumber(shares.toString()) : BIG_ZERO\r\n    const sharePriceAsBigNumber = sharePrice ? new BigNumber(sharePrice.toString()) : BIG_ZERO\r\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\r\n    return {\r\n      totalShares: totalSharesAsBigNumber.toJSON(),\r\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\r\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\r\n      estimatedCakeBountyReward: new BigNumber(estimatedCakeBountyReward.toString()).toJSON(),\r\n      totalPendingCakeHarvest: new BigNumber(totalPendingCakeHarvest.toString()).toJSON(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      totalShares: null,\r\n      pricePerFullShare: null,\r\n      totalCakeInVault: null,\r\n      estimatedCakeBountyReward: null,\r\n      totalPendingCakeHarvest: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport const fetchVaultFees = async () => {\r\n  try {\r\n    const calls = ['performanceFee', 'callFee', 'withdrawFee', 'withdrawFeePeriod'].map((method) => ({\r\n      address: getCakeVaultAddress(),\r\n      name: method,\r\n    }))\r\n\r\n    const [[performanceFee], [callFee], [withdrawalFee], [withdrawalFeePeriod]] = await multicallv2(cakeVaultAbi, calls)\r\n\r\n    return {\r\n      performanceFee: performanceFee.toNumber(),\r\n      callFee: callFee.toNumber(),\r\n      withdrawalFee: withdrawalFee.toNumber(),\r\n      withdrawalFeePeriod: withdrawalFeePeriod.toNumber(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      performanceFee: null,\r\n      callFee: null,\r\n      withdrawalFee: null,\r\n      withdrawalFeePeriod: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchPublicVaultData\r\n","import BigNumber from 'bignumber.js'\r\nimport { getCakeVaultContract } from 'utils/contractHelpers'\r\n\r\nconst cakeVaultContract = getCakeVaultContract()\r\n\r\nconst fetchVaultUser = async (account: string) => {\r\n  try {\r\n    const userContractResponse = await cakeVaultContract.userInfo(account)\r\n    return {\r\n      isLoading: false,\r\n      userShares: new BigNumber(userContractResponse.shares.toString()).toJSON(),\r\n      lastDepositedTime: userContractResponse.lastDepositedTime.toString(),\r\n      lastUserActionTime: userContractResponse.lastUserActionTime.toString(),\r\n      cakeAtLastUserAction: new BigNumber(userContractResponse.cakeAtLastUserAction.toString()).toJSON(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      isLoading: true,\r\n      userShares: null,\r\n      lastDepositedTime: null,\r\n      lastUserActionTime: null,\r\n      cakeAtLastUserAction: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchVaultUser\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport BigNumber from 'bignumber.js'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport {\r\n  AppThunk,\r\n  CakeVault,\r\n  IfoCakeVault,\r\n  IfoVaultUser,\r\n  PoolsState,\r\n  SerializedPool,\r\n  VaultFees,\r\n  VaultUser,\r\n} from 'state/types'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getPoolApr } from 'utils/apr'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getCakeContract, getMasterchefContract } from 'utils/contractHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport { fetchIfoPoolFeesData, fetchPublicIfoPoolData } from './fetchIfoPoolPublic'\r\nimport fetchIfoPoolUserData from './fetchIfoPoolUser'\r\nimport { fetchPoolsBlockLimits, fetchPoolsStakingLimits, fetchPoolsTotalStaking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserPendingRewards,\r\n  fetchUserStakeBalances,\r\n} from './fetchPoolsUser'\r\nimport { fetchPublicVaultData, fetchVaultFees } from './fetchVaultPublic'\r\nimport fetchVaultUser from './fetchVaultUser'\r\nimport { getTokenPricesFromFarm } from './helpers'\r\n\r\nexport const initialPoolVaultState = Object.freeze({\r\n  totalShares: null,\r\n  pricePerFullShare: null,\r\n  totalCakeInVault: null,\r\n  estimatedCakeBountyReward: null,\r\n  totalPendingCakeHarvest: null,\r\n  fees: {\r\n    performanceFee: null,\r\n    callFee: null,\r\n    withdrawalFee: null,\r\n    withdrawalFeePeriod: null,\r\n  },\r\n  userData: {\r\n    isLoading: true,\r\n    userShares: null,\r\n    cakeAtLastUserAction: null,\r\n    lastDepositedTime: null,\r\n    lastUserActionTime: null,\r\n    credit: null,\r\n  },\r\n  creditStartBlock: null,\r\n})\r\n\r\nconst initialState: PoolsState = {\r\n  data: [...poolsConfig],\r\n  userDataLoaded: false,\r\n  cakeVault: initialPoolVaultState,\r\n  ifoPool: initialPoolVaultState,\r\n}\r\n\r\n// Thunks\r\nconst cakePool = poolsConfig.find((pool) => pool.sousId === 0)\r\nconst cakePoolAddress = getAddress(cakePool.contractAddress)\r\nconst cakeContract = getCakeContract()\r\nexport const fetchCakePoolPublicDataAsync = () => async (dispatch, getState) => {\r\n  const prices = getTokenPricesFromFarm(getState().farms.data)\r\n  const stakingTokenAddress = cakePool.stakingToken.address ? cakePool.stakingToken.address.toLowerCase() : null\r\n  const stakingTokenPrice = stakingTokenAddress ? prices[stakingTokenAddress] : 0\r\n  const earningTokenAddress = cakePool.earningToken.address ? cakePool.earningToken.address.toLowerCase() : null\r\n  const earningTokenPrice = earningTokenAddress ? prices[earningTokenAddress] : 0\r\n  const totalStaking = await cakeContract.balanceOf(cakePoolAddress)\r\n  const apr = getPoolApr(\r\n    stakingTokenPrice,\r\n    earningTokenPrice,\r\n    getBalanceNumber(new BigNumber(totalStaking ? totalStaking.toString() : 0), cakePool.stakingToken.decimals),\r\n    parseFloat(cakePool.tokenPerBlock),\r\n  )\r\n\r\n  dispatch(\r\n    setPoolPublicData({\r\n      sousId: 0,\r\n      data: {\r\n        totalStaked: new BigNumber(totalStaking.toString()).toJSON(),\r\n        stakingTokenPrice,\r\n        earningTokenPrice,\r\n        apr,\r\n      },\r\n    }),\r\n  )\r\n}\r\n\r\nexport const fetchCakePoolUserDataAsync = (account: string) => async (dispatch) => {\r\n  const allowance = await cakeContract.allowance(account, cakePoolAddress)\r\n  const stakingTokenBalance = await cakeContract.balanceOf(account)\r\n  const masterChefContract = getMasterchefContract()\r\n  const pendingReward = await masterChefContract.pendingCake('0', account)\r\n  const { amount: masterPoolAmount } = await masterChefContract.userInfo('0', account)\r\n\r\n  dispatch(\r\n    setPoolUserData({\r\n      sousId: 0,\r\n      data: {\r\n        allowance: new BigNumber(allowance.toString()).toJSON(),\r\n        stakingTokenBalance: new BigNumber(stakingTokenBalance.toString()).toJSON(),\r\n        pendingReward: new BigNumber(pendingReward.toString()).toJSON(),\r\n        stakedBalances: new BigNumber(masterPoolAmount.toString()).toJSON(),\r\n      },\r\n    }),\r\n  )\r\n}\r\n\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch, getState) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStaking()\r\n  let currentBlock = getState().block?.currentBlock\r\n\r\n  if (!currentBlock) {\r\n    currentBlock = await simpleRpcProvider.getBlockNumber()\r\n  }\r\n\r\n  const prices = getTokenPricesFromFarm(getState().farms.data)\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    const isPoolEndBlockExceeded = currentBlock > 0 && blockLimit ? currentBlock > Number(blockLimit.endBlock) : false\r\n    const isPoolFinished = pool.isFinished || isPoolEndBlockExceeded\r\n\r\n    const stakingTokenAddress = pool.stakingToken.address ? pool.stakingToken.address.toLowerCase() : null\r\n    const stakingTokenPrice = stakingTokenAddress ? prices[stakingTokenAddress] : 0\r\n\r\n    const earningTokenAddress = pool.earningToken.address ? pool.earningToken.address.toLowerCase() : null\r\n    const earningTokenPrice = earningTokenAddress ? prices[earningTokenAddress] : 0\r\n    const apr = !isPoolFinished\r\n      ? getPoolApr(\r\n          stakingTokenPrice,\r\n          earningTokenPrice,\r\n          getBalanceNumber(new BigNumber(totalStaking.totalStaked), pool.stakingToken.decimals),\r\n          parseFloat(pool.tokenPerBlock),\r\n        )\r\n      : 0\r\n\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n      stakingTokenPrice,\r\n      earningTokenPrice,\r\n      apr,\r\n      isFinished: isPoolFinished,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsStakingLimitsAsync = () => async (dispatch, getState) => {\r\n  const poolsWithStakingLimit = getState()\r\n    .pools.data.filter(({ stakingLimit }) => stakingLimit !== null && stakingLimit !== undefined)\r\n    .map((pool) => pool.sousId)\r\n\r\n  const stakingLimits = await fetchPoolsStakingLimits(poolsWithStakingLimit)\r\n\r\n  const stakingLimitData = poolsConfig.map((pool) => {\r\n    if (poolsWithStakingLimit.includes(pool.sousId)) {\r\n      return { sousId: pool.sousId }\r\n    }\r\n    const stakingLimit = stakingLimits[pool.sousId] || BIG_ZERO\r\n    return {\r\n      sousId: pool.sousId,\r\n      stakingLimit: stakingLimit.toJSON(),\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(stakingLimitData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync =\r\n  (account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const allowances = await fetchPoolsAllowance(account)\r\n    const stakingTokenBalances = await fetchUserBalances(account)\r\n    const stakedBalances = await fetchUserStakeBalances(account)\r\n    const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n    const userData = poolsConfig.map((pool) => ({\r\n      sousId: pool.sousId,\r\n      allowance: allowances[pool.sousId],\r\n      stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n      stakedBalance: stakedBalances[pool.sousId],\r\n      pendingReward: pendingRewards[pool.sousId],\r\n    }))\r\n\r\n    dispatch(setPoolsUserData(userData))\r\n  }\r\n\r\nexport const updateUserAllowance =\r\n  (sousId: number, account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const allowances = await fetchPoolsAllowance(account)\r\n    dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n  }\r\n\r\nexport const updateUserBalance =\r\n  (sousId: number, account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const tokenBalances = await fetchUserBalances(account)\r\n    dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n  }\r\n\r\nexport const updateUserStakedBalance =\r\n  (sousId: number, account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const stakedBalances = await fetchUserStakeBalances(account)\r\n    dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n  }\r\n\r\nexport const updateUserPendingReward =\r\n  (sousId: number, account: string): AppThunk =>\r\n  async (dispatch) => {\r\n    const pendingRewards = await fetchUserPendingRewards(account)\r\n    dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n  }\r\n\r\nexport const fetchCakeVaultPublicData = createAsyncThunk<CakeVault>('cakeVault/fetchPublicData', async () => {\r\n  const publicVaultInfo = await fetchPublicVaultData()\r\n  return publicVaultInfo\r\n})\r\n\r\nexport const fetchCakeVaultFees = createAsyncThunk<VaultFees>('cakeVault/fetchFees', async () => {\r\n  const vaultFees = await fetchVaultFees()\r\n  return vaultFees\r\n})\r\n\r\nexport const fetchCakeVaultUserData = createAsyncThunk<VaultUser, { account: string }>(\r\n  'cakeVault/fetchUser',\r\n  async ({ account }) => {\r\n    const userData = await fetchVaultUser(account)\r\n    return userData\r\n  },\r\n)\r\n\r\nexport const fetchIfoPoolPublicData = createAsyncThunk<IfoCakeVault>('ifoPool/fetchPublicData', async () => {\r\n  const publicVaultInfo = await fetchPublicIfoPoolData()\r\n  return publicVaultInfo\r\n})\r\n\r\nexport const fetchIfoPoolFees = createAsyncThunk<VaultFees>('ifoPool/fetchFees', async () => {\r\n  const vaultFees = await fetchIfoPoolFeesData()\r\n  return vaultFees\r\n})\r\n\r\nexport const fetchIfoPoolUserAndCredit = createAsyncThunk<IfoVaultUser, { account: string }>(\r\n  'ifoPool/fetchUser',\r\n  async ({ account }) => {\r\n    const userData = await fetchIfoPoolUserData(account)\r\n    return userData\r\n  },\r\n)\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolPublicData: (state, action) => {\r\n      const { sousId } = action.payload\r\n      const poolIndex = state.data.findIndex((pool) => pool.sousId === sousId)\r\n      state.data[poolIndex] = {\r\n        ...state.data[poolIndex],\r\n        ...action.payload.data,\r\n      }\r\n    },\r\n    setPoolUserData: (state, action) => {\r\n      const { sousId } = action.payload\r\n      const poolIndex = state.data.findIndex((pool) => pool.sousId === sousId)\r\n      state.data[poolIndex].userData = action.payload.data\r\n    },\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: SerializedPool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n      state.userDataLoaded = true\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n\r\n      if (index >= 0) {\r\n        state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Vault public data that updates frequently\r\n    builder.addCase(fetchCakeVaultPublicData.fulfilled, (state, action: PayloadAction<CakeVault>) => {\r\n      state.cakeVault = { ...state.cakeVault, ...action.payload }\r\n    })\r\n    // Vault fees\r\n    builder.addCase(fetchCakeVaultFees.fulfilled, (state, action: PayloadAction<VaultFees>) => {\r\n      const fees = action.payload\r\n      state.cakeVault = { ...state.cakeVault, fees }\r\n    })\r\n    // Vault user data\r\n    builder.addCase(fetchCakeVaultUserData.fulfilled, (state, action: PayloadAction<VaultUser>) => {\r\n      const userData = action.payload\r\n      userData.isLoading = false\r\n      state.cakeVault = { ...state.cakeVault, userData }\r\n    })\r\n    // Vault public data that updates frequently\r\n    builder.addCase(fetchIfoPoolPublicData.fulfilled, (state, action) => {\r\n      state.ifoPool = { ...state.ifoPool, ...action.payload }\r\n    })\r\n    // Vault fees\r\n    builder.addCase(fetchIfoPoolFees.fulfilled, (state, action: PayloadAction<VaultFees>) => {\r\n      const fees = action.payload\r\n      state.ifoPool = { ...state.ifoPool, fees }\r\n    })\r\n    // Vault user data\r\n    builder.addCase(fetchIfoPoolUserAndCredit.fulfilled, (state, action) => {\r\n      const userData = action.payload\r\n      userData.isLoading = false\r\n      state.ifoPool = { ...state.ifoPool, userData }\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData, setPoolPublicData, setPoolUserData } =\r\n  PoolsSlice.actions\r\n\r\nexport default PoolsSlice.reducer\r\n","export const REWARD_RATE = 0.97\r\n\r\n// Estimated number of seconds it takes to submit a transaction (3 blocks) in seconds\r\nexport const ROUND_BUFFER = 9\r\n\r\nexport const PAST_ROUND_COUNT = 5\r\nexport const FUTURE_ROUND_COUNT = 2\r\n\r\nexport const ROUNDS_PER_PAGE = 200\r\nexport const LEADERBOARD_MIN_ROUNDS_PLAYED = 10\r\n","export interface UserResponse {\r\n  id: string\r\n  createdAt: string\r\n  updatedAt: string\r\n  block: string\r\n  totalBets: string\r\n  totalBetsBull: string\r\n  totalBetsBear: string\r\n  totalBNB: string\r\n  totalBNBBull: string\r\n  totalBNBBear: string\r\n  totalBetsClaimed: string\r\n  totalBNBClaimed: string\r\n  winRate: string\r\n  averageBNB: string\r\n  netBNB: string\r\n  bets?: BetResponse[]\r\n}\r\n\r\nexport interface BetResponse {\r\n  id: string\r\n  hash: string\r\n  amount: string\r\n  position: string\r\n  claimed: boolean\r\n  claimedAt: string\r\n  claimedBlock: string\r\n  claimedHash: string\r\n  claimedBNB: string\r\n  claimedNetBNB: string\r\n  createdAt: string\r\n  updatedAt: string\r\n  block: string\r\n  user?: UserResponse\r\n  round?: RoundResponse\r\n}\r\n\r\nexport interface HistoricalBetResponse {\r\n  id: string\r\n  hash: string\r\n  amount: string\r\n  position: string\r\n  claimed: boolean\r\n  user?: UserResponse\r\n  round: {\r\n    id: string\r\n    epoch: string\r\n  }\r\n}\r\n\r\nexport interface RoundResponse {\r\n  id: string\r\n  epoch: string\r\n  position: string\r\n  failed: boolean\r\n  startAt: string\r\n  startBlock: string\r\n  startHash: string\r\n  lockAt: string\r\n  lockBlock: string\r\n  lockHash: string\r\n  lockPrice: string\r\n  lockRoundId: string\r\n  closeAt: string\r\n  closeBlock: string\r\n  closeHash: string\r\n  closePrice: string\r\n  closeRoundId: string\r\n  totalBets: string\r\n  totalAmount: string\r\n  bullBets: string\r\n  bullAmount: string\r\n  bearBets: string\r\n  bearAmount: string\r\n  bets?: BetResponse[]\r\n}\r\n\r\nexport interface TotalWonMarketResponse {\r\n  totalBNB: string\r\n  totalBNBTreasury: string\r\n}\r\n\r\n/**\r\n * Base fields are the all the top-level fields available in the api. Used in multiple queries\r\n */\r\nexport const getRoundBaseFields = () => `\r\n  id\r\n  epoch\r\n  position\r\n  failed\r\n  startAt\r\n  startBlock\r\n  startHash\r\n  lockAt\r\n  lockBlock\r\n  lockHash\r\n  lockPrice\r\n  lockRoundId\r\n  closeAt\r\n  closeBlock\r\n  closeHash\r\n  closePrice\r\n  closeRoundId\r\n  totalBets\r\n  totalAmount\r\n  bullBets\r\n  bullAmount\r\n  bearBets\r\n  bearAmount\r\n`\r\n\r\nexport const getBetBaseFields = () => `\r\n id\r\n hash  \r\n amount\r\n position\r\n claimed\r\n claimedAt\r\n claimedHash\r\n claimedBlock\r\n claimedBNB\r\n claimedNetBNB\r\n createdAt\r\n updatedAt\r\n`\r\n\r\nexport const getUserBaseFields = () => `\r\n  id\r\n  createdAt\r\n  updatedAt\r\n  block\r\n  totalBets\r\n  totalBetsBull\r\n  totalBetsBear\r\n  totalBNB\r\n  totalBNBBull\r\n  totalBNBBear\r\n  totalBetsClaimed\r\n  totalBNBClaimed\r\n  winRate\r\n  averageBNB\r\n  netBNB\r\n`\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { ethers } from 'ethers'\r\nimport { formatUnits } from 'ethers/lib/utils'\r\nimport maxBy from 'lodash/maxBy'\r\nimport merge from 'lodash/merge'\r\nimport range from 'lodash/range'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport {\r\n  Bet,\r\n  LedgerData,\r\n  HistoryFilter,\r\n  PredictionsState,\r\n  PredictionStatus,\r\n  ReduxNodeRound,\r\n  BetPosition,\r\n  LeaderboardLoadingState,\r\n  PredictionUser,\r\n  LeaderboardFilter,\r\n  State,\r\n} from 'state/types'\r\nimport { getPredictionsContract } from 'utils/contractHelpers'\r\nimport {\r\n  FUTURE_ROUND_COUNT,\r\n  LEADERBOARD_MIN_ROUNDS_PLAYED,\r\n  PAST_ROUND_COUNT,\r\n  ROUNDS_PER_PAGE,\r\n  ROUND_BUFFER,\r\n} from './config'\r\nimport {\r\n  getBetHistory,\r\n  transformBetResponse,\r\n  makeFutureRoundResponse,\r\n  makeRoundData,\r\n  getRoundsData,\r\n  getPredictionData,\r\n  MarketData,\r\n  getLedgerData,\r\n  makeLedgerData,\r\n  serializePredictionsRoundsResponse,\r\n  getClaimStatuses,\r\n  fetchUsersRoundsLength,\r\n  fetchUserRounds,\r\n  getPredictionUsers,\r\n  transformUserResponse,\r\n  LEADERBOARD_RESULTS_PER_PAGE,\r\n  getPredictionUser,\r\n} from './helpers'\r\n\r\nconst initialState: PredictionsState = {\r\n  status: PredictionStatus.INITIAL,\r\n  isLoading: false,\r\n  isHistoryPaneOpen: false,\r\n  isChartPaneOpen: false,\r\n  isFetchingHistory: false,\r\n  historyFilter: HistoryFilter.ALL,\r\n  currentEpoch: 0,\r\n  intervalSeconds: 300,\r\n  minBetAmount: '10000000000000',\r\n  bufferSeconds: 60,\r\n  lastOraclePrice: BIG_ZERO.toJSON(),\r\n  rounds: {},\r\n  history: [],\r\n  totalHistory: 0,\r\n  currentHistoryPage: 1,\r\n  hasHistoryLoaded: false,\r\n  ledgers: {},\r\n  claimableStatuses: {},\r\n  leaderboard: {\r\n    selectedAddress: null,\r\n    loadingState: LeaderboardLoadingState.INITIAL,\r\n    filters: {\r\n      address: null,\r\n      orderBy: 'netBNB',\r\n      timePeriod: 'all',\r\n    },\r\n    skip: 0,\r\n    hasMoreResults: true,\r\n    addressResults: {},\r\n    results: [],\r\n  },\r\n}\r\n\r\n// Thunks\r\ntype PredictionInitialization = Pick<\r\n  PredictionsState,\r\n  | 'status'\r\n  | 'currentEpoch'\r\n  | 'intervalSeconds'\r\n  | 'minBetAmount'\r\n  | 'rounds'\r\n  | 'ledgers'\r\n  | 'claimableStatuses'\r\n  | 'bufferSeconds'\r\n>\r\nexport const initializePredictions = createAsyncThunk<PredictionInitialization, string>(\r\n  'predictions/initialize',\r\n  async (account = null) => {\r\n    // Static values\r\n    const marketData = await getPredictionData()\r\n    const epochs =\r\n      marketData.currentEpoch > PAST_ROUND_COUNT\r\n        ? range(marketData.currentEpoch, marketData.currentEpoch - PAST_ROUND_COUNT)\r\n        : [marketData.currentEpoch]\r\n\r\n    // Round data\r\n    const roundsResponse = await getRoundsData(epochs)\r\n    const initialRoundData: { [key: string]: ReduxNodeRound } = roundsResponse.reduce((accum, roundResponse) => {\r\n      const reduxNodeRound = serializePredictionsRoundsResponse(roundResponse)\r\n\r\n      return {\r\n        ...accum,\r\n        [reduxNodeRound.epoch.toString()]: reduxNodeRound,\r\n      }\r\n    }, {})\r\n\r\n    const initializedData = {\r\n      ...marketData,\r\n      rounds: initialRoundData,\r\n      ledgers: {},\r\n      claimableStatuses: {},\r\n    }\r\n\r\n    if (!account) {\r\n      return initializedData\r\n    }\r\n\r\n    // Bet data\r\n    const ledgerResponses = await getLedgerData(account, epochs)\r\n\r\n    // Claim statuses\r\n    const claimableStatuses = await getClaimStatuses(account, epochs)\r\n\r\n    return merge({}, initializedData, {\r\n      ledgers: makeLedgerData(account, ledgerResponses, epochs),\r\n      claimableStatuses,\r\n    })\r\n  },\r\n)\r\n\r\nexport const fetchRound = createAsyncThunk<ReduxNodeRound, number>('predictions/fetchRound', async (epoch) => {\r\n  const predictionContract = getPredictionsContract()\r\n  const response = await predictionContract.rounds(epoch)\r\n  return serializePredictionsRoundsResponse(response)\r\n})\r\n\r\nexport const fetchRounds = createAsyncThunk<{ [key: string]: ReduxNodeRound }, number[]>(\r\n  'predictions/fetchRounds',\r\n  async (epochs) => {\r\n    const rounds = await getRoundsData(epochs)\r\n    return rounds.reduce((accum, round) => {\r\n      if (!round) {\r\n        return accum\r\n      }\r\n\r\n      const reduxNodeRound = serializePredictionsRoundsResponse(round)\r\n\r\n      return {\r\n        ...accum,\r\n        [reduxNodeRound.epoch.toString()]: reduxNodeRound,\r\n      }\r\n    }, {})\r\n  },\r\n)\r\n\r\nexport const fetchMarketData = createAsyncThunk<MarketData>('predictions/fetchMarketData', async () => {\r\n  const marketData = await getPredictionData()\r\n  return marketData\r\n})\r\n\r\nexport const fetchLedgerData = createAsyncThunk<LedgerData, { account: string; epochs: number[] }>(\r\n  'predictions/fetchLedgerData',\r\n  async ({ account, epochs }) => {\r\n    const ledgers = await getLedgerData(account, epochs)\r\n    return makeLedgerData(account, ledgers, epochs)\r\n  },\r\n)\r\n\r\nexport const fetchClaimableStatuses = createAsyncThunk<\r\n  PredictionsState['claimableStatuses'],\r\n  { account: string; epochs: number[] }\r\n>('predictions/fetchClaimableStatuses', async ({ account, epochs }) => {\r\n  const ledgers = await getClaimStatuses(account, epochs)\r\n  return ledgers\r\n})\r\n\r\nexport const fetchHistory = createAsyncThunk<{ account: string; bets: Bet[] }, { account: string; claimed?: boolean }>(\r\n  'predictions/fetchHistory',\r\n  async ({ account, claimed }) => {\r\n    const response = await getBetHistory({\r\n      user: account.toLowerCase(),\r\n      claimed,\r\n    })\r\n    const bets = response.map(transformBetResponse)\r\n\r\n    return { account, bets }\r\n  },\r\n)\r\n\r\nexport const fetchNodeHistory = createAsyncThunk<\r\n  { bets: Bet[]; claimableStatuses: PredictionsState['claimableStatuses']; page?: number; totalHistory: number },\r\n  { account: string; page?: number }\r\n>('predictions/fetchNodeHistory', async ({ account, page = 1 }) => {\r\n  const userRoundsLength = await fetchUsersRoundsLength(account)\r\n  const emptyResult = { bets: [], claimableStatuses: {}, totalHistory: userRoundsLength.toNumber() }\r\n  const maxPages = userRoundsLength.lte(ROUNDS_PER_PAGE) ? 1 : Math.ceil(userRoundsLength.toNumber() / ROUNDS_PER_PAGE)\r\n\r\n  if (userRoundsLength.eq(0)) {\r\n    return emptyResult\r\n  }\r\n\r\n  if (page > maxPages) {\r\n    return emptyResult\r\n  }\r\n\r\n  const cursor = userRoundsLength.sub(ROUNDS_PER_PAGE * page)\r\n\r\n  // If the page request is the final one we only want to retrieve the amount of rounds up to the next cursor.\r\n  const size =\r\n    maxPages === page\r\n      ? userRoundsLength\r\n          .sub(ROUNDS_PER_PAGE * (page - 1)) // Previous page's cursor\r\n          .toNumber()\r\n      : ROUNDS_PER_PAGE\r\n  const userRounds = await fetchUserRounds(account, cursor.lt(0) ? 0 : cursor.toNumber(), size)\r\n\r\n  if (!userRounds) {\r\n    return emptyResult\r\n  }\r\n\r\n  const epochs = Object.keys(userRounds).map((epochStr) => Number(epochStr))\r\n  const roundData = await getRoundsData(epochs)\r\n  const claimableStatuses = await getClaimStatuses(account, epochs)\r\n\r\n  // Turn the data from the node into an Bet object that comes from the graph\r\n  const bets: Bet[] = roundData.reduce((accum, round) => {\r\n    const reduxRound = serializePredictionsRoundsResponse(round)\r\n    const ledger = userRounds[reduxRound.epoch]\r\n    const ledgerAmount = ethers.BigNumber.from(ledger.amount)\r\n    const closePrice = round.closePrice ? parseFloat(formatUnits(round.closePrice, 8)) : null\r\n    const lockPrice = round.lockPrice ? parseFloat(formatUnits(round.lockPrice, 8)) : null\r\n\r\n    const getRoundPosition = () => {\r\n      if (!closePrice) {\r\n        return null\r\n      }\r\n\r\n      if (round.closePrice.eq(round.lockPrice)) {\r\n        return BetPosition.HOUSE\r\n      }\r\n\r\n      return round.closePrice.gt(round.lockPrice) ? BetPosition.BULL : BetPosition.BEAR\r\n    }\r\n\r\n    return [\r\n      ...accum,\r\n      {\r\n        id: null,\r\n        hash: null,\r\n        amount: parseFloat(formatUnits(ledgerAmount)),\r\n        position: ledger.position,\r\n        claimed: ledger.claimed,\r\n        claimedAt: null,\r\n        claimedHash: null,\r\n        claimedBNB: 0,\r\n        claimedNetBNB: 0,\r\n        createdAt: null,\r\n        updatedAt: null,\r\n        block: 0,\r\n        round: {\r\n          id: null,\r\n          epoch: round.epoch.toNumber(),\r\n          failed: false,\r\n          startBlock: null,\r\n          startAt: round.startTimestamp ? round.startTimestamp.toNumber() : null,\r\n          startHash: null,\r\n          lockAt: round.lockTimestamp ? round.lockTimestamp.toNumber() : null,\r\n          lockBlock: null,\r\n          lockPrice,\r\n          lockHash: null,\r\n          lockRoundId: round.lockOracleId ? round.lockOracleId.toString() : null,\r\n          closeRoundId: round.closeOracleId ? round.closeOracleId.toString() : null,\r\n          closeHash: null,\r\n          closeAt: null,\r\n          closePrice,\r\n          closeBlock: null,\r\n          totalBets: 0,\r\n          totalAmount: parseFloat(formatUnits(round.totalAmount)),\r\n          bullBets: 0,\r\n          bullAmount: parseFloat(formatUnits(round.bullAmount)),\r\n          bearBets: 0,\r\n          bearAmount: parseFloat(formatUnits(round.bearAmount)),\r\n          position: getRoundPosition(),\r\n        },\r\n      },\r\n    ]\r\n  }, [])\r\n\r\n  return { bets, claimableStatuses, page, totalHistory: userRoundsLength.toNumber() }\r\n})\r\n\r\n// Leaderboard\r\nexport const filterLeaderboard = createAsyncThunk<{ results: PredictionUser[] }, { filters: LeaderboardFilter }>(\r\n  'predictions/filterLeaderboard',\r\n  async ({ filters }) => {\r\n    const usersResponse = await getPredictionUsers({\r\n      skip: 0,\r\n      orderBy: filters.orderBy,\r\n      where: { totalBets_gte: LEADERBOARD_MIN_ROUNDS_PLAYED, [`${filters.orderBy}_gt`]: 0 },\r\n    })\r\n\r\n    return { results: usersResponse.map(transformUserResponse) }\r\n  },\r\n)\r\n\r\nexport const fetchAddressResult = createAsyncThunk<\r\n  { account: string; data: PredictionUser },\r\n  string,\r\n  { rejectValue: string }\r\n>('predictions/fetchAddressResult', async (account, { rejectWithValue }) => {\r\n  const userResponse = await getPredictionUser(account)\r\n\r\n  if (!userResponse) {\r\n    return rejectWithValue(account)\r\n  }\r\n\r\n  return { account, data: transformUserResponse(userResponse) }\r\n})\r\n\r\nexport const filterNextPageLeaderboard = createAsyncThunk<\r\n  { results: PredictionUser[]; skip: number },\r\n  number,\r\n  { state: State }\r\n>('predictions/filterNextPageLeaderboard', async (skip, { getState }) => {\r\n  const state = getState()\r\n  const usersResponse = await getPredictionUsers({\r\n    skip,\r\n    orderBy: state.predictions.leaderboard.filters.orderBy,\r\n    where: { totalBets_gte: LEADERBOARD_MIN_ROUNDS_PLAYED, [`${state.predictions.leaderboard.filters.orderBy}_gt`]: 0 },\r\n  })\r\n\r\n  return { results: usersResponse.map(transformUserResponse), skip }\r\n})\r\n\r\nexport const predictionsSlice = createSlice({\r\n  name: 'predictions',\r\n  initialState,\r\n  reducers: {\r\n    setLeaderboardFilter: (state, action: PayloadAction<Partial<LeaderboardFilter>>) => {\r\n      state.leaderboard.filters = {\r\n        ...state.leaderboard.filters,\r\n        ...action.payload,\r\n      }\r\n\r\n      // Anytime we filters change we need to reset back to page 1\r\n      state.leaderboard.skip = 0\r\n      state.leaderboard.hasMoreResults = true\r\n    },\r\n    setHistoryPaneState: (state, action: PayloadAction<boolean>) => {\r\n      state.isHistoryPaneOpen = action.payload\r\n      state.historyFilter = HistoryFilter.ALL\r\n    },\r\n    setChartPaneState: (state, action: PayloadAction<boolean>) => {\r\n      state.isChartPaneOpen = action.payload\r\n    },\r\n    setHistoryFilter: (state, action: PayloadAction<HistoryFilter>) => {\r\n      state.historyFilter = action.payload\r\n    },\r\n    setLastOraclePrice: (state, action: PayloadAction<string>) => {\r\n      state.lastOraclePrice = action.payload\r\n    },\r\n    markAsCollected: (state, action: PayloadAction<{ [key: string]: boolean }>) => {\r\n      state.claimableStatuses = { ...state.claimableStatuses, ...action.payload }\r\n    },\r\n    setSelectedAddress: (state, action: PayloadAction<string>) => {\r\n      state.leaderboard.selectedAddress = action.payload\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Leaderboard filter\r\n    builder.addCase(filterLeaderboard.pending, (state) => {\r\n      // Only mark as loading if we come from IDLE. This allows initialization.\r\n      if (state.leaderboard.loadingState === LeaderboardLoadingState.IDLE) {\r\n        state.leaderboard.loadingState = LeaderboardLoadingState.LOADING\r\n      }\r\n    })\r\n    builder.addCase(filterLeaderboard.fulfilled, (state, action) => {\r\n      const { results } = action.payload\r\n\r\n      state.leaderboard.loadingState = LeaderboardLoadingState.IDLE\r\n      state.leaderboard.results = results\r\n\r\n      if (results.length < LEADERBOARD_RESULTS_PER_PAGE) {\r\n        state.leaderboard.hasMoreResults = false\r\n      }\r\n\r\n      // Populate address results to reduce calls\r\n      state.leaderboard.addressResults = {\r\n        ...state.leaderboard.addressResults,\r\n        ...results.reduce((accum, result) => {\r\n          return {\r\n            ...accum,\r\n            [result.id]: result,\r\n          }\r\n        }, {}),\r\n      }\r\n    })\r\n\r\n    // Leaderboard account result\r\n    builder.addCase(fetchAddressResult.pending, (state) => {\r\n      state.leaderboard.loadingState = LeaderboardLoadingState.LOADING\r\n    })\r\n    builder.addCase(fetchAddressResult.fulfilled, (state, action) => {\r\n      const { account, data } = action.payload\r\n      state.leaderboard.loadingState = LeaderboardLoadingState.IDLE\r\n      state.leaderboard.addressResults[account] = data\r\n    })\r\n    builder.addCase(fetchAddressResult.rejected, (state, action) => {\r\n      state.leaderboard.loadingState = LeaderboardLoadingState.IDLE\r\n      state.leaderboard.addressResults[action.payload] = null\r\n    })\r\n\r\n    // Leaderboard next page\r\n    builder.addCase(filterNextPageLeaderboard.pending, (state) => {\r\n      state.leaderboard.loadingState = LeaderboardLoadingState.LOADING\r\n    })\r\n    builder.addCase(filterNextPageLeaderboard.fulfilled, (state, action) => {\r\n      const { results, skip } = action.payload\r\n\r\n      state.leaderboard.loadingState = LeaderboardLoadingState.IDLE\r\n      state.leaderboard.results = [...state.leaderboard.results, ...results]\r\n      state.leaderboard.skip = skip\r\n\r\n      if (results.length < LEADERBOARD_RESULTS_PER_PAGE) {\r\n        state.leaderboard.hasMoreResults = false\r\n      }\r\n    })\r\n\r\n    // Claimable statuses\r\n    builder.addCase(fetchClaimableStatuses.fulfilled, (state, action) => {\r\n      state.claimableStatuses = merge({}, state.claimableStatuses, action.payload)\r\n    })\r\n\r\n    // Ledger (bet) records\r\n    builder.addCase(fetchLedgerData.fulfilled, (state, action) => {\r\n      state.ledgers = merge({}, state.ledgers, action.payload)\r\n    })\r\n\r\n    // Get static market data\r\n    builder.addCase(fetchMarketData.fulfilled, (state, action) => {\r\n      const { status, currentEpoch, intervalSeconds, minBetAmount } = action.payload\r\n\r\n      // If the round has change add a new future round\r\n      if (state.currentEpoch !== currentEpoch) {\r\n        const newestRound = maxBy(Object.values(state.rounds), 'epoch')\r\n        const futureRound = makeFutureRoundResponse(\r\n          newestRound.epoch + 1,\r\n          newestRound.startTimestamp + intervalSeconds + ROUND_BUFFER,\r\n        )\r\n\r\n        state.rounds[futureRound.epoch] = futureRound\r\n      }\r\n\r\n      state.status = status\r\n      state.currentEpoch = currentEpoch\r\n      state.intervalSeconds = intervalSeconds\r\n      state.minBetAmount = minBetAmount\r\n    })\r\n\r\n    // Initialize predictions\r\n    builder.addCase(initializePredictions.fulfilled, (state, action) => {\r\n      const { status, currentEpoch, intervalSeconds, bufferSeconds, rounds, claimableStatuses, ledgers } =\r\n        action.payload\r\n      const futureRounds: ReduxNodeRound[] = []\r\n      const currentRound = rounds[currentEpoch]\r\n\r\n      for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\r\n        futureRounds.push(makeFutureRoundResponse(currentEpoch + i, currentRound.startTimestamp + intervalSeconds * i))\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        status,\r\n        currentEpoch,\r\n        intervalSeconds,\r\n        bufferSeconds,\r\n        claimableStatuses,\r\n        ledgers,\r\n        rounds: merge({}, rounds, makeRoundData(futureRounds)),\r\n      }\r\n    })\r\n\r\n    // Get single round\r\n    builder.addCase(fetchRound.fulfilled, (state, action) => {\r\n      state.rounds = merge({}, state.rounds, {\r\n        [action.payload.epoch.toString()]: action.payload,\r\n      })\r\n    })\r\n\r\n    // Get multiple rounds\r\n    builder.addCase(fetchRounds.fulfilled, (state, action) => {\r\n      state.rounds = merge({}, state.rounds, action.payload)\r\n    })\r\n\r\n    // Show History\r\n    builder.addCase(fetchHistory.pending, (state) => {\r\n      state.isFetchingHistory = true\r\n    })\r\n    builder.addCase(fetchHistory.rejected, (state) => {\r\n      state.isFetchingHistory = false\r\n    })\r\n    builder.addCase(fetchHistory.fulfilled, (state, action) => {\r\n      const { account, bets } = action.payload\r\n\r\n      state.isFetchingHistory = false\r\n      state.history[account] = merge([], state.history[account] ?? [], bets)\r\n    })\r\n\r\n    // History from the node\r\n    builder.addCase(fetchNodeHistory.pending, (state) => {\r\n      state.isFetchingHistory = true\r\n    })\r\n    builder.addCase(fetchNodeHistory.rejected, (state) => {\r\n      state.isFetchingHistory = false\r\n    })\r\n    builder.addCase(fetchNodeHistory.fulfilled, (state, action) => {\r\n      const { bets, claimableStatuses, page, totalHistory } = action.payload\r\n\r\n      state.isFetchingHistory = false\r\n      state.history = page === 1 ? bets : [...state.history, ...bets]\r\n      state.claimableStatuses = { ...state.claimableStatuses, ...claimableStatuses }\r\n      state.hasHistoryLoaded = state.history.length === totalHistory || bets.length === 0\r\n      state.totalHistory = totalHistory\r\n      state.currentHistoryPage = page\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const {\r\n  setChartPaneState,\r\n  setHistoryFilter,\r\n  setHistoryPaneState,\r\n  setLastOraclePrice,\r\n  markAsCollected,\r\n  setLeaderboardFilter,\r\n  setSelectedAddress,\r\n} = predictionsSlice.actions\r\n\r\nexport default predictionsSlice.reducer\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport teamsList from 'config/constants/teams'\r\nimport { Team } from 'config/constants/types'\r\nimport { TeamsById, TeamsState } from '../types'\r\nimport { getTeam, getTeams } from './helpers'\r\n\r\nconst teamsById: TeamsById = teamsList.reduce((accum, team) => {\r\n  return {\r\n    ...accum,\r\n    [team.id]: team,\r\n  }\r\n}, {})\r\n\r\nconst initialState: TeamsState = {\r\n  isInitialized: false,\r\n  isLoading: true,\r\n  data: teamsById,\r\n}\r\n\r\nexport const teamsSlice = createSlice({\r\n  name: 'teams',\r\n  initialState,\r\n  reducers: {\r\n    fetchStart: (state) => {\r\n      state.isLoading = true\r\n    },\r\n    fetchFailed: (state) => {\r\n      state.isLoading = false\r\n      state.isInitialized = true\r\n    },\r\n    teamFetchSucceeded: (state, action: PayloadAction<Team>) => {\r\n      state.isInitialized = true\r\n      state.isLoading = false\r\n      state.data[action.payload.id] = action.payload\r\n    },\r\n    teamsFetchSucceeded: (state, action: PayloadAction<TeamsById>) => {\r\n      state.isInitialized = true\r\n      state.isLoading = false\r\n      state.data = action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { fetchStart, teamFetchSucceeded, fetchFailed, teamsFetchSucceeded } = teamsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchTeam = (teamId: number) => async (dispatch) => {\r\n  try {\r\n    dispatch(fetchStart())\r\n    const team = await getTeam(teamId)\r\n    dispatch(teamFetchSucceeded(team))\r\n  } catch (error) {\r\n    dispatch(fetchFailed())\r\n  }\r\n}\r\n\r\nexport const fetchTeams = () => async (dispatch) => {\r\n  try {\r\n    dispatch(fetchStart())\r\n    const teams = await getTeams()\r\n    dispatch(teamsFetchSucceeded(teams))\r\n  } catch (error) {\r\n    dispatch(fetchFailed())\r\n  }\r\n}\r\n\r\nexport default teamsSlice.reducer\r\n","import { Campaign } from './types'\r\n\r\n/**\r\n * id: The campaign id (required)\r\n * type: The type of the achievement\r\n * title: A string or an object to be translated.\r\n * Note: If the value is a string it is likely used as data in a translation object\r\n *\r\n * badge: Achievement avatar\r\n */\r\n\r\nconst campaigns: Campaign[] = [\r\n  {\r\n    id: '511110000',\r\n    type: 'ifo',\r\n    title: 'Kalmar',\r\n    badge: 'ifo-kalm.svg',\r\n  },\r\n  {\r\n    id: '511100000',\r\n    type: 'ifo',\r\n    title: 'Hotcross',\r\n    badge: 'ifo-hotcross.svg',\r\n  },\r\n  {\r\n    id: '511090000',\r\n    type: 'ifo',\r\n    title: 'Horizon Protocol',\r\n    badge: 'ifo-hzn.svg',\r\n  },\r\n  {\r\n    id: '511080000',\r\n    type: 'ifo',\r\n    title: 'Belt',\r\n    badge: 'ifo-belt.svg',\r\n  },\r\n  {\r\n    id: '511070000',\r\n    type: 'ifo',\r\n    title: 'Yieldwatch',\r\n    badge: 'ifo-watch.svg',\r\n  },\r\n  {\r\n    id: '511060000',\r\n    type: 'ifo',\r\n    title: 'Berry',\r\n    badge: 'ifo-bry.svg',\r\n  },\r\n  {\r\n    id: '511050000',\r\n    type: 'ifo',\r\n    title: 'Soteria',\r\n    badge: 'ifo-wsote.svg',\r\n  },\r\n  {\r\n    id: '511040000',\r\n    type: 'ifo',\r\n    title: 'Helmet',\r\n    badge: 'ifo-helmet.svg',\r\n  },\r\n  {\r\n    id: '511030000',\r\n    type: 'ifo',\r\n    title: 'Tenet',\r\n    badge: 'ifo-ten.svg',\r\n  },\r\n  {\r\n    id: '511020000',\r\n    type: 'ifo',\r\n    title: 'Ditto',\r\n    badge: 'ifo-ditto.svg',\r\n  },\r\n  {\r\n    id: '511010000',\r\n    type: 'ifo',\r\n    title: 'Blink',\r\n    badge: 'ifo-blink.svg',\r\n  },\r\n  {\r\n    id: '512010001',\r\n    type: 'teambattle',\r\n    title: 'Easter Champion: Gold',\r\n    badge: 'easter-champion-gold.svg',\r\n  },\r\n  {\r\n    id: '512010002',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Gold',\r\n    badge: 'easter-top-500-gold.svg',\r\n  },\r\n  {\r\n    id: '512010003',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Gold',\r\n    badge: 'easter-top-500-gold.svg',\r\n  },\r\n  {\r\n    id: '512010004',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Gold',\r\n    badge: 'easter-top-500-gold.svg',\r\n  },\r\n  {\r\n    id: '512010005',\r\n    type: 'teambattle',\r\n    title: 'Easter Participant: Gold',\r\n    badge: 'easter-participant-gold.svg',\r\n  },\r\n  {\r\n    id: '512010006',\r\n    type: 'teambattle',\r\n    title: 'Easter Champion: Silver',\r\n    badge: 'easter-champion-silver.svg',\r\n  },\r\n  {\r\n    id: '512010007',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Silver',\r\n    badge: 'easter-top-500-silver.svg',\r\n  },\r\n  {\r\n    id: '512010008',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Silver',\r\n    badge: 'easter-top-500-silver.svg',\r\n  },\r\n  {\r\n    id: '512010009',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Silver',\r\n    badge: 'easter-top-500-silver.svg',\r\n  },\r\n  {\r\n    id: '512010010',\r\n    type: 'teambattle',\r\n    title: 'Easter Participant: Silver',\r\n    badge: 'easter-participant-silver.svg',\r\n  },\r\n  {\r\n    id: '512010011',\r\n    type: 'teambattle',\r\n    title: 'Easter Champion: Bronze',\r\n    badge: 'easter-champion-bronze.svg',\r\n  },\r\n  {\r\n    id: '512010012',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Bronze',\r\n    badge: 'easter-top-500-bronze.svg',\r\n  },\r\n  {\r\n    id: '512010013',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Bronze',\r\n    badge: 'easter-top-500-bronze.svg',\r\n  },\r\n  {\r\n    id: '512010014',\r\n    type: 'teambattle',\r\n    title: 'Easter Top 500: Bronze',\r\n    badge: 'easter-top-500-bronze.svg',\r\n  },\r\n  {\r\n    id: '512010015',\r\n    type: 'teambattle',\r\n    title: 'Easter Participant: Bronze',\r\n    badge: 'easter-participant-bronze.svg',\r\n  },\r\n  {\r\n    id: '513010001',\r\n    type: 'participation',\r\n    title: 'Syrup Soaker',\r\n    description: 'Took a dip in the early days of the Auto CAKE Pool',\r\n    badge: 'syrup-soaker.svg',\r\n  },\r\n  {\r\n    id: '514010001',\r\n    type: 'participation',\r\n    title: 'Clairvoyant',\r\n    description: 'Played a round of Prediction before round 12,120',\r\n    badge: 'clairvoyant.svg',\r\n  },\r\n  {\r\n    id: '515010001',\r\n    type: 'participation',\r\n    title: 'Lottie',\r\n    description: 'Joined a round in the early days of Lottery V2',\r\n    badge: 'lottie.svg',\r\n  },\r\n  {\r\n    id: '515020001',\r\n    type: 'participation',\r\n    title: 'Lucky',\r\n    description: 'Won a round in the early days of Lottery V2',\r\n    badge: 'lucky.svg',\r\n  },\r\n  {\r\n    id: '515030001',\r\n    type: 'participation',\r\n    title: 'Baller',\r\n    description: 'Top 100 ticket buyer in the early days of Lottery V2',\r\n    badge: 'baller.svg',\r\n  },\r\n  {\r\n    id: '516010001',\r\n    type: 'participation',\r\n    title: '1 Year',\r\n    description: 'Joined PancakeSwap during the first year of our journey!',\r\n    badge: '1-year.svg',\r\n  },\r\n  {\r\n    id: '511120000',\r\n    type: 'ifo',\r\n    title: 'Duelist King',\r\n    badge: 'ifo-dkt.svg',\r\n  },\r\n  {\r\n    id: '511130000',\r\n    type: 'ifo',\r\n    title: 'Mines of Dalarnia',\r\n    badge: 'ifo-dar.svg',\r\n  },\r\n  {\r\n    id: '511140000',\r\n    type: 'ifo',\r\n    title: 'FC Porto Fan Token',\r\n    badge: 'ifo-porto.svg',\r\n  },\r\n  {\r\n    id: '511150000',\r\n    type: 'ifo',\r\n    title: 'FC Santos Fan Token',\r\n    badge: 'ifo-santos.svg',\r\n  },\r\n  {\r\n    id: '512020001',\r\n    type: 'teambattle',\r\n    title: 'Fan Token Champion: Gold',\r\n    badge: 'fan-token-champion-gold.svg',\r\n  },\r\n  {\r\n    id: '512020002',\r\n    type: 'teambattle',\r\n    title: 'Fan Token Top 10: Gold',\r\n    badge: 'fan-token-top-10-gold.svg',\r\n  },\r\n  {\r\n    id: '512020003',\r\n    type: 'teambattle',\r\n    title: 'Fan Token Top 100: Gold',\r\n    badge: 'fan-token-top-100-gold.svg',\r\n  },\r\n  {\r\n    id: '512020004',\r\n    type: 'teambattle',\r\n    title: 'Fan Token Top 500: Gold',\r\n    badge: 'fan-token-top-500-gold.svg',\r\n  },\r\n  {\r\n    id: '512020005',\r\n    type: 'teambattle',\r\n    title: 'Fan Token Participant: Gold',\r\n    badge: 'fan-token-participant-gold.svg',\r\n  },\r\n  {\r\n    id: '512020006',\r\n    type: 'teambattle',\r\n    title: 'Fan Token Champion: Silver',\r\n    badge: 'fan-token-champion-silver.svg',\r\n  },\r\n  {\r\n    id: '512020007',\r\n    type: 'teambattle',\r\n    title: 'Fan Token Top 10: Silver',\r\n    badge: 'fan-token-top-10-silver.svg',\r\n  },\r\n  {\r\n    id: '512020008',\r\n    type: 'teambattle',\r\n    title: 'Fan Token Top 100: Silver',\r\n    badge: 'fan-token-top-100-silver.svg',\r\n  },\r\n  {\r\n    id: '512020009',\r\n    type: 'teambattle',\r\n    title: 'Fan Token Top 500: Silver',\r\n    badge: 'fan-token-top-500-silver.svg',\r\n  },\r\n  {\r\n    id: '512020010',\r\n    type: 'teambattle',\r\n    title: 'Fan Token Participant: Silver',\r\n    badge: 'fan-token-participant-silver.svg',\r\n  },\r\n  {\r\n    id: '512020011',\r\n    type: 'teambattle',\r\n    title: 'Fan Token Champion: Bronze',\r\n    badge: 'fan-token-champion-bronze.svg',\r\n  },\r\n  {\r\n    id: '512020012',\r\n    type: 'teambattle',\r\n    title: 'Fan Token Top 10: Bronze',\r\n    badge: 'fan-token-top-10-bronze.svg',\r\n  },\r\n  {\r\n    id: '512020013',\r\n    type: 'teambattle',\r\n    title: 'Fan Token Top 100: Bronze',\r\n    badge: 'fan-token-top-100-bronze.svg',\r\n  },\r\n  {\r\n    id: '512020014',\r\n    type: 'teambattle',\r\n    title: 'Fan Token Top 500: Bronze',\r\n    badge: 'fan-token-top-500-bronze.svg',\r\n  },\r\n  {\r\n    id: '512020015',\r\n    type: 'teambattle',\r\n    title: 'Fan Token Participant: Bronze',\r\n    badge: 'fan-token-participant-bronze.svg',\r\n  },\r\n  {\r\n    id: '511160000',\r\n    type: 'ifo',\r\n    title: 'Diviner Protocol',\r\n    badge: 'ifo-dpt.svg',\r\n  },\r\n]\r\n\r\n/**\r\n * Transform the campaign config into a map. Keeps the config the same\r\n * as the others and allows easy access to a campaign by id\r\n */\r\nexport const campaignMap = new Map<string, Campaign>()\r\n\r\ncampaigns.forEach((campaign) => {\r\n  campaignMap.set(campaign.id, campaign)\r\n})\r\n\r\nexport default campaigns\r\n","import { ethers } from 'ethers'\r\nimport { Campaign, TranslatableText } from 'config/constants/types'\r\nimport ifosList from 'config/constants/ifo'\r\nimport { campaignMap } from 'config/constants/campaigns'\r\nimport { Achievement } from 'state/types'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport { getPointCenterIfoAddress } from 'utils/addressHelpers'\r\nimport pointCenterIfoABI from 'config/abi/pointCenterIfo.json'\r\n\r\ninterface IfoMapResponse {\r\n  thresholdToClaim: string\r\n  campaignId: string\r\n  numberPoints: ethers.BigNumber\r\n}\r\n\r\nexport const getAchievementTitle = (campaign: Campaign): TranslatableText => {\r\n  switch (campaign.type) {\r\n    case 'ifo':\r\n      return {\r\n        key: 'IFO Shopper: %title%',\r\n        data: {\r\n          title: campaign.title as string,\r\n        },\r\n      }\r\n    default:\r\n      return campaign.title\r\n  }\r\n}\r\n\r\nexport const getAchievementDescription = (campaign: Campaign): TranslatableText => {\r\n  switch (campaign.type) {\r\n    case 'ifo':\r\n      return {\r\n        key: 'Committed more than $5 worth of LP in the %title% IFO',\r\n        data: {\r\n          title: campaign.title as string,\r\n        },\r\n      }\r\n    default:\r\n      return campaign.description\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if a wallet is eligible to claim points from valid IFO's\r\n */\r\nexport const getClaimableIfoData = async (account: string): Promise<Achievement[]> => {\r\n  const ifoCampaigns = ifosList.filter((ifoItem) => ifoItem.campaignId !== undefined)\r\n\r\n  // Returns the claim status of every IFO with a campaign ID\r\n  const claimStatusCalls = ifoCampaigns.map(({ address }) => {\r\n    return {\r\n      address: getPointCenterIfoAddress(),\r\n      name: 'checkClaimStatus',\r\n      params: [account, address],\r\n    }\r\n  })\r\n\r\n  const claimStatuses = (await multicallv2(pointCenterIfoABI, claimStatusCalls, { requireSuccess: false })) as\r\n    | [boolean][]\r\n    | null\r\n\r\n  // Get IFO data for all IFO's that are eligible to claim\r\n  const claimableIfoData = (await multicallv2(\r\n    pointCenterIfoABI,\r\n    claimStatuses.reduce((accum, claimStatusArr, index) => {\r\n      if (claimStatusArr === null) {\r\n        return accum\r\n      }\r\n\r\n      const [claimStatus] = claimStatusArr\r\n\r\n      if (claimStatus === true) {\r\n        return [...accum, { address: getPointCenterIfoAddress(), name: 'ifos', params: [ifoCampaigns[index].address] }]\r\n      }\r\n\r\n      return accum\r\n    }, []),\r\n  )) as IfoMapResponse[]\r\n\r\n  // Transform response to an Achievement\r\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\r\n    const claimableCampaignId = claimableIfoDataItem.campaignId.toString()\r\n    if (!campaignMap.has(claimableCampaignId)) {\r\n      return accum\r\n    }\r\n\r\n    const campaignMeta = campaignMap.get(claimableCampaignId)\r\n    const { address } = ifoCampaigns.find((ifoCampaign) => ifoCampaign.campaignId === claimableCampaignId)\r\n\r\n    return [\r\n      ...accum,\r\n      {\r\n        address,\r\n        id: claimableCampaignId,\r\n        type: 'ifo',\r\n        title: getAchievementTitle(campaignMeta),\r\n        description: getAchievementDescription(campaignMeta),\r\n        badge: campaignMeta.badge,\r\n        points: claimableIfoDataItem.numberPoints.toNumber(),\r\n      },\r\n    ]\r\n  }, [])\r\n}\r\n","import { request, gql } from 'graphql-request'\r\nimport { campaignMap } from 'config/constants/campaigns'\r\nimport { GRAPH_API_PROFILE } from 'config/constants/endpoints'\r\nimport { Achievement } from 'state/types'\r\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements'\r\n\r\ninterface UserPointIncreaseEvent {\r\n  campaignId: string\r\n  id: string // wallet address\r\n  points: string\r\n}\r\n\r\n/**\r\n * Gets all user point increase events on the profile filtered by wallet address\r\n */\r\nexport const getUserPointIncreaseEvents = async (account: string): Promise<UserPointIncreaseEvent[]> => {\r\n  try {\r\n    const { user } = await request(\r\n      GRAPH_API_PROFILE,\r\n      gql`\r\n        query getUserPointIncreaseEvents($account: ID!) {\r\n          user(id: $account) {\r\n            points {\r\n              id\r\n              campaignId\r\n              points\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      {\r\n        account: account.toLowerCase(),\r\n      },\r\n    )\r\n\r\n    return user.points\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Gets all user point increase events and adds achievement meta\r\n */\r\nexport const getAchievements = async (account: string): Promise<Achievement[]> => {\r\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account)\r\n\r\n  if (!pointIncreaseEvents) {\r\n    return []\r\n  }\r\n\r\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\r\n    if (!campaignMap.has(userPoint.campaignId)) {\r\n      return accum\r\n    }\r\n\r\n    const campaignMeta = campaignMap.get(userPoint.campaignId)\r\n\r\n    return [\r\n      ...accum,\r\n      {\r\n        id: userPoint.campaignId,\r\n        type: campaignMeta.type,\r\n        address: userPoint.id,\r\n        title: getAchievementTitle(campaignMeta),\r\n        description: getAchievementDescription(campaignMeta),\r\n        badge: campaignMeta.badge,\r\n        points: Number(userPoint.points),\r\n      },\r\n    ]\r\n  }, [])\r\n}\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { AchievementState, Achievement, AchievementFetchStatus } from '../types'\r\nimport { getAchievements } from './helpers'\r\n\r\nconst initialState: AchievementState = {\r\n  achievements: [],\r\n  achievementFetchStatus: AchievementFetchStatus.NOT_FETCHED,\r\n}\r\n\r\nexport const fetchAchievements = createAsyncThunk<Achievement[], string>(\r\n  'achievements/fetchAchievements',\r\n  async (account) => {\r\n    const achievements = await getAchievements(account)\r\n    return achievements\r\n  },\r\n)\r\n\r\nexport const achievementSlice = createSlice({\r\n  name: 'achievements',\r\n  initialState,\r\n  reducers: {\r\n    addAchievement: (state, action: PayloadAction<Achievement>) => {\r\n      state.achievements.push(action.payload)\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchAchievements.pending, (state) => {\r\n      state.achievementFetchStatus = AchievementFetchStatus.FETCHING\r\n    })\r\n    builder.addCase(fetchAchievements.fulfilled, (state, action) => {\r\n      state.achievementFetchStatus = AchievementFetchStatus.FETCHED\r\n      state.achievements = action.payload\r\n    })\r\n    builder.addCase(fetchAchievements.rejected, (state) => {\r\n      state.achievementFetchStatus = AchievementFetchStatus.ERROR\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { addAchievement } = achievementSlice.actions\r\n\r\nexport default achievementSlice.reducer\r\n","import request, { gql } from 'graphql-request'\r\nimport { SNAPSHOT_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints'\r\nimport { Proposal, ProposalState, Vote, VoteWhere } from 'state/types'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\n\r\nexport const getProposals = async (first = 5, skip = 0, state = ProposalState.ACTIVE): Promise<Proposal[]> => {\r\n  const response: { proposals: Proposal[] } = await request(\r\n    SNAPSHOT_API,\r\n    gql`\r\n      query getProposals($first: Int!, $skip: Int!, $state: String!) {\r\n        proposals(\r\n          first: $first\r\n          skip: $skip\r\n          orderBy: \"end\"\r\n          orderDirection: desc\r\n          where: { space_in: \"cake.eth\", state: $state }\r\n        ) {\r\n          id\r\n          title\r\n          body\r\n          choices\r\n          start\r\n          end\r\n          snapshot\r\n          state\r\n          author\r\n          space {\r\n            id\r\n            name\r\n          }\r\n        }\r\n      }\r\n    `,\r\n    { first, skip, state },\r\n  )\r\n  return response.proposals\r\n}\r\n\r\nexport const getProposal = async (id: string): Promise<Proposal> => {\r\n  const response: { proposal: Proposal } = await request(\r\n    SNAPSHOT_API,\r\n    gql`\r\n      query getProposal($id: String) {\r\n        proposal(id: $id) {\r\n          id\r\n          title\r\n          body\r\n          choices\r\n          start\r\n          end\r\n          snapshot\r\n          state\r\n          author\r\n          space {\r\n            id\r\n            name\r\n          }\r\n        }\r\n      }\r\n    `,\r\n    { id },\r\n  )\r\n  return response.proposal\r\n}\r\n\r\nexport const getVotes = async (first: number, skip: number, where: VoteWhere): Promise<Vote[]> => {\r\n  const response: { votes: Vote[] } = await request(\r\n    SNAPSHOT_API,\r\n    gql`\r\n      query getVotes($first: Int, $skip: Int, $where: VoteWhere) {\r\n        votes(first: $first, skip: $skip, where: $where) {\r\n          id\r\n          voter\r\n          created\r\n          choice\r\n          space {\r\n            id\r\n            name\r\n          }\r\n          proposal {\r\n            choices\r\n          }\r\n          metadata\r\n        }\r\n      }\r\n    `,\r\n    { first, skip, where },\r\n  )\r\n  return response.votes\r\n}\r\n\r\nexport const getVoteVerificationStatuses = async (\r\n  votes: Vote[],\r\n  block?: number,\r\n): Promise<{ [key: string]: boolean }> => {\r\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n\r\n  const votesToVerify = votes.map((vote) => ({\r\n    address: vote.voter,\r\n    verificationHash: vote.metadata?.verificationHash,\r\n    total: vote.metadata?.votingPower,\r\n  }))\r\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/verify`, {\r\n    method: 'post',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      block: blockNumber,\r\n      votes: votesToVerify,\r\n    }),\r\n  })\r\n\r\n  if (!response.ok) {\r\n    throw new Error(response.statusText)\r\n  }\r\n\r\n  const data = await response.json()\r\n  return votes.reduce((accum, vote) => {\r\n    return {\r\n      ...accum,\r\n      [vote.id]: data.data[vote.voter.toLowerCase()]?.isValid === true,\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport const getAllVotes = async (proposalId: string, block?: number, votesPerChunk = 1000): Promise<Vote[]> => {\r\n  // const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n  return new Promise((resolve, reject) => {\r\n    let votes: Vote[] = []\r\n\r\n    const fetchVoteChunk = async (newSkip: number) => {\r\n      try {\r\n        const voteChunk = await getVotes(votesPerChunk, newSkip, { proposal: proposalId })\r\n\r\n        if (voteChunk.length === 0) {\r\n          resolve(votes)\r\n        } else {\r\n          votes = [...votes, ...voteChunk]\r\n          fetchVoteChunk(newSkip + votesPerChunk)\r\n        }\r\n      } catch (error) {\r\n        reject(error)\r\n      }\r\n    }\r\n\r\n    fetchVoteChunk(0)\r\n  })\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport { merge } from 'lodash'\r\nimport { Proposal, ProposalState, VotingStateLoadingStatus, VotingState, Vote, State } from 'state/types'\r\nimport { getAllVotes, getProposal, getProposals, getVoteVerificationStatuses } from './helpers'\r\n\r\nconst initialState: VotingState = {\r\n  proposalLoadingStatus: VotingStateLoadingStatus.INITIAL,\r\n  proposals: {},\r\n  voteLoadingStatus: VotingStateLoadingStatus.INITIAL,\r\n  votes: {},\r\n}\r\n\r\n// Thunks\r\nexport const fetchProposals = createAsyncThunk<Proposal[], { first?: number; skip?: number; state?: ProposalState }>(\r\n  'voting/fetchProposals',\r\n  async ({ first, skip = 0, state = ProposalState.ACTIVE }) => {\r\n    const response = await getProposals(first, skip, state)\r\n    return response\r\n  },\r\n)\r\n\r\nexport const fetchProposal = createAsyncThunk<Proposal, string>('voting/fetchProposal', async (proposalId) => {\r\n  const response = await getProposal(proposalId)\r\n  return response\r\n})\r\n\r\nexport const fetchVotes = createAsyncThunk<\r\n  { votes: Vote[]; proposalId: string },\r\n  { proposalId: string; block?: number }\r\n>('voting/fetchVotes', async ({ proposalId, block }) => {\r\n  const response = await getAllVotes(proposalId, block)\r\n  return { votes: response, proposalId }\r\n})\r\n\r\nexport const verifyVotes = createAsyncThunk<\r\n  { results: { [key: string]: boolean }; proposalId: string },\r\n  { proposalId: string; snapshot?: string },\r\n  { state: State }\r\n>('voting/verifyVotes', async ({ proposalId, snapshot }, { getState }) => {\r\n  const state = getState()\r\n  const proposalVotes = state.voting.votes[proposalId]\r\n  const response = await getVoteVerificationStatuses(proposalVotes, Number(snapshot))\r\n  return { results: response, proposalId }\r\n})\r\n\r\nexport const votingSlice = createSlice({\r\n  name: 'voting',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    // Verify Votes\r\n    builder.addCase(verifyVotes.fulfilled, (state, action) => {\r\n      const { proposalId, results } = action.payload\r\n\r\n      if (state.votes[proposalId]) {\r\n        state.votes[proposalId] = state.votes[proposalId].map((vote) => {\r\n          return {\r\n            ...vote,\r\n            _inValid: results[vote.id] === false,\r\n          }\r\n        })\r\n      }\r\n    })\r\n\r\n    // Fetch Proposals\r\n    builder.addCase(fetchProposals.pending, (state) => {\r\n      state.proposalLoadingStatus = VotingStateLoadingStatus.LOADING\r\n    })\r\n    builder.addCase(fetchProposals.fulfilled, (state, action) => {\r\n      const proposals = action.payload.reduce((accum, proposal) => {\r\n        return {\r\n          ...accum,\r\n          [proposal.id]: proposal,\r\n        }\r\n      }, {})\r\n\r\n      state.proposals = merge({}, state.proposals, proposals)\r\n      state.proposalLoadingStatus = VotingStateLoadingStatus.IDLE\r\n    })\r\n\r\n    // Fetch Proposal\r\n    builder.addCase(fetchProposal.pending, (state) => {\r\n      state.proposalLoadingStatus = VotingStateLoadingStatus.LOADING\r\n    })\r\n    builder.addCase(fetchProposal.fulfilled, (state, action) => {\r\n      state.proposals[action.payload.id] = action.payload\r\n      state.proposalLoadingStatus = VotingStateLoadingStatus.IDLE\r\n    })\r\n\r\n    // Fetch Votes\r\n    builder.addCase(fetchVotes.pending, (state) => {\r\n      state.voteLoadingStatus = VotingStateLoadingStatus.LOADING\r\n    })\r\n    builder.addCase(fetchVotes.fulfilled, (state, action) => {\r\n      const { votes, proposalId } = action.payload\r\n\r\n      state.votes = {\r\n        ...state.votes,\r\n        [proposalId]: votes,\r\n      }\r\n      state.voteLoadingStatus = VotingStateLoadingStatus.IDLE\r\n    })\r\n  },\r\n})\r\n\r\nexport default votingSlice.reducer\r\n","export const TICKET_LIMIT_PER_REQUEST = 2500\r\nexport const NUM_ROUNDS_TO_CHECK_FOR_REWARDS = 3\r\nexport const NUM_ROUNDS_TO_FETCH_FROM_NODES = 3\r\n","import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport { LotteryStatus, LotteryTicket } from 'config/constants/types'\r\nimport lotteryV2Abi from 'config/abi/lotteryV2.json'\r\nimport { getLotteryV2Address } from 'utils/addressHelpers'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport { LotteryRound, LotteryRoundUserTickets, LotteryResponse } from 'state/types'\r\nimport { getLotteryV2Contract } from 'utils/contractHelpers'\r\nimport { useMemo } from 'react'\r\nimport { ethersToSerializedBigNumber } from 'utils/bigNumber'\r\nimport { NUM_ROUNDS_TO_FETCH_FROM_NODES } from 'config/constants/lottery'\r\n\r\nconst lotteryContract = getLotteryV2Contract()\r\n\r\nconst processViewLotterySuccessResponse = (response, lotteryId: string): LotteryResponse => {\r\n  const {\r\n    status,\r\n    startTime,\r\n    endTime,\r\n    priceTicketInCake,\r\n    discountDivisor,\r\n    treasuryFee,\r\n    firstTicketId,\r\n    lastTicketId,\r\n    amountCollectedInCake,\r\n    finalNumber,\r\n    cakePerBracket,\r\n    countWinnersPerBracket,\r\n    rewardsBreakdown,\r\n  } = response\r\n\r\n  const statusKey = Object.keys(LotteryStatus)[status]\r\n  const serializedCakePerBracket = cakePerBracket.map((cakeInBracket) => ethersToSerializedBigNumber(cakeInBracket))\r\n  const serializedCountWinnersPerBracket = countWinnersPerBracket.map((winnersInBracket) =>\r\n    ethersToSerializedBigNumber(winnersInBracket),\r\n  )\r\n  const serializedRewardsBreakdown = rewardsBreakdown.map((reward) => ethersToSerializedBigNumber(reward))\r\n\r\n  return {\r\n    isLoading: false,\r\n    lotteryId,\r\n    status: LotteryStatus[statusKey],\r\n    startTime: startTime?.toString(),\r\n    endTime: endTime?.toString(),\r\n    priceTicketInCake: ethersToSerializedBigNumber(priceTicketInCake),\r\n    discountDivisor: discountDivisor?.toString(),\r\n    treasuryFee: treasuryFee?.toString(),\r\n    firstTicketId: firstTicketId?.toString(),\r\n    lastTicketId: lastTicketId?.toString(),\r\n    amountCollectedInCake: ethersToSerializedBigNumber(amountCollectedInCake),\r\n    finalNumber,\r\n    cakePerBracket: serializedCakePerBracket,\r\n    countWinnersPerBracket: serializedCountWinnersPerBracket,\r\n    rewardsBreakdown: serializedRewardsBreakdown,\r\n  }\r\n}\r\n\r\nconst processViewLotteryErrorResponse = (lotteryId: string): LotteryResponse => {\r\n  return {\r\n    isLoading: true,\r\n    lotteryId,\r\n    status: LotteryStatus.PENDING,\r\n    startTime: '',\r\n    endTime: '',\r\n    priceTicketInCake: '',\r\n    discountDivisor: '',\r\n    treasuryFee: '',\r\n    firstTicketId: '',\r\n    lastTicketId: '',\r\n    amountCollectedInCake: '',\r\n    finalNumber: null,\r\n    cakePerBracket: [],\r\n    countWinnersPerBracket: [],\r\n    rewardsBreakdown: [],\r\n  }\r\n}\r\n\r\nexport const fetchLottery = async (lotteryId: string): Promise<LotteryResponse> => {\r\n  try {\r\n    const lotteryData = await lotteryContract.viewLottery(lotteryId)\r\n    return processViewLotterySuccessResponse(lotteryData, lotteryId)\r\n  } catch (error) {\r\n    return processViewLotteryErrorResponse(lotteryId)\r\n  }\r\n}\r\n\r\nexport const fetchMultipleLotteries = async (lotteryIds: string[]): Promise<LotteryResponse[]> => {\r\n  const calls = lotteryIds.map((id) => ({\r\n    name: 'viewLottery',\r\n    address: getLotteryV2Address(),\r\n    params: [id],\r\n  }))\r\n  try {\r\n    const multicallRes = await multicallv2(lotteryV2Abi, calls, { requireSuccess: false })\r\n    const processedResponses = multicallRes.map((res, index) =>\r\n      processViewLotterySuccessResponse(res[0], lotteryIds[index]),\r\n    )\r\n    return processedResponses\r\n  } catch (error) {\r\n    console.error(error)\r\n    return calls.map((call, index) => processViewLotteryErrorResponse(lotteryIds[index]))\r\n  }\r\n}\r\n\r\nexport const fetchCurrentLotteryIdAndMaxBuy = async () => {\r\n  try {\r\n    const calls = ['currentLotteryId', 'maxNumberTicketsPerBuyOrClaim'].map((method) => ({\r\n      address: getLotteryV2Address(),\r\n      name: method,\r\n    }))\r\n    const [[currentLotteryId], [maxNumberTicketsPerBuyOrClaim]] = (await multicallv2(\r\n      lotteryV2Abi,\r\n      calls,\r\n    )) as ethers.BigNumber[][]\r\n\r\n    return {\r\n      currentLotteryId: currentLotteryId ? currentLotteryId.toString() : null,\r\n      maxNumberTicketsPerBuyOrClaim: maxNumberTicketsPerBuyOrClaim ? maxNumberTicketsPerBuyOrClaim.toString() : null,\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      currentLotteryId: null,\r\n      maxNumberTicketsPerBuyOrClaim: null,\r\n    }\r\n  }\r\n}\r\n\r\nexport const getRoundIdsArray = (currentLotteryId: string): string[] => {\r\n  const currentIdAsInt = parseInt(currentLotteryId, 10)\r\n  const roundIds = []\r\n  for (let i = 0; i < NUM_ROUNDS_TO_FETCH_FROM_NODES; i++) {\r\n    roundIds.push(currentIdAsInt - i)\r\n  }\r\n  return roundIds.map((roundId) => roundId.toString())\r\n}\r\n\r\nexport const useProcessLotteryResponse = (\r\n  lotteryData: LotteryResponse & { userTickets?: LotteryRoundUserTickets },\r\n): LotteryRound => {\r\n  const {\r\n    priceTicketInCake: priceTicketInCakeAsString,\r\n    discountDivisor: discountDivisorAsString,\r\n    amountCollectedInCake: amountCollectedInCakeAsString,\r\n  } = lotteryData\r\n\r\n  const discountDivisor = useMemo(() => {\r\n    return new BigNumber(discountDivisorAsString)\r\n  }, [discountDivisorAsString])\r\n\r\n  const priceTicketInCake = useMemo(() => {\r\n    return new BigNumber(priceTicketInCakeAsString)\r\n  }, [priceTicketInCakeAsString])\r\n\r\n  const amountCollectedInCake = useMemo(() => {\r\n    return new BigNumber(amountCollectedInCakeAsString)\r\n  }, [amountCollectedInCakeAsString])\r\n\r\n  return {\r\n    isLoading: lotteryData.isLoading,\r\n    lotteryId: lotteryData.lotteryId,\r\n    userTickets: lotteryData.userTickets,\r\n    status: lotteryData.status,\r\n    startTime: lotteryData.startTime,\r\n    endTime: lotteryData.endTime,\r\n    priceTicketInCake,\r\n    discountDivisor,\r\n    treasuryFee: lotteryData.treasuryFee,\r\n    firstTicketId: lotteryData.firstTicketId,\r\n    lastTicketId: lotteryData.lastTicketId,\r\n    amountCollectedInCake,\r\n    finalNumber: lotteryData.finalNumber,\r\n    cakePerBracket: lotteryData.cakePerBracket,\r\n    countWinnersPerBracket: lotteryData.countWinnersPerBracket,\r\n    rewardsBreakdown: lotteryData.rewardsBreakdown,\r\n  }\r\n}\r\n\r\nexport const hasRoundBeenClaimed = (tickets: LotteryTicket[]): boolean => {\r\n  const claimedTickets = tickets.filter((ticket) => ticket.status)\r\n  return claimedTickets.length > 0\r\n}\r\n","import { request, gql } from 'graphql-request'\r\nimport { GRAPH_API_LOTTERY } from 'config/constants/endpoints'\r\nimport { LotteryRoundGraphEntity, LotteryResponse } from 'state/types'\r\nimport { getRoundIdsArray, fetchMultipleLotteries } from './helpers'\r\n\r\nexport const MAX_LOTTERIES_REQUEST_SIZE = 100\r\n\r\n/* eslint-disable camelcase */\r\ntype LotteriesWhere = { id_in?: string[] }\r\n\r\nconst applyNodeDataToLotteriesGraphResponse = (\r\n  nodeData: LotteryResponse[],\r\n  graphResponse: LotteryRoundGraphEntity[],\r\n): LotteryRoundGraphEntity[] => {\r\n  //   If no graph response - return node data\r\n  if (graphResponse.length === 0) {\r\n    return nodeData.map((nodeRound) => {\r\n      return {\r\n        endTime: nodeRound.endTime,\r\n        finalNumber: nodeRound.finalNumber.toString(),\r\n        startTime: nodeRound.startTime,\r\n        status: nodeRound.status,\r\n        id: nodeRound.lotteryId.toString(),\r\n        ticketPrice: nodeRound.priceTicketInCake,\r\n        totalTickets: '',\r\n        totalUsers: '',\r\n        winningTickets: '',\r\n      }\r\n    })\r\n  }\r\n\r\n  // Populate all nodeRound data with supplementary graphResponse round data when available\r\n  const nodeRoundsWithGraphData = nodeData.map((nodeRoundData) => {\r\n    const graphRoundData = graphResponse.find((graphResponseRound) => graphResponseRound.id === nodeRoundData.lotteryId)\r\n    return {\r\n      endTime: nodeRoundData.endTime,\r\n      finalNumber: nodeRoundData.finalNumber.toString(),\r\n      startTime: nodeRoundData.startTime,\r\n      status: nodeRoundData.status,\r\n      id: nodeRoundData.lotteryId,\r\n      ticketPrice: graphRoundData?.ticketPrice,\r\n      totalTickets: graphRoundData?.totalTickets,\r\n      totalUsers: graphRoundData?.totalUsers,\r\n      winningTickets: graphRoundData?.winningTickets,\r\n    }\r\n  })\r\n\r\n  // Return the rounds with combined node + subgraph data, plus all remaining subgraph rounds.\r\n  const [lastCombinedDataRound] = nodeRoundsWithGraphData.slice(-1)\r\n  const lastCombinedDataRoundIndex = graphResponse\r\n    .map((graphRound) => graphRound?.id)\r\n    .indexOf(lastCombinedDataRound?.id)\r\n\r\n  const remainingSubgraphRounds = graphResponse ? graphResponse.splice(lastCombinedDataRoundIndex + 1) : []\r\n  const mergedResponse = [...nodeRoundsWithGraphData, ...remainingSubgraphRounds]\r\n  return mergedResponse\r\n}\r\n\r\nexport const getGraphLotteries = async (\r\n  first = MAX_LOTTERIES_REQUEST_SIZE,\r\n  skip = 0,\r\n  where: LotteriesWhere = {},\r\n): Promise<LotteryRoundGraphEntity[]> => {\r\n  try {\r\n    const response = await request(\r\n      GRAPH_API_LOTTERY,\r\n      gql`\r\n        query getLotteries($first: Int!, $skip: Int!, $where: Lottery_filter) {\r\n          lotteries(first: $first, skip: $skip, where: $where, orderDirection: desc, orderBy: block) {\r\n            id\r\n            totalUsers\r\n            totalTickets\r\n            winningTickets\r\n            status\r\n            finalNumber\r\n            startTime\r\n            endTime\r\n            ticketPrice\r\n          }\r\n        }\r\n      `,\r\n      { skip, first, where },\r\n    )\r\n    return response.lotteries\r\n  } catch (error) {\r\n    console.error(error)\r\n    return []\r\n  }\r\n}\r\n\r\nconst getLotteriesData = async (currentLotteryId: string): Promise<LotteryRoundGraphEntity[]> => {\r\n  const idsForNodesCall = getRoundIdsArray(currentLotteryId)\r\n  const nodeData = await fetchMultipleLotteries(idsForNodesCall)\r\n  const graphResponse = await getGraphLotteries()\r\n  const mergedData = applyNodeDataToLotteriesGraphResponse(nodeData, graphResponse)\r\n  return mergedData\r\n}\r\n\r\nexport default getLotteriesData\r\n","import { TICKET_LIMIT_PER_REQUEST } from 'config/constants/lottery'\r\nimport { LotteryTicket } from 'config/constants/types'\r\nimport { UserTicketsResponse } from 'state/types'\r\nimport { getLotteryV2Contract } from 'utils/contractHelpers'\r\n\r\nconst lotteryContract = getLotteryV2Contract()\r\n\r\nexport const processRawTicketsResponse = (ticketsResponse: UserTicketsResponse): LotteryTicket[] => {\r\n  const [ticketIds, ticketNumbers, ticketStatuses] = ticketsResponse\r\n\r\n  if (ticketIds?.length > 0) {\r\n    return ticketIds.map((ticketId, index) => {\r\n      return {\r\n        id: ticketId.toString(),\r\n        number: ticketNumbers[index].toString(),\r\n        status: ticketStatuses[index],\r\n      }\r\n    })\r\n  }\r\n  return []\r\n}\r\n\r\nexport const viewUserInfoForLotteryId = async (\r\n  account: string,\r\n  lotteryId: string,\r\n  cursor: number,\r\n  perRequestLimit: number,\r\n): Promise<LotteryTicket[]> => {\r\n  try {\r\n    const data = await lotteryContract.viewUserInfoForLotteryId(account, lotteryId, cursor, perRequestLimit)\r\n    return processRawTicketsResponse(data)\r\n  } catch (error) {\r\n    console.error('viewUserInfoForLotteryId', error)\r\n    return null\r\n  }\r\n}\r\n\r\nexport const fetchUserTicketsForOneRound = async (account: string, lotteryId: string): Promise<LotteryTicket[]> => {\r\n  let cursor = 0\r\n  let numReturned = TICKET_LIMIT_PER_REQUEST\r\n  const ticketData = []\r\n\r\n  while (numReturned === TICKET_LIMIT_PER_REQUEST) {\r\n    // eslint-disable-next-line no-await-in-loop\r\n    const response = await viewUserInfoForLotteryId(account, lotteryId, cursor, TICKET_LIMIT_PER_REQUEST)\r\n    cursor += TICKET_LIMIT_PER_REQUEST\r\n    numReturned = response.length\r\n    ticketData.push(...response)\r\n  }\r\n\r\n  return ticketData\r\n}\r\n\r\nexport const fetchUserTicketsForMultipleRounds = async (\r\n  idsToCheck: string[],\r\n  account: string,\r\n): Promise<{ roundId: string; userTickets: LotteryTicket[] }[]> => {\r\n  const ticketsForMultipleRounds = []\r\n  for (let i = 0; i < idsToCheck.length; i += 1) {\r\n    const roundId = idsToCheck[i]\r\n    // eslint-disable-next-line no-await-in-loop\r\n    const ticketsForRound = await fetchUserTicketsForOneRound(account, roundId)\r\n    ticketsForMultipleRounds.push({\r\n      roundId,\r\n      userTickets: ticketsForRound,\r\n    })\r\n  }\r\n  return ticketsForMultipleRounds\r\n}\r\n","import { request, gql } from 'graphql-request'\r\nimport { GRAPH_API_LOTTERY } from 'config/constants/endpoints'\r\nimport { LotteryTicket } from 'config/constants/types'\r\nimport { LotteryUserGraphEntity, LotteryResponse, UserRound } from 'state/types'\r\nimport { getRoundIdsArray, fetchMultipleLotteries, hasRoundBeenClaimed } from './helpers'\r\nimport { fetchUserTicketsForMultipleRounds } from './getUserTicketsData'\r\n\r\nexport const MAX_USER_LOTTERIES_REQUEST_SIZE = 100\r\n\r\n/* eslint-disable camelcase */\r\ntype UserLotteriesWhere = { lottery_in?: string[] }\r\n\r\nconst applyNodeDataToUserGraphResponse = (\r\n  userNodeData: { roundId: string; userTickets: LotteryTicket[] }[],\r\n  userGraphData: UserRound[],\r\n  lotteryNodeData: LotteryResponse[],\r\n): UserRound[] => {\r\n  //   If no graph rounds response - return node data\r\n  if (userGraphData.length === 0) {\r\n    return lotteryNodeData.map((nodeRound) => {\r\n      const ticketDataForRound = userNodeData.find((roundTickets) => roundTickets.roundId === nodeRound.lotteryId)\r\n      return {\r\n        endTime: nodeRound.endTime,\r\n        status: nodeRound.status,\r\n        lotteryId: nodeRound.lotteryId.toString(),\r\n        claimed: hasRoundBeenClaimed(ticketDataForRound.userTickets),\r\n        totalTickets: `${ticketDataForRound.userTickets.length.toString()}`,\r\n        tickets: ticketDataForRound.userTickets,\r\n      }\r\n    })\r\n  }\r\n\r\n  // Return the rounds with combined node + subgraph data, plus all remaining subgraph rounds.\r\n  const nodeRoundsWithGraphData = userNodeData.map((userNodeRound) => {\r\n    const userGraphRound = userGraphData.find(\r\n      (graphResponseRound) => graphResponseRound.lotteryId === userNodeRound.roundId,\r\n    )\r\n    const nodeRoundData = lotteryNodeData.find((nodeRound) => nodeRound.lotteryId === userNodeRound.roundId)\r\n    return {\r\n      endTime: nodeRoundData.endTime,\r\n      status: nodeRoundData.status,\r\n      lotteryId: nodeRoundData.lotteryId.toString(),\r\n      claimed: hasRoundBeenClaimed(userNodeRound.userTickets),\r\n      totalTickets: userGraphRound?.totalTickets || userNodeRound.userTickets.length.toString(),\r\n      tickets: userNodeRound.userTickets,\r\n    }\r\n  })\r\n\r\n  // Return the rounds with combined data, plus all remaining subgraph rounds.\r\n  const [lastCombinedDataRound] = nodeRoundsWithGraphData.slice(-1)\r\n  const lastCombinedDataRoundIndex = userGraphData\r\n    .map((graphRound) => graphRound?.lotteryId)\r\n    .indexOf(lastCombinedDataRound?.lotteryId)\r\n  const remainingSubgraphRounds = userGraphData ? userGraphData.splice(lastCombinedDataRoundIndex + 1) : []\r\n  const mergedResponse = [...nodeRoundsWithGraphData, ...remainingSubgraphRounds]\r\n  return mergedResponse\r\n}\r\n\r\nexport const getGraphLotteryUser = async (\r\n  account: string,\r\n  first = MAX_USER_LOTTERIES_REQUEST_SIZE,\r\n  skip = 0,\r\n  where: UserLotteriesWhere = {},\r\n): Promise<LotteryUserGraphEntity> => {\r\n  let user\r\n  const blankUser = {\r\n    account,\r\n    totalCake: '',\r\n    totalTickets: '',\r\n    rounds: [],\r\n  }\r\n\r\n  try {\r\n    const response = await request(\r\n      GRAPH_API_LOTTERY,\r\n      gql`\r\n        query getUserLotteries($account: ID!, $first: Int!, $skip: Int!, $where: Round_filter) {\r\n          user(id: $account) {\r\n            id\r\n            totalTickets\r\n            totalCake\r\n            rounds(first: $first, skip: $skip, where: $where, orderDirection: desc, orderBy: block) {\r\n              id\r\n              lottery {\r\n                id\r\n                endTime\r\n                status\r\n              }\r\n              claimed\r\n              totalTickets\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { account: account.toLowerCase(), first, skip, where },\r\n    )\r\n    const userRes = response.user\r\n\r\n    // If no user returned - return blank user\r\n    if (!userRes) {\r\n      user = blankUser\r\n    } else {\r\n      user = {\r\n        account: userRes.id,\r\n        totalCake: userRes.totalCake,\r\n        totalTickets: userRes.totalTickets,\r\n        rounds: userRes.rounds.map((round) => {\r\n          return {\r\n            lotteryId: round?.lottery?.id,\r\n            endTime: round?.lottery?.endTime,\r\n            claimed: round?.claimed,\r\n            totalTickets: round?.totalTickets,\r\n            status: round?.lottery?.status.toLowerCase(),\r\n          }\r\n        }),\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error(error)\r\n    user = blankUser\r\n  }\r\n\r\n  return user\r\n}\r\n\r\nconst getUserLotteryData = async (account: string, currentLotteryId: string): Promise<LotteryUserGraphEntity> => {\r\n  const idsForTicketsNodeCall = getRoundIdsArray(currentLotteryId)\r\n  const roundDataAndUserTickets = await fetchUserTicketsForMultipleRounds(idsForTicketsNodeCall, account)\r\n  const userRoundsNodeData = roundDataAndUserTickets.filter((round) => round.userTickets.length > 0)\r\n  const idsForLotteriesNodeCall = userRoundsNodeData.map((round) => round.roundId)\r\n  const lotteriesNodeData = await fetchMultipleLotteries(idsForLotteriesNodeCall)\r\n  const graphResponse = await getGraphLotteryUser(account)\r\n  const mergedRoundData = applyNodeDataToUserGraphResponse(userRoundsNodeData, graphResponse.rounds, lotteriesNodeData)\r\n  const graphResponseWithNodeRounds = { ...graphResponse, rounds: mergedRoundData }\r\n  return graphResponseWithNodeRounds\r\n}\r\n\r\nexport default getUserLotteryData\r\n","/* eslint-disable no-param-reassign */\r\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { LotteryTicket, LotteryStatus } from 'config/constants/types'\r\nimport { LotteryState, LotteryRoundGraphEntity, LotteryUserGraphEntity, LotteryResponse } from 'state/types'\r\nimport { fetchLottery, fetchCurrentLotteryIdAndMaxBuy } from './helpers'\r\nimport getLotteriesData from './getLotteriesData'\r\nimport getUserLotteryData, { getGraphLotteryUser } from './getUserLotteryData'\r\n\r\ninterface PublicLotteryData {\r\n  currentLotteryId: string\r\n  maxNumberTicketsPerBuyOrClaim: string\r\n}\r\n\r\nconst initialState: LotteryState = {\r\n  currentLotteryId: null,\r\n  isTransitioning: false,\r\n  maxNumberTicketsPerBuyOrClaim: null,\r\n  currentRound: {\r\n    isLoading: true,\r\n    lotteryId: null,\r\n    status: LotteryStatus.PENDING,\r\n    startTime: '',\r\n    endTime: '',\r\n    priceTicketInCake: '',\r\n    discountDivisor: '',\r\n    treasuryFee: '',\r\n    firstTicketId: '',\r\n    lastTicketId: '',\r\n    amountCollectedInCake: '',\r\n    finalNumber: null,\r\n    cakePerBracket: [],\r\n    countWinnersPerBracket: [],\r\n    rewardsBreakdown: [],\r\n    userTickets: {\r\n      isLoading: true,\r\n      tickets: [],\r\n    },\r\n  },\r\n  lotteriesData: null,\r\n  userLotteryData: { account: '', totalCake: '', totalTickets: '', rounds: [] },\r\n}\r\n\r\nexport const fetchCurrentLottery = createAsyncThunk<LotteryResponse, { currentLotteryId: string }>(\r\n  'lottery/fetchCurrentLottery',\r\n  async ({ currentLotteryId }) => {\r\n    const lotteryInfo = await fetchLottery(currentLotteryId)\r\n    return lotteryInfo\r\n  },\r\n)\r\n\r\nexport const fetchCurrentLotteryId = createAsyncThunk<PublicLotteryData>('lottery/fetchCurrentLotteryId', async () => {\r\n  const currentIdAndMaxBuy = await fetchCurrentLotteryIdAndMaxBuy()\r\n  return currentIdAndMaxBuy\r\n})\r\n\r\nexport const fetchUserTicketsAndLotteries = createAsyncThunk<\r\n  { userTickets: LotteryTicket[]; userLotteries: LotteryUserGraphEntity },\r\n  { account: string; currentLotteryId: string }\r\n>('lottery/fetchUserTicketsAndLotteries', async ({ account, currentLotteryId }) => {\r\n  const userLotteriesRes = await getUserLotteryData(account, currentLotteryId)\r\n  const userParticipationInCurrentRound = userLotteriesRes.rounds?.find((round) => round.lotteryId === currentLotteryId)\r\n  const userTickets = userParticipationInCurrentRound?.tickets\r\n\r\n  // User has not bought tickets for the current lottery, or there has been an error\r\n  if (!userTickets || userTickets.length === 0) {\r\n    return { userTickets: null, userLotteries: userLotteriesRes }\r\n  }\r\n\r\n  return { userTickets, userLotteries: userLotteriesRes }\r\n})\r\n\r\nexport const fetchPublicLotteries = createAsyncThunk<LotteryRoundGraphEntity[], { currentLotteryId: string }>(\r\n  'lottery/fetchPublicLotteries',\r\n  async ({ currentLotteryId }) => {\r\n    const lotteries = await getLotteriesData(currentLotteryId)\r\n    return lotteries\r\n  },\r\n)\r\n\r\nexport const fetchUserLotteries = createAsyncThunk<\r\n  LotteryUserGraphEntity,\r\n  { account: string; currentLotteryId: string }\r\n>('lottery/fetchUserLotteries', async ({ account, currentLotteryId }) => {\r\n  const userLotteries = await getUserLotteryData(account, currentLotteryId)\r\n  return userLotteries\r\n})\r\n\r\nexport const fetchAdditionalUserLotteries = createAsyncThunk<\r\n  LotteryUserGraphEntity,\r\n  { account: string; skip?: number }\r\n>('lottery/fetchAdditionalUserLotteries', async ({ account, skip }) => {\r\n  const additionalUserLotteries = await getGraphLotteryUser(account, undefined, skip)\r\n  return additionalUserLotteries\r\n})\r\n\r\nexport const setLotteryIsTransitioning = createAsyncThunk<{ isTransitioning: boolean }, { isTransitioning: boolean }>(\r\n  `lottery/setIsTransitioning`,\r\n  async ({ isTransitioning }) => {\r\n    return { isTransitioning }\r\n  },\r\n)\r\n\r\nexport const LotterySlice = createSlice({\r\n  name: 'Lottery',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchCurrentLottery.fulfilled, (state, action: PayloadAction<LotteryResponse>) => {\r\n      state.currentRound = { ...state.currentRound, ...action.payload }\r\n    })\r\n    builder.addCase(fetchCurrentLotteryId.fulfilled, (state, action: PayloadAction<PublicLotteryData>) => {\r\n      state.currentLotteryId = action.payload.currentLotteryId\r\n      state.maxNumberTicketsPerBuyOrClaim = action.payload.maxNumberTicketsPerBuyOrClaim\r\n    })\r\n    builder.addCase(\r\n      fetchUserTicketsAndLotteries.fulfilled,\r\n      (state, action: PayloadAction<{ userTickets: LotteryTicket[]; userLotteries: LotteryUserGraphEntity }>) => {\r\n        state.currentRound.userTickets.isLoading = false\r\n        state.currentRound.userTickets.tickets = action.payload.userTickets\r\n        state.userLotteryData = action.payload.userLotteries\r\n      },\r\n    )\r\n    builder.addCase(fetchPublicLotteries.fulfilled, (state, action: PayloadAction<LotteryRoundGraphEntity[]>) => {\r\n      state.lotteriesData = action.payload\r\n    })\r\n    builder.addCase(fetchUserLotteries.fulfilled, (state, action: PayloadAction<LotteryUserGraphEntity>) => {\r\n      state.userLotteryData = action.payload\r\n    })\r\n    builder.addCase(fetchAdditionalUserLotteries.fulfilled, (state, action: PayloadAction<LotteryUserGraphEntity>) => {\r\n      const mergedRounds = [...state.userLotteryData.rounds, ...action.payload.rounds]\r\n      state.userLotteryData.rounds = mergedRounds\r\n    })\r\n    builder.addCase(\r\n      setLotteryIsTransitioning.fulfilled,\r\n      (state, action: PayloadAction<{ isTransitioning: boolean }>) => {\r\n        state.isTransitioning = action.payload.isTransitioning\r\n      },\r\n    )\r\n  },\r\n})\r\n\r\nexport default LotterySlice.reducer\r\n","import { createAction } from '@reduxjs/toolkit'\r\nimport { Transaction } from 'state/info/types'\r\nimport { ProtocolData, TokenData, PoolData, ChartEntry, PriceChartEntry } from './types'\r\n\r\nexport const updateProtocolData = createAction<{ protocolData: ProtocolData }>('info/protocol/updateProtocolData')\r\nexport const updateProtocolChartData = createAction<{ chartData: ChartEntry[] }>(\r\n  'info/protocol/updateProtocolChartData',\r\n)\r\nexport const updateProtocolTransactions = createAction<{ transactions: Transaction[] }>(\r\n  'info/protocol/updateProtocolTransactions',\r\n)\r\n\r\nexport const updatePoolData = createAction<{ pools: PoolData[] }>('info/pools/updatePoolData')\r\nexport const addPoolKeys = createAction<{ poolAddresses: string[] }>('info/pools/addPoolKeys')\r\nexport const updatePoolChartData = createAction<{ poolAddress: string; chartData: ChartEntry[] }>(\r\n  'info/pools/updatePoolChartData',\r\n)\r\nexport const updatePoolTransactions = createAction<{ poolAddress: string; transactions: Transaction[] }>(\r\n  'info/pools/updatePoolTransactions',\r\n)\r\n\r\nexport const updateTokenData = createAction<{ tokens: TokenData[] }>('info/tokens/updateTokenData')\r\nexport const addTokenKeys = createAction<{ tokenAddresses: string[] }>('info/tokens/addTokenKeys')\r\nexport const addTokenPoolAddresses = createAction<{ tokenAddress: string; poolAddresses: string[] }>(\r\n  'info/tokens/addTokenPoolAddresses',\r\n)\r\nexport const updateTokenChartData = createAction<{ tokenAddress: string; chartData: ChartEntry[] }>(\r\n  'info/tokens/updateTokenChartData',\r\n)\r\nexport const updateTokenTransactions = createAction<{ tokenAddress: string; transactions: Transaction[] }>(\r\n  'info/tokens/updateTokenTransactions',\r\n)\r\nexport const updateTokenPriceData = createAction<{\r\n  tokenAddress: string\r\n  secondsInterval: number\r\n  priceData?: PriceChartEntry[]\r\n  oldestFetchedTimestamp: number\r\n}>('info/tokens/updateTokenPriceData')\r\n","/* eslint-disable no-param-reassign */\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport { InfoState } from './types'\r\nimport {\r\n  updateProtocolData,\r\n  updateProtocolChartData,\r\n  updateProtocolTransactions,\r\n  updatePoolData,\r\n  addPoolKeys,\r\n  updatePoolChartData,\r\n  updatePoolTransactions,\r\n  updateTokenData,\r\n  addTokenKeys,\r\n  addTokenPoolAddresses,\r\n  updateTokenChartData,\r\n  updateTokenPriceData,\r\n  updateTokenTransactions,\r\n} from './actions'\r\n\r\nconst initialState: InfoState = {\r\n  protocol: {\r\n    overview: undefined,\r\n    chartData: undefined,\r\n    transactions: undefined,\r\n  },\r\n  pools: { byAddress: {} },\r\n  tokens: { byAddress: {} },\r\n}\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    // Protocol actions\r\n    .addCase(updateProtocolData, (state, { payload: { protocolData } }) => {\r\n      state.protocol.overview = protocolData\r\n    })\r\n    .addCase(updateProtocolChartData, (state, { payload: { chartData } }) => {\r\n      state.protocol.chartData = chartData\r\n    })\r\n    .addCase(updateProtocolTransactions, (state, { payload: { transactions } }) => {\r\n      state.protocol.transactions = transactions\r\n    })\r\n    // Pools actions\r\n    .addCase(updatePoolData, (state, { payload: { pools } }) => {\r\n      pools.forEach((poolData) => {\r\n        state.pools.byAddress[poolData.address] = {\r\n          ...state.pools.byAddress[poolData.address],\r\n          data: poolData,\r\n        }\r\n      })\r\n    })\r\n    .addCase(addPoolKeys, (state, { payload: { poolAddresses } }) => {\r\n      poolAddresses.forEach((address) => {\r\n        if (!state.pools.byAddress[address]) {\r\n          state.pools.byAddress[address] = {\r\n            data: undefined,\r\n            chartData: undefined,\r\n            transactions: undefined,\r\n          }\r\n        }\r\n      })\r\n    })\r\n    .addCase(updatePoolChartData, (state, { payload: { poolAddress, chartData } }) => {\r\n      state.pools.byAddress[poolAddress] = { ...state.pools.byAddress[poolAddress], chartData }\r\n    })\r\n    .addCase(updatePoolTransactions, (state, { payload: { poolAddress, transactions } }) => {\r\n      state.pools.byAddress[poolAddress] = { ...state.pools.byAddress[poolAddress], transactions }\r\n    })\r\n    // Tokens actions\r\n    .addCase(updateTokenData, (state, { payload: { tokens } }) => {\r\n      tokens.forEach((tokenData) => {\r\n        state.tokens.byAddress[tokenData.address] = {\r\n          ...state.tokens.byAddress[tokenData.address],\r\n          data: tokenData,\r\n        }\r\n      })\r\n    })\r\n    .addCase(addTokenKeys, (state, { payload: { tokenAddresses } }) => {\r\n      tokenAddresses.forEach((address) => {\r\n        if (!state.tokens.byAddress[address]) {\r\n          state.tokens.byAddress[address] = {\r\n            poolAddresses: undefined,\r\n            data: undefined,\r\n            chartData: undefined,\r\n            priceData: {},\r\n            transactions: undefined,\r\n          }\r\n        }\r\n      })\r\n    })\r\n    .addCase(addTokenPoolAddresses, (state, { payload: { tokenAddress, poolAddresses } }) => {\r\n      state.tokens.byAddress[tokenAddress] = { ...state.tokens.byAddress[tokenAddress], poolAddresses }\r\n    })\r\n    .addCase(updateTokenChartData, (state, { payload: { tokenAddress, chartData } }) => {\r\n      state.tokens.byAddress[tokenAddress] = { ...state.tokens.byAddress[tokenAddress], chartData }\r\n    })\r\n    .addCase(updateTokenTransactions, (state, { payload: { tokenAddress, transactions } }) => {\r\n      state.tokens.byAddress[tokenAddress] = { ...state.tokens.byAddress[tokenAddress], transactions }\r\n    })\r\n    .addCase(\r\n      updateTokenPriceData,\r\n      (state, { payload: { tokenAddress, secondsInterval, priceData, oldestFetchedTimestamp } }) => {\r\n        state.tokens.byAddress[tokenAddress] = {\r\n          ...state.tokens.byAddress[tokenAddress],\r\n          priceData: {\r\n            ...state.tokens.byAddress[tokenAddress]?.priceData,\r\n            [secondsInterval]: priceData,\r\n            oldestFetchedTimestamp,\r\n          },\r\n        }\r\n      },\r\n    ),\r\n)\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\n// fired once when the app reloads but before the app renders\r\n// allows any updates to be applied to store data loaded from localStorage\r\nexport const updateVersion = createAction<void>('global/updateVersion')\r\n\r\nexport default updateVersion\r\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport { SerializedToken } from 'config/constants/types'\r\nimport { DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../../config/constants'\r\nimport { updateVersion } from '../global/actions'\r\nimport {\r\n  addSerializedPair,\r\n  addSerializedToken,\r\n  addWatchlistPool,\r\n  addWatchlistToken,\r\n  FarmStakedOnly,\r\n  removeSerializedPair,\r\n  removeSerializedToken,\r\n  SerializedPair,\r\n  muteAudio,\r\n  toggleTheme,\r\n  unmuteAudio,\r\n  updateGasPrice,\r\n  updateUserDeadline,\r\n  updateUserExpertMode,\r\n  updateUserFarmStakedOnly,\r\n  updateUserFarmsViewMode,\r\n  updateUserPoolStakedOnly,\r\n  updateUserPoolsViewMode,\r\n  updateUserSingleHopOnly,\r\n  updateUserSlippageTolerance,\r\n  ViewMode,\r\n  updateUserPredictionAcceptedRisk,\r\n  updateUserPredictionChartDisclaimerShow,\r\n  updateUserUsernameVisibility,\r\n  updateUserExpertModeAcknowledgementShow,\r\n  hidePhishingWarningBanner,\r\n  setIsExchangeChartDisplayed,\r\n  setChartViewMode,\r\n  ChartViewMode,\r\n  setSubgraphHealthIndicatorDisplayed,\r\n} from './actions'\r\nimport { GAS_PRICE_GWEI } from './hooks/helpers'\r\n\r\nconst currentTimestamp = () => new Date().getTime()\r\n\r\nexport interface UserState {\r\n  // the timestamp of the last updateVersion action\r\n  lastUpdateVersionTimestamp?: number\r\n\r\n  userExpertMode: boolean\r\n\r\n  // only allow swaps on direct pairs\r\n  userSingleHopOnly: boolean\r\n\r\n  // user defined slippage tolerance in bips, used in all txns\r\n  userSlippageTolerance: number\r\n\r\n  // deadline set by user in minutes, used in all txns\r\n  userDeadline: number\r\n\r\n  tokens: {\r\n    [chainId: number]: {\r\n      [address: string]: SerializedToken\r\n    }\r\n  }\r\n\r\n  pairs: {\r\n    [chainId: number]: {\r\n      // keyed by token0Address:token1Address\r\n      [key: string]: SerializedPair\r\n    }\r\n  }\r\n\r\n  timestamp: number\r\n  audioPlay: boolean\r\n  isDark: boolean\r\n  isExchangeChartDisplayed: boolean\r\n  isSubgraphHealthIndicatorDisplayed: boolean\r\n  userChartViewMode: ChartViewMode\r\n  userFarmStakedOnly: FarmStakedOnly\r\n  userPoolStakedOnly: boolean\r\n  userPoolsViewMode: ViewMode\r\n  userFarmsViewMode: ViewMode\r\n  userPredictionAcceptedRisk: boolean\r\n  userPredictionChartDisclaimerShow: boolean\r\n  userExpertModeAcknowledgementShow: boolean\r\n  userUsernameVisibility: boolean\r\n  gasPrice: string\r\n  watchlistTokens: string[]\r\n  watchlistPools: string[]\r\n  showPhishingWarningBanner: boolean\r\n}\r\n\r\nfunction pairKey(token0Address: string, token1Address: string) {\r\n  return `${token0Address};${token1Address}`\r\n}\r\n\r\nexport const initialState: UserState = {\r\n  userExpertMode: false,\r\n  userSingleHopOnly: false,\r\n  userSlippageTolerance: INITIAL_ALLOWED_SLIPPAGE,\r\n  userDeadline: DEFAULT_DEADLINE_FROM_NOW,\r\n  tokens: {},\r\n  pairs: {},\r\n  timestamp: currentTimestamp(),\r\n  audioPlay: true,\r\n  isDark: false,\r\n  isExchangeChartDisplayed: true,\r\n  isSubgraphHealthIndicatorDisplayed: false,\r\n  userChartViewMode: ChartViewMode.BASIC,\r\n  userFarmStakedOnly: FarmStakedOnly.ON_FINISHED,\r\n  userPoolStakedOnly: false,\r\n  userPoolsViewMode: ViewMode.TABLE,\r\n  userFarmsViewMode: ViewMode.TABLE,\r\n  userPredictionAcceptedRisk: false,\r\n  userPredictionChartDisclaimerShow: true,\r\n  userExpertModeAcknowledgementShow: true,\r\n  userUsernameVisibility: false,\r\n  gasPrice: GAS_PRICE_GWEI.default,\r\n  watchlistTokens: [],\r\n  watchlistPools: [],\r\n  showPhishingWarningBanner: true,\r\n}\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(updateVersion, (state) => {\r\n      // slippage isnt being tracked in local storage, reset to default\r\n      // noinspection SuspiciousTypeOfGuard\r\n      if (typeof state.userSlippageTolerance !== 'number') {\r\n        state.userSlippageTolerance = INITIAL_ALLOWED_SLIPPAGE\r\n      }\r\n\r\n      // deadline isnt being tracked in local storage, reset to default\r\n      // noinspection SuspiciousTypeOfGuard\r\n      if (typeof state.userDeadline !== 'number') {\r\n        state.userDeadline = DEFAULT_DEADLINE_FROM_NOW\r\n      }\r\n\r\n      state.lastUpdateVersionTimestamp = currentTimestamp()\r\n    })\r\n    .addCase(updateUserExpertMode, (state, action) => {\r\n      state.userExpertMode = action.payload.userExpertMode\r\n      state.timestamp = currentTimestamp()\r\n    })\r\n    .addCase(updateUserSlippageTolerance, (state, action) => {\r\n      state.userSlippageTolerance = action.payload.userSlippageTolerance\r\n      state.timestamp = currentTimestamp()\r\n    })\r\n    .addCase(updateUserDeadline, (state, action) => {\r\n      state.userDeadline = action.payload.userDeadline\r\n      state.timestamp = currentTimestamp()\r\n    })\r\n    .addCase(updateUserSingleHopOnly, (state, action) => {\r\n      state.userSingleHopOnly = action.payload.userSingleHopOnly\r\n    })\r\n    .addCase(addSerializedToken, (state, { payload: { serializedToken } }) => {\r\n      if (!state.tokens) {\r\n        state.tokens = {}\r\n      }\r\n      state.tokens[serializedToken.chainId] = state.tokens[serializedToken.chainId] || {}\r\n      state.tokens[serializedToken.chainId][serializedToken.address] = serializedToken\r\n      state.timestamp = currentTimestamp()\r\n    })\r\n    .addCase(removeSerializedToken, (state, { payload: { address, chainId } }) => {\r\n      if (!state.tokens) {\r\n        state.tokens = {}\r\n      }\r\n      state.tokens[chainId] = state.tokens[chainId] || {}\r\n      delete state.tokens[chainId][address]\r\n      state.timestamp = currentTimestamp()\r\n    })\r\n    .addCase(addSerializedPair, (state, { payload: { serializedPair } }) => {\r\n      if (\r\n        serializedPair.token0.chainId === serializedPair.token1.chainId &&\r\n        serializedPair.token0.address !== serializedPair.token1.address\r\n      ) {\r\n        const { chainId } = serializedPair.token0\r\n        state.pairs[chainId] = state.pairs[chainId] || {}\r\n        state.pairs[chainId][pairKey(serializedPair.token0.address, serializedPair.token1.address)] = serializedPair\r\n      }\r\n      state.timestamp = currentTimestamp()\r\n    })\r\n    .addCase(removeSerializedPair, (state, { payload: { chainId, tokenAAddress, tokenBAddress } }) => {\r\n      if (state.pairs[chainId]) {\r\n        // just delete both keys if either exists\r\n        delete state.pairs[chainId][pairKey(tokenAAddress, tokenBAddress)]\r\n        delete state.pairs[chainId][pairKey(tokenBAddress, tokenAAddress)]\r\n      }\r\n      state.timestamp = currentTimestamp()\r\n    })\r\n    .addCase(muteAudio, (state) => {\r\n      state.audioPlay = false\r\n    })\r\n    .addCase(unmuteAudio, (state) => {\r\n      state.audioPlay = true\r\n    })\r\n    .addCase(toggleTheme, (state) => {\r\n      state.isDark = !state.isDark\r\n    })\r\n    .addCase(updateUserFarmStakedOnly, (state, { payload: { userFarmStakedOnly } }) => {\r\n      state.userFarmStakedOnly = userFarmStakedOnly\r\n    })\r\n    .addCase(updateUserPoolStakedOnly, (state, { payload: { userPoolStakedOnly } }) => {\r\n      state.userPoolStakedOnly = userPoolStakedOnly\r\n    })\r\n    .addCase(updateUserPoolsViewMode, (state, { payload: { userPoolsViewMode } }) => {\r\n      state.userPoolsViewMode = userPoolsViewMode\r\n    })\r\n    .addCase(updateUserFarmsViewMode, (state, { payload: { userFarmsViewMode } }) => {\r\n      state.userFarmsViewMode = userFarmsViewMode\r\n    })\r\n    .addCase(updateUserPredictionAcceptedRisk, (state, { payload: { userAcceptedRisk } }) => {\r\n      state.userPredictionAcceptedRisk = userAcceptedRisk\r\n    })\r\n    .addCase(updateUserPredictionChartDisclaimerShow, (state, { payload: { userShowDisclaimer } }) => {\r\n      state.userPredictionChartDisclaimerShow = userShowDisclaimer\r\n    })\r\n    .addCase(updateUserExpertModeAcknowledgementShow, (state, { payload: { userExpertModeAcknowledgementShow } }) => {\r\n      state.userExpertModeAcknowledgementShow = userExpertModeAcknowledgementShow\r\n    })\r\n    .addCase(updateUserUsernameVisibility, (state, { payload: { userUsernameVisibility } }) => {\r\n      state.userUsernameVisibility = userUsernameVisibility\r\n    })\r\n    .addCase(updateGasPrice, (state, action) => {\r\n      state.gasPrice = action.payload.gasPrice\r\n    })\r\n    .addCase(addWatchlistToken, (state, { payload: { address } }) => {\r\n      // state.watchlistTokens can be undefined for pre-loaded localstorage user state\r\n      const tokenWatchlist = state.watchlistTokens ?? []\r\n      if (!tokenWatchlist.includes(address)) {\r\n        state.watchlistTokens = [...tokenWatchlist, address]\r\n      } else {\r\n        // Remove token from watchlist\r\n        const newTokens = state.watchlistTokens.filter((x) => x !== address)\r\n        state.watchlistTokens = newTokens\r\n      }\r\n    })\r\n    .addCase(addWatchlistPool, (state, { payload: { address } }) => {\r\n      // state.watchlistPools can be undefined for pre-loaded localstorage user state\r\n      const poolsWatchlist = state.watchlistPools ?? []\r\n      if (!poolsWatchlist.includes(address)) {\r\n        state.watchlistPools = [...poolsWatchlist, address]\r\n      } else {\r\n        // Remove pool from watchlist\r\n        const newPools = state.watchlistPools.filter((x) => x !== address)\r\n        state.watchlistPools = newPools\r\n      }\r\n    })\r\n    .addCase(hidePhishingWarningBanner, (state) => {\r\n      state.showPhishingWarningBanner = false\r\n    })\r\n    .addCase(setIsExchangeChartDisplayed, (state, { payload }) => {\r\n      state.isExchangeChartDisplayed = payload\r\n    })\r\n    .addCase(setChartViewMode, (state, { payload }) => {\r\n      state.userChartViewMode = payload\r\n    })\r\n    .addCase(setSubgraphHealthIndicatorDisplayed, (state, { payload }) => {\r\n      state.isSubgraphHealthIndicatorDisplayed = payload\r\n    }),\r\n)\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport enum Field {\r\n  CURRENCY_A = 'CURRENCY_A',\r\n  CURRENCY_B = 'CURRENCY_B',\r\n}\r\n\r\nexport const typeInput = createAction<{ field: Field; typedValue: string; noLiquidity: boolean }>('mint/typeInputMint')\r\nexport const resetMintState = createAction<void>('mint/resetMintState')\r\n","/* eslint-disable no-param-reassign */\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport {\r\n  addTransaction,\r\n  checkedTransaction,\r\n  clearAllTransactions,\r\n  finalizeTransaction,\r\n  SerializableTransactionReceipt,\r\n} from './actions'\r\n\r\nconst now = () => new Date().getTime()\r\n\r\nexport interface TransactionDetails {\r\n  hash: string\r\n  approval?: { tokenAddress: string; spender: string }\r\n  summary?: string\r\n  claim?: { recipient: string }\r\n  receipt?: SerializableTransactionReceipt\r\n  lastCheckedBlockNumber?: number\r\n  addedTime: number\r\n  confirmedTime?: number\r\n  from: string\r\n}\r\n\r\nexport interface TransactionState {\r\n  [chainId: number]: {\r\n    [txHash: string]: TransactionDetails\r\n  }\r\n}\r\n\r\nexport const initialState: TransactionState = {}\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary, claim } }) => {\r\n      if (transactions[chainId]?.[hash]) {\r\n        throw Error('Attempted to add existing transaction.')\r\n      }\r\n      const txs = transactions[chainId] ?? {}\r\n      txs[hash] = { hash, approval, summary, claim, from, addedTime: now() }\r\n      transactions[chainId] = txs\r\n    })\r\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\r\n      if (!transactions[chainId]) return\r\n      transactions[chainId] = {}\r\n    })\r\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\r\n      const tx = transactions[chainId]?.[hash]\r\n      if (!tx) {\r\n        return\r\n      }\r\n      if (!tx.lastCheckedBlockNumber) {\r\n        tx.lastCheckedBlockNumber = blockNumber\r\n      } else {\r\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\r\n      }\r\n    })\r\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\r\n      const tx = transactions[chainId]?.[hash]\r\n      if (!tx) {\r\n        return\r\n      }\r\n      tx.receipt = receipt\r\n      tx.confirmedTime = now()\r\n    }),\r\n)\r\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport {\r\n  Field,\r\n  replaceSwapState,\r\n  selectCurrency,\r\n  setRecipient,\r\n  switchCurrencies,\r\n  typeInput,\r\n  updateDerivedPairData,\r\n  updatePairData,\r\n} from './actions'\r\nimport { DerivedPairDataNormalized, PairDataNormalized } from './types'\r\n\r\nexport interface SwapState {\r\n  readonly independentField: Field\r\n  readonly typedValue: string\r\n  readonly [Field.INPUT]: {\r\n    readonly currencyId: string | undefined\r\n  }\r\n  readonly [Field.OUTPUT]: {\r\n    readonly currencyId: string | undefined\r\n  }\r\n  // the typed recipient address or ENS name, or null if swap should go to sender\r\n  readonly recipient: string | null\r\n  readonly pairDataById: Record<number, Record<string, PairDataNormalized>> | null\r\n  readonly derivedPairDataById: Record<number, Record<string, DerivedPairDataNormalized>> | null\r\n}\r\n\r\nconst initialState: SwapState = {\r\n  independentField: Field.INPUT,\r\n  typedValue: '',\r\n  [Field.INPUT]: {\r\n    currencyId: '',\r\n  },\r\n  [Field.OUTPUT]: {\r\n    currencyId: '',\r\n  },\r\n  pairDataById: {},\r\n  derivedPairDataById: {},\r\n  recipient: null,\r\n}\r\n\r\nexport default createReducer<SwapState>(initialState, (builder) =>\r\n  builder\r\n    .addCase(\r\n      replaceSwapState,\r\n      (state, { payload: { typedValue, recipient, field, inputCurrencyId, outputCurrencyId } }) => {\r\n        return {\r\n          [Field.INPUT]: {\r\n            currencyId: inputCurrencyId,\r\n          },\r\n          [Field.OUTPUT]: {\r\n            currencyId: outputCurrencyId,\r\n          },\r\n          independentField: field,\r\n          typedValue,\r\n          recipient,\r\n          pairDataById: state.pairDataById,\r\n          derivedPairDataById: state.derivedPairDataById,\r\n        }\r\n      },\r\n    )\r\n    .addCase(selectCurrency, (state, { payload: { currencyId, field } }) => {\r\n      const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT\r\n      if (currencyId === state[otherField].currencyId) {\r\n        // the case where we have to swap the order\r\n        return {\r\n          ...state,\r\n          independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\r\n          [field]: { currencyId },\r\n          [otherField]: { currencyId: state[field].currencyId },\r\n        }\r\n      }\r\n      // the normal case\r\n      return {\r\n        ...state,\r\n        [field]: { currencyId },\r\n      }\r\n    })\r\n    .addCase(switchCurrencies, (state) => {\r\n      return {\r\n        ...state,\r\n        independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\r\n        [Field.INPUT]: { currencyId: state[Field.OUTPUT].currencyId },\r\n        [Field.OUTPUT]: { currencyId: state[Field.INPUT].currencyId },\r\n      }\r\n    })\r\n    .addCase(typeInput, (state, { payload: { field, typedValue } }) => {\r\n      return {\r\n        ...state,\r\n        independentField: field,\r\n        typedValue,\r\n      }\r\n    })\r\n    .addCase(setRecipient, (state, { payload: { recipient } }) => {\r\n      state.recipient = recipient\r\n    })\r\n    .addCase(updatePairData, (state, { payload: { pairData, pairId, timeWindow } }) => {\r\n      if (!state.pairDataById[pairId]) {\r\n        state.pairDataById[pairId] = {}\r\n      }\r\n      state.pairDataById[pairId][timeWindow] = pairData\r\n    })\r\n    .addCase(updateDerivedPairData, (state, { payload: { pairData, pairId, timeWindow } }) => {\r\n      if (!state.derivedPairDataById[pairId]) {\r\n        state.derivedPairDataById[pairId] = {}\r\n      }\r\n      state.derivedPairDataById[pairId][timeWindow] = pairData\r\n    }),\r\n)\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport enum Field {\r\n  LIQUIDITY_PERCENT = 'LIQUIDITY_PERCENT',\r\n  LIQUIDITY = 'LIQUIDITY',\r\n  CURRENCY_A = 'CURRENCY_A',\r\n  CURRENCY_B = 'CURRENCY_B',\r\n}\r\n\r\nexport const typeInput = createAction<{ field: Field; typedValue: string }>('burn/typeInputBurn')\r\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport { Field, resetMintState, typeInput } from './actions'\r\n\r\nexport interface MintState {\r\n  readonly independentField: Field\r\n  readonly typedValue: string\r\n  readonly otherTypedValue: string // for the case when there's no liquidity\r\n}\r\n\r\nconst initialState: MintState = {\r\n  independentField: Field.CURRENCY_A,\r\n  typedValue: '',\r\n  otherTypedValue: '',\r\n}\r\n\r\nexport default createReducer<MintState>(initialState, (builder) =>\r\n  builder\r\n    .addCase(resetMintState, () => initialState)\r\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\r\n      if (noLiquidity) {\r\n        // they're typing into the field they've last typed in\r\n        if (field === state.independentField) {\r\n          return {\r\n            ...state,\r\n            independentField: field,\r\n            typedValue,\r\n          }\r\n        }\r\n        // they're typing into a new field, store the other value\r\n\r\n        return {\r\n          ...state,\r\n          independentField: field,\r\n          typedValue,\r\n          otherTypedValue: state.typedValue,\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        independentField: field,\r\n        typedValue,\r\n        otherTypedValue: '',\r\n      }\r\n    }),\r\n)\r\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { TokenList } from '@uniswap/token-lists/dist/types'\r\nimport { DEFAULT_ACTIVE_LIST_URLS, UNSUPPORTED_LIST_URLS, DEFAULT_LIST_OF_LISTS } from '../../config/constants/lists'\r\n\r\nimport { updateVersion } from '../global/actions'\r\nimport { acceptListUpdate, addList, fetchTokenList, removeList, enableList, disableList } from './actions'\r\n\r\nexport interface ListsState {\r\n  readonly byUrl: {\r\n    readonly [url: string]: {\r\n      readonly current: TokenList | null\r\n      readonly pendingUpdate: TokenList | null\r\n      readonly loadingRequestId: string | null\r\n      readonly error: string | null\r\n    }\r\n  }\r\n  // this contains the default list of lists from the last time the updateVersion was called, i.e. the app was reloaded\r\n  readonly lastInitializedDefaultListOfLists?: string[]\r\n\r\n  // currently active lists\r\n  readonly activeListUrls: string[] | undefined\r\n}\r\n\r\ntype ListState = ListsState['byUrl'][string]\r\n\r\nconst NEW_LIST_STATE: ListState = {\r\n  error: null,\r\n  current: null,\r\n  loadingRequestId: null,\r\n  pendingUpdate: null,\r\n}\r\n\r\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer U> ? U[] : T[P] }\r\n\r\nexport const initialState: ListsState = {\r\n  lastInitializedDefaultListOfLists: DEFAULT_LIST_OF_LISTS,\r\n  byUrl: {\r\n    ...DEFAULT_LIST_OF_LISTS.concat(...UNSUPPORTED_LIST_URLS).reduce<Mutable<ListsState['byUrl']>>((memo, listUrl) => {\r\n      memo[listUrl] = NEW_LIST_STATE\r\n      return memo\r\n    }, {}),\r\n  },\r\n  activeListUrls: DEFAULT_ACTIVE_LIST_URLS,\r\n}\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(fetchTokenList.pending, (state, { payload: { requestId, url } }) => {\r\n      state.byUrl[url] = {\r\n        current: null,\r\n        pendingUpdate: null,\r\n        ...state.byUrl[url],\r\n        loadingRequestId: requestId,\r\n        error: null,\r\n      }\r\n    })\r\n    .addCase(fetchTokenList.fulfilled, (state, { payload: { requestId, tokenList, url } }) => {\r\n      const current = state.byUrl[url]?.current\r\n      const loadingRequestId = state.byUrl[url]?.loadingRequestId\r\n\r\n      // no-op if update does nothing\r\n      if (current) {\r\n        const upgradeType = getVersionUpgrade(current.version, tokenList.version)\r\n\r\n        if (upgradeType === VersionUpgrade.NONE) return\r\n        if (loadingRequestId === null || loadingRequestId === requestId) {\r\n          state.byUrl[url] = {\r\n            ...state.byUrl[url],\r\n            loadingRequestId: null,\r\n            error: null,\r\n            current,\r\n            pendingUpdate: tokenList,\r\n          }\r\n        }\r\n      } else {\r\n        // activate if on default active\r\n        if (DEFAULT_ACTIVE_LIST_URLS.includes(url)) {\r\n          state.activeListUrls?.push(url)\r\n        }\r\n\r\n        state.byUrl[url] = {\r\n          ...state.byUrl[url],\r\n          loadingRequestId: null,\r\n          error: null,\r\n          current: tokenList,\r\n          pendingUpdate: null,\r\n        }\r\n      }\r\n    })\r\n    .addCase(fetchTokenList.rejected, (state, { payload: { url, requestId, errorMessage } }) => {\r\n      if (state.byUrl[url]?.loadingRequestId !== requestId) {\r\n        // no-op since it's not the latest request\r\n        return\r\n      }\r\n\r\n      state.byUrl[url] = {\r\n        ...state.byUrl[url],\r\n        loadingRequestId: null,\r\n        error: errorMessage,\r\n        current: null,\r\n        pendingUpdate: null,\r\n      }\r\n    })\r\n    .addCase(addList, (state, { payload: url }) => {\r\n      if (!state.byUrl[url]) {\r\n        state.byUrl[url] = NEW_LIST_STATE\r\n      }\r\n    })\r\n    .addCase(removeList, (state, { payload: url }) => {\r\n      if (state.byUrl[url]) {\r\n        delete state.byUrl[url]\r\n      }\r\n      // remove list from active urls if needed\r\n      if (state.activeListUrls && state.activeListUrls.includes(url)) {\r\n        state.activeListUrls = state.activeListUrls.filter((u) => u !== url)\r\n      }\r\n    })\r\n    .addCase(enableList, (state, { payload: url }) => {\r\n      if (!state.byUrl[url]) {\r\n        state.byUrl[url] = NEW_LIST_STATE\r\n      }\r\n\r\n      if (state.activeListUrls && !state.activeListUrls.includes(url)) {\r\n        state.activeListUrls.push(url)\r\n      }\r\n\r\n      if (!state.activeListUrls) {\r\n        state.activeListUrls = [url]\r\n      }\r\n    })\r\n    .addCase(disableList, (state, { payload: url }) => {\r\n      if (state.activeListUrls && state.activeListUrls.includes(url)) {\r\n        state.activeListUrls = state.activeListUrls.filter((u) => u !== url)\r\n      }\r\n    })\r\n    .addCase(acceptListUpdate, (state, { payload: url }) => {\r\n      if (!state.byUrl[url]?.pendingUpdate) {\r\n        throw new Error('accept list update called without pending update')\r\n      }\r\n      state.byUrl[url] = {\r\n        ...state.byUrl[url],\r\n        pendingUpdate: null,\r\n        current: state.byUrl[url].pendingUpdate,\r\n      }\r\n    })\r\n    .addCase(updateVersion, (state) => {\r\n      // state loaded from localStorage, but new lists have never been initialized\r\n      if (!state.lastInitializedDefaultListOfLists) {\r\n        state.byUrl = initialState.byUrl\r\n        state.activeListUrls = initialState.activeListUrls\r\n      } else if (state.lastInitializedDefaultListOfLists) {\r\n        const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce<Set<string>>(\r\n          (s, l) => s.add(l),\r\n          new Set(),\r\n        )\r\n        const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce<Set<string>>((s, l) => s.add(l), new Set())\r\n\r\n        DEFAULT_LIST_OF_LISTS.forEach((listUrl) => {\r\n          if (!lastInitializedSet.has(listUrl)) {\r\n            state.byUrl[listUrl] = NEW_LIST_STATE\r\n          }\r\n        })\r\n\r\n        state.lastInitializedDefaultListOfLists.forEach((listUrl) => {\r\n          if (!newListOfListsSet.has(listUrl)) {\r\n            delete state.byUrl[listUrl]\r\n          }\r\n        })\r\n      }\r\n\r\n      state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS\r\n\r\n      // if no active lists, activate defaults\r\n      if (!state.activeListUrls) {\r\n        state.activeListUrls = DEFAULT_ACTIVE_LIST_URLS\r\n\r\n        // for each list on default list, initialize if needed\r\n        DEFAULT_ACTIVE_LIST_URLS.map((listUrl: string) => {\r\n          if (!state.byUrl[listUrl]) {\r\n            state.byUrl[listUrl] = NEW_LIST_STATE\r\n          }\r\n          return true\r\n        })\r\n      }\r\n    }),\r\n)\r\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport { Field, typeInput } from './actions'\r\n\r\nexport interface BurnState {\r\n  readonly independentField: Field\r\n  readonly typedValue: string\r\n}\r\n\r\nconst initialState: BurnState = {\r\n  independentField: Field.LIQUIDITY_PERCENT,\r\n  typedValue: '0',\r\n}\r\n\r\nexport default createReducer<BurnState>(initialState, (builder) =>\r\n  builder.addCase(typeInput, (state, { payload: { field, typedValue } }) => {\r\n    return {\r\n      ...state,\r\n      independentField: field,\r\n      typedValue,\r\n    }\r\n  }),\r\n)\r\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport {\r\n  addMulticallListeners,\r\n  errorFetchingMulticallResults,\r\n  fetchingMulticallResults,\r\n  removeMulticallListeners,\r\n  toCallKey,\r\n  updateMulticallResults,\r\n} from './actions'\r\n\r\nexport interface MulticallState {\r\n  callListeners?: {\r\n    // on a per-chain basis\r\n    [chainId: number]: {\r\n      // stores for each call key the listeners' preferences\r\n      [callKey: string]: {\r\n        // stores how many listeners there are per each blocks per fetch preference\r\n        [blocksPerFetch: number]: number\r\n      }\r\n    }\r\n  }\r\n\r\n  callResults: {\r\n    [chainId: number]: {\r\n      [callKey: string]: {\r\n        data?: string | null\r\n        blockNumber?: number\r\n        fetchingBlockNumber?: number\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst initialState: MulticallState = {\r\n  callResults: {},\r\n}\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addMulticallListeners, (state, { payload: { calls, chainId, options: { blocksPerFetch = 1 } = {} } }) => {\r\n      const listeners: MulticallState['callListeners'] = state.callListeners\r\n        ? state.callListeners\r\n        : (state.callListeners = {})\r\n      listeners[chainId] = listeners[chainId] ?? {}\r\n      calls.forEach((call) => {\r\n        const callKey = toCallKey(call)\r\n        listeners[chainId][callKey] = listeners[chainId][callKey] ?? {}\r\n        listeners[chainId][callKey][blocksPerFetch] = (listeners[chainId][callKey][blocksPerFetch] ?? 0) + 1\r\n      })\r\n    })\r\n    .addCase(\r\n      removeMulticallListeners,\r\n      (state, { payload: { chainId, calls, options: { blocksPerFetch = 1 } = {} } }) => {\r\n        const listeners: MulticallState['callListeners'] = state.callListeners\r\n          ? state.callListeners\r\n          : (state.callListeners = {})\r\n\r\n        if (!listeners[chainId]) return\r\n        calls.forEach((call) => {\r\n          const callKey = toCallKey(call)\r\n          if (!listeners[chainId][callKey]) return\r\n          if (!listeners[chainId][callKey][blocksPerFetch]) return\r\n\r\n          if (listeners[chainId][callKey][blocksPerFetch] === 1) {\r\n            delete listeners[chainId][callKey][blocksPerFetch]\r\n          } else {\r\n            listeners[chainId][callKey][blocksPerFetch]--\r\n          }\r\n        })\r\n      },\r\n    )\r\n    .addCase(fetchingMulticallResults, (state, { payload: { chainId, fetchingBlockNumber, calls } }) => {\r\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\r\n      calls.forEach((call) => {\r\n        const callKey = toCallKey(call)\r\n        const current = state.callResults[chainId][callKey]\r\n        if (!current) {\r\n          state.callResults[chainId][callKey] = {\r\n            fetchingBlockNumber,\r\n          }\r\n        } else {\r\n          if ((current.fetchingBlockNumber ?? 0) >= fetchingBlockNumber) return\r\n          state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber\r\n        }\r\n      })\r\n    })\r\n    .addCase(errorFetchingMulticallResults, (state, { payload: { fetchingBlockNumber, chainId, calls } }) => {\r\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\r\n      calls.forEach((call) => {\r\n        const callKey = toCallKey(call)\r\n        const current = state.callResults[chainId][callKey]\r\n        if (!current) return // only should be dispatched if we are already fetching\r\n        if (current.fetchingBlockNumber === fetchingBlockNumber) {\r\n          delete current.fetchingBlockNumber\r\n          current.data = null\r\n          current.blockNumber = fetchingBlockNumber\r\n        }\r\n      })\r\n    })\r\n    .addCase(updateMulticallResults, (state, { payload: { chainId, results, blockNumber } }) => {\r\n      state.callResults[chainId] = state.callResults[chainId] ?? {}\r\n      Object.keys(results).forEach((callKey) => {\r\n        const current = state.callResults[chainId][callKey]\r\n        if ((current?.blockNumber ?? 0) > blockNumber) return\r\n        state.callResults[chainId][callKey] = {\r\n          data: results[callKey],\r\n          blockNumber,\r\n        }\r\n      })\r\n    }),\r\n)\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { save, load } from 'redux-localstorage-simple'\r\nimport cloneDeep from 'lodash/cloneDeep'\r\nimport { useDispatch } from 'react-redux'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\nimport predictionsReducer from './predictions'\r\nimport profileReducer, { initialState as profileInitialState } from './profile'\r\nimport teamsReducer from './teams'\r\nimport achievementsReducer from './achievements'\r\nimport blockReducer from './block'\r\nimport votingReducer from './voting'\r\nimport lotteryReducer from './lottery'\r\nimport infoReducer from './info'\r\nimport { updateVersion } from './global/actions'\r\nimport user, { initialState as userInitialState } from './user/reducer'\r\nimport transactions, { initialState as transactionsInitialState } from './transactions/reducer'\r\nimport swap from './swap/reducer'\r\nimport mint from './mint/reducer'\r\nimport lists, { initialState as listsInitialState } from './lists/reducer'\r\nimport burn from './burn/reducer'\r\nimport multicall from './multicall/reducer'\r\nimport nftMarketReducer from './nftMarket/reducer'\r\n\r\nconst PERSISTED_KEYS: string[] = ['user', 'transactions', 'lists', 'profile']\r\n\r\nconst safeCloneDeep = <T>(state: T) => {\r\n  try {\r\n    return JSON.parse(JSON.stringify(state)) as T\r\n  } catch (error) {\r\n    console.error(error)\r\n    return cloneDeep(state)\r\n  }\r\n}\r\n\r\nconst store = configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    achievements: achievementsReducer,\r\n    block: blockReducer,\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n    predictions: predictionsReducer,\r\n    profile: profileReducer,\r\n    teams: teamsReducer,\r\n    voting: votingReducer,\r\n    lottery: lotteryReducer,\r\n    info: infoReducer,\r\n    nftMarket: nftMarketReducer,\r\n\r\n    // Exchange\r\n    user,\r\n    transactions,\r\n    swap,\r\n    mint,\r\n    burn,\r\n    multicall,\r\n    lists,\r\n  },\r\n  middleware: (getDefaultMiddleware) => [\r\n    ...getDefaultMiddleware({ thunk: true }),\r\n    save({ states: PERSISTED_KEYS, debounce: 1000 }),\r\n  ],\r\n  preloadedState: load({\r\n    states: PERSISTED_KEYS,\r\n    preloadedState: {\r\n      user: safeCloneDeep(userInitialState),\r\n      transactions: safeCloneDeep(transactionsInitialState),\r\n      lists: safeCloneDeep(listsInitialState),\r\n      profile: safeCloneDeep(profileInitialState),\r\n    },\r\n  }),\r\n})\r\n\r\nstore.dispatch(updateVersion())\r\n\r\n/**\r\n * @see https://redux-toolkit.js.org/usage/usage-with-typescript#getting-the-dispatch-type\r\n */\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type AppState = ReturnType<typeof store.getState>\r\nexport const useAppDispatch = () => useDispatch()\r\n\r\nexport default store\r\n","import merge from 'lodash/merge'\r\nimport teamsList from 'config/constants/teams'\r\nimport { getProfileContract } from 'utils/contractHelpers'\r\nimport { Team } from 'config/constants/types'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport { TeamsById } from 'state/types'\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\n\r\nconst profileContract = getProfileContract()\r\n\r\nexport const getTeam = async (teamId: number): Promise<Team> => {\r\n  try {\r\n    const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = await profileContract.getTeamProfile(teamId)\r\n    const staticTeamInfo = teamsList.find((staticTeam) => staticTeam.id === teamId)\r\n\r\n    return merge({}, staticTeamInfo, {\r\n      isJoinable,\r\n      name: teamName,\r\n      users: numberUsers.toNumber(),\r\n      points: numberPoints.toNumber(),\r\n    })\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Gets on-chain data and merges it with the existing static list of teams\r\n */\r\nexport const getTeams = async (): Promise<TeamsById> => {\r\n  try {\r\n    const teamsById = teamsList.reduce((accum, team) => {\r\n      return {\r\n        ...accum,\r\n        [team.id]: team,\r\n      }\r\n    }, {})\r\n    const nbTeams = await profileContract.numberTeams()\r\n\r\n    const calls = []\r\n    for (let i = 1; i <= nbTeams; i++) {\r\n      calls.push({\r\n        address: getPancakeProfileAddress(),\r\n        name: 'getTeamProfile',\r\n        params: [i],\r\n      })\r\n    }\r\n    const teamData = await multicallv2(profileABI, calls)\r\n\r\n    const onChainTeamData = teamData.reduce((accum, team, index) => {\r\n      const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = team\r\n\r\n      return {\r\n        ...accum,\r\n        [index + 1]: {\r\n          name: teamName,\r\n          users: numberUsers.toNumber(),\r\n          points: numberPoints.toNumber(),\r\n          isJoinable,\r\n        },\r\n      }\r\n    }, {})\r\n\r\n    return merge({}, teamsById, onChainTeamData)\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n","import { IPFS_GATEWAY } from '../index'\r\nimport { Team } from './types'\r\n\r\nconst teams: Team[] = [\r\n  {\r\n    id: 1,\r\n    name: 'Syrup Storm',\r\n    description: \"The storm's a-comin! Watch out! These bulls are stampeding in a syrupy surge!\",\r\n    images: {\r\n      lg: 'syrup-storm-lg.png',\r\n      md: 'syrup-storm-md.png',\r\n      sm: 'syrup-storm-sm.png',\r\n      alt: 'syrup-storm-alt.png',\r\n      ipfs: `${IPFS_GATEWAY}/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/syrup-storm.png`,\r\n    },\r\n    background: 'syrup-storm-bg.svg',\r\n    textColor: '#191326',\r\n    users: 0,\r\n    points: 0,\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Fearsome Flippers',\r\n    description: \"The flippening is coming. Don't get in these bunnies' way, or you'll get flipped, too!\",\r\n    images: {\r\n      lg: 'fearsome-flippers-lg.png',\r\n      md: 'fearsome-flippers-md.png',\r\n      sm: 'fearsome-flippers-sm.png',\r\n      alt: 'fearsome-flippers-alt.png',\r\n      ipfs: `${IPFS_GATEWAY}/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/fearsome-flippers.png`,\r\n    },\r\n    background: 'fearsome-flippers-bg.svg',\r\n    textColor: '#FFFFFF',\r\n    users: 0,\r\n    points: 0,\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Chaotic Cakers',\r\n    description: 'Can you stand the heat? Stay out of the kitchen or you might get burned to a crisp!',\r\n    images: {\r\n      lg: 'chaotic-cakers-lg.png',\r\n      md: 'chaotic-cakers-md.png',\r\n      sm: 'chaotic-cakers-sm.png',\r\n      alt: 'chaotic-cakers-alt.png',\r\n      ipfs: `${IPFS_GATEWAY}/QmXKzSojwzYjtDCVgR6mVx7w7DbyYpS7zip4ovJB9fQdMG/chaotic-cakers.png`,\r\n    },\r\n    background: 'chaotic-cakers-bg.svg',\r\n    textColor: '#191326',\r\n    users: 0,\r\n    points: 0,\r\n  },\r\n]\r\n\r\nexport default teams\r\n","import { Interface } from '@ethersproject/abi'\r\nimport ERC20_ABI from './erc20.json'\r\nimport ERC20_BYTES32_ABI from './erc20_bytes32.json'\r\n\r\nconst ERC20_INTERFACE = new Interface(ERC20_ABI)\r\n\r\nconst ERC20_BYTES32_INTERFACE = new Interface(ERC20_BYTES32_ABI)\r\n\r\nexport default ERC20_INTERFACE\r\nexport { ERC20_ABI, ERC20_BYTES32_INTERFACE, ERC20_BYTES32_ABI }\r\n","import { useMemo } from 'react'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport {\r\n  getBep20Contract,\r\n  getCakeContract,\r\n  getBunnyFactoryContract,\r\n  getBunnySpecialContract,\r\n  getPancakeRabbitContract,\r\n  getProfileContract,\r\n  getIfoV1Contract,\r\n  getIfoV2Contract,\r\n  getMasterchefContract,\r\n  getPointCenterIfoContract,\r\n  getSouschefContract,\r\n  getClaimRefundContract,\r\n  getTradingCompetitionContract,\r\n  getTradingCompetitionContractV2,\r\n  getEasterNftContract,\r\n  getErc721Contract,\r\n  getCakeVaultContract,\r\n  getIfoPoolContract,\r\n  getPredictionsContract,\r\n  getChainlinkOracleContract,\r\n  getSouschefV2Contract,\r\n  getLotteryV2Contract,\r\n  getBunnySpecialCakeVaultContract,\r\n  getBunnySpecialPredictionContract,\r\n  getFarmAuctionContract,\r\n  getBunnySpecialLotteryContract,\r\n  getAnniversaryAchievementContract,\r\n  getNftMarketContract,\r\n  getNftSaleContract,\r\n  getPancakeSquadContract,\r\n  getErc721CollectionContract,\r\n  getBunnySpecialXmasContract,\r\n  getPresaleContract,\r\n  getSeraContract,\r\n} from 'utils/contractHelpers'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\nimport { VaultKey } from 'state/types'\r\n\r\n// Imports below migrated from Exchange useContract.ts\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { ChainId, WETH } from '@pancakeswap/sdk'\r\nimport { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json'\r\nimport ENS_PUBLIC_RESOLVER_ABI from '../config/abi/ens-public-resolver.json'\r\nimport ENS_ABI from '../config/abi/ens-registrar.json'\r\nimport { ERC20_BYTES32_ABI } from '../config/abi/erc20'\r\nimport ERC20_ABI from '../config/abi/erc20.json'\r\nimport WETH_ABI from '../config/abi/weth.json'\r\nimport multiCallAbi from '../config/abi/Multicall.json'\r\nimport { getContract, getProviderOrSigner } from '../utils'\r\n\r\n/**\r\n * Helper hooks to get specific contracts (by ABI)\r\n */\r\n\r\nexport const useIfoV1Contract = (address: string) => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getIfoV1Contract(address, library.getSigner()), [address, library])\r\n}\r\n\r\nexport const useIfoV2Contract = (address: string) => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getIfoV2Contract(address, library.getSigner()), [address, library])\r\n}\r\n\r\nexport const useERC20 = (address: string, withSignerIfPossible = true) => {\r\n  const { library, account } = useActiveWeb3React()\r\n  return useMemo(\r\n    () => getBep20Contract(address, withSignerIfPossible ? getProviderOrSigner(library, account) : null),\r\n    [account, address, library, withSignerIfPossible],\r\n  )\r\n}\r\n\r\n/**\r\n * @see https://docs.openzeppelin.com/contracts/3.x/api/token/erc721\r\n */\r\nexport const useERC721 = (address: string) => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getErc721Contract(address, library.getSigner()), [address, library])\r\n}\r\n\r\nexport const useCake = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getCakeContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useBunnyFactory = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getBunnyFactoryContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const usePancakeRabbits = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getPancakeRabbitContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useProfile = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getProfileContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useLotteryV2Contract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getLotteryV2Contract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useMasterchef = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getMasterchefContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useSousChef = (id) => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getSouschefContract(id, library.getSigner()), [id, library])\r\n}\r\n\r\nexport const useSousChefV2 = (id) => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getSouschefV2Contract(id, library.getSigner()), [id, library])\r\n}\r\n\r\nexport const usePointCenterIfoContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getPointCenterIfoContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useBunnySpecialContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getBunnySpecialContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useClaimRefundContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getClaimRefundContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useTradingCompetitionContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getTradingCompetitionContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useTradingCompetitionContractV2 = (withSignerIfPossible = true) => {\r\n  const { library, account } = useActiveWeb3React()\r\n  return useMemo(\r\n    () => getTradingCompetitionContractV2(withSignerIfPossible ? getProviderOrSigner(library, account) : null),\r\n    [library, withSignerIfPossible, account],\r\n  )\r\n}\r\n\r\nexport const useEasterNftContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getEasterNftContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useVaultPoolContract = (vaultKey: VaultKey) => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => {\r\n    return vaultKey === VaultKey.CakeVault\r\n      ? getCakeVaultContract(library.getSigner())\r\n      : getIfoPoolContract(library.getSigner())\r\n  }, [library, vaultKey])\r\n}\r\n\r\nexport const useCakeVaultContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getCakeVaultContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useIfoPoolContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getIfoPoolContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const usePredictionsContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getPredictionsContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useChainlinkOracleContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getChainlinkOracleContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useSpecialBunnyCakeVaultContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getBunnySpecialCakeVaultContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useSpecialBunnyPredictionContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getBunnySpecialPredictionContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useBunnySpecialLotteryContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getBunnySpecialLotteryContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useBunnySpecialXmasContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getBunnySpecialXmasContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useAnniversaryAchievementContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getAnniversaryAchievementContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useNftSaleContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getNftSaleContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const usePancakeSquadContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getPancakeSquadContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useFarmAuctionContract = () => {\r\n  const { account, library } = useActiveWeb3React()\r\n  // This hook is slightly different from others\r\n  // Calls were failing if unconnected user goes to farm auction page\r\n  // Using library instead of library.getSigner() fixes the problem for unconnected users\r\n  // However, this fix is not ideal, it currently has following behavior:\r\n  // - If you visit Farm Auction page coming from some other page there are no errors in console (unconnected or connected)\r\n  // - If you go directly to Farm Auction page\r\n  //   - as unconnected user you don't see any console errors\r\n  //   - as connected user you see `unknown account #0 (operation=\"getAddress\", code=UNSUPPORTED_OPERATION, ...` errors\r\n  //     the functionality of the page is not affected, data is loading fine and you can interact with the contract\r\n  //\r\n  // Similar behavior was also noticed on Trading Competition page.\r\n  return useMemo(() => getFarmAuctionContract(account ? library.getSigner() : library), [library, account])\r\n}\r\n\r\nexport const useNftMarketContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getNftMarketContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useErc721CollectionContract = (collectionAddress: string, withSignerIfPossible = true) => {\r\n  const { library, account } = useActiveWeb3React()\r\n  return useMemo(() => {\r\n    return getErc721CollectionContract(\r\n      withSignerIfPossible ? getProviderOrSigner(library, account) : null,\r\n      collectionAddress,\r\n    )\r\n  }, [account, library, collectionAddress, withSignerIfPossible])\r\n}\r\n\r\n// Code below migrated from Exchange useContract.ts\r\n\r\n// returns null on errors\r\nfunction useContract(address: string | undefined, ABI: any, withSignerIfPossible = true): Contract | null {\r\n  const { library, account } = useActiveWeb3React()\r\n\r\n  return useMemo(() => {\r\n    if (!address || !ABI || !library) return null\r\n    try {\r\n      return getContract(address, ABI, withSignerIfPossible ? getProviderOrSigner(library, account) : null)\r\n    } catch (error) {\r\n      console.error('Failed to get contract', error)\r\n      return null\r\n    }\r\n  }, [address, ABI, library, withSignerIfPossible, account])\r\n}\r\n\r\nexport function useTokenContract(tokenAddress?: string, withSignerIfPossible?: boolean): Contract | null {\r\n  return useContract(tokenAddress, ERC20_ABI, withSignerIfPossible)\r\n}\r\n\r\nexport function useWETHContract(withSignerIfPossible?: boolean): Contract | null {\r\n  const { chainId } = useActiveWeb3React()\r\n  return useContract(chainId ? WETH[chainId].address : undefined, WETH_ABI, withSignerIfPossible)\r\n}\r\n\r\nexport function useENSRegistrarContract(withSignerIfPossible?: boolean): Contract | null {\r\n  const { chainId } = useActiveWeb3React()\r\n  let address: string | undefined\r\n  if (chainId) {\r\n    // eslint-disable-next-line default-case\r\n    switch (chainId) {\r\n      case ChainId.MAINNET:\r\n      case ChainId.TESTNET:\r\n        address = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\r\n        break\r\n    }\r\n  }\r\n  return useContract(address, ENS_ABI, withSignerIfPossible)\r\n}\r\n\r\nexport function useENSResolverContract(address: string | undefined, withSignerIfPossible?: boolean): Contract | null {\r\n  return useContract(address, ENS_PUBLIC_RESOLVER_ABI, withSignerIfPossible)\r\n}\r\n\r\nexport function useBytes32TokenContract(tokenAddress?: string, withSignerIfPossible?: boolean): Contract | null {\r\n  return useContract(tokenAddress, ERC20_BYTES32_ABI, withSignerIfPossible)\r\n}\r\n\r\nexport function usePairContract(pairAddress?: string, withSignerIfPossible?: boolean): Contract | null {\r\n  return useContract(pairAddress, IUniswapV2PairABI, withSignerIfPossible)\r\n}\r\n\r\nexport function useMulticallContract(): Contract | null {\r\n  return useContract(getMulticallAddress(), multiCallAbi, false)\r\n}\r\n\r\nexport const usePresaleContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getPresaleContract(library.getSigner()), [library])\r\n}\r\n\r\nexport const useSeraContract = () => {\r\n  const { library } = useActiveWeb3React()\r\n  return useMemo(() => getSeraContract(library.getSigner()), [library])\r\n}","import Cookies from 'js-cookie'\r\nimport { Profile } from 'state/types'\r\nimport { GetUserProfileResponse } from 'utils/types'\r\nimport { getProfileContract } from 'utils/contractHelpers'\r\nimport { getTeam } from 'state/teams/helpers'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getNftApi } from 'state/nftMarket/helpers'\r\n\r\nexport interface GetProfileResponse {\r\n  hasRegistered: boolean\r\n  profile?: Profile\r\n}\r\n\r\nconst transformProfileResponse = (profileResponse: GetUserProfileResponse): Partial<Profile> => {\r\n  const { 0: userId, 1: numberPoints, 2: teamId, 3: collectionAddress, 4: tokenId, 5: isActive } = profileResponse\r\n\r\n  return {\r\n    userId: userId.toNumber(),\r\n    points: numberPoints.toNumber(),\r\n    teamId: teamId.toNumber(),\r\n    tokenId: tokenId.toNumber(),\r\n    collectionAddress,\r\n    isActive,\r\n  }\r\n}\r\n\r\nconst profileContract = getProfileContract()\r\nconst profileApi = process.env.REACT_APP_API_PROFILE\r\n\r\nexport const getUsername = async (address: string): Promise<string> => {\r\n  try {\r\n    const response = await fetch(`${profileApi}/api/users/${address.toLowerCase()}`)\r\n\r\n    if (!response.ok) {\r\n      return ''\r\n    }\r\n\r\n    const { username = '' } = await response.json()\r\n\r\n    return username\r\n  } catch (error) {\r\n    return ''\r\n  }\r\n}\r\n\r\n/**\r\n * Intended to be used for getting a profile avatar\r\n */\r\nexport const getProfileAvatar = async (address: string) => {\r\n  try {\r\n    const hasRegistered = await profileContract.hasRegistered(address)\r\n\r\n    if (!hasRegistered) {\r\n      return null\r\n    }\r\n\r\n    const profileResponse = await profileContract.getUserProfile(address)\r\n    const { tokenId, collectionAddress, isActive } = transformProfileResponse(profileResponse)\r\n\r\n    let nft = null\r\n    if (isActive) {\r\n      const apiRes = await getNftApi(collectionAddress, tokenId.toString())\r\n\r\n      nft = {\r\n        tokenId: apiRes.tokenId,\r\n        name: apiRes.name,\r\n        collectionName: apiRes.collection.name,\r\n        collectionAddress,\r\n        description: apiRes.description,\r\n        attributes: apiRes.attributes,\r\n        createdAt: apiRes.createdAt,\r\n        updatedAt: apiRes.updatedAt,\r\n        image: {\r\n          original: apiRes.image?.original,\r\n          thumbnail: apiRes.image?.thumbnail,\r\n        },\r\n      }\r\n    }\r\n\r\n    return { nft, hasRegistered }\r\n  } catch {\r\n    return { nft: null, hasRegistered: false }\r\n  }\r\n}\r\n\r\nexport const getProfile = async (address: string): Promise<GetProfileResponse> => {\r\n  try {\r\n    const hasRegistered = await profileContract.hasRegistered(address)\r\n\r\n    if (!hasRegistered) {\r\n      return { hasRegistered, profile: null }\r\n    }\r\n\r\n    const profileResponse = await profileContract.getUserProfile(address)\r\n    const { userId, points, teamId, tokenId, collectionAddress, isActive } = transformProfileResponse(profileResponse)\r\n    const team = await getTeam(teamId)\r\n    const username = await getUsername(address)\r\n    let nftToken: NftToken\r\n\r\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\r\n    // so only fetch the nft data if active\r\n    if (isActive) {\r\n      const apiRes = await getNftApi(collectionAddress, tokenId.toString())\r\n\r\n      nftToken = {\r\n        tokenId: apiRes.tokenId,\r\n        name: apiRes.name,\r\n        collectionName: apiRes.collection.name,\r\n        collectionAddress,\r\n        description: apiRes.description,\r\n        attributes: apiRes.attributes,\r\n        createdAt: apiRes.createdAt,\r\n        updatedAt: apiRes.updatedAt,\r\n        image: {\r\n          original: apiRes.image?.original,\r\n          thumbnail: apiRes.image?.thumbnail,\r\n        },\r\n      }\r\n\r\n      // Save the preview image in a cookie so it can be used on the exchange\r\n      Cookies.set(\r\n        `profile_${address}`,\r\n        {\r\n          username,\r\n          avatar: `${nftToken.image.thumbnail}`,\r\n        },\r\n        { domain: 'pancakeswap.finance', secure: true, expires: 30 },\r\n      )\r\n    }\r\n\r\n    const profile = {\r\n      userId,\r\n      points,\r\n      teamId,\r\n      tokenId,\r\n      username,\r\n      collectionAddress,\r\n      isActive,\r\n      nft: nftToken,\r\n      team,\r\n    } as Profile\r\n\r\n    return { hasRegistered, profile }\r\n  } catch (e) {\r\n    console.error(e)\r\n    return null\r\n  }\r\n}\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { ProfileState, ProfileAvatarFetchStatus, Profile } from 'state/types'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getProfile, getProfileAvatar, getUsername } from './helpers'\r\n\r\nexport const initialState: ProfileState = {\r\n  isInitialized: false,\r\n  isLoading: false,\r\n  hasRegistered: false,\r\n  data: null,\r\n  profileAvatars: {},\r\n}\r\n\r\nexport const fetchProfile = createAsyncThunk<{ hasRegistered: boolean; profile?: Profile }, string>(\r\n  'profile/fetchProfile',\r\n  async (account) => {\r\n    const { hasRegistered, profile } = await getProfile(account)\r\n    return { hasRegistered, profile }\r\n  },\r\n)\r\n\r\nexport const fetchProfileAvatar = createAsyncThunk<{ account: string; nft: NftToken; hasRegistered: boolean }, string>(\r\n  'profile/fetchProfileAvatar',\r\n  async (account) => {\r\n    const { nft, hasRegistered } = await getProfileAvatar(account)\r\n    return { account, nft, hasRegistered }\r\n  },\r\n)\r\n\r\nexport const fetchProfileUsername = createAsyncThunk<\r\n  { account: string; username: string },\r\n  { account: string; hasRegistered: boolean }\r\n>('profile/fetchProfileUsername', async ({ account, hasRegistered }) => {\r\n  if (!hasRegistered) {\r\n    return { account, username: '' }\r\n  }\r\n  const username = await getUsername(account)\r\n  return { account, username }\r\n})\r\n\r\nexport const profileSlice = createSlice({\r\n  name: 'profile',\r\n  initialState,\r\n  reducers: {\r\n    profileClear: () => ({\r\n      ...initialState,\r\n      isLoading: false,\r\n    }),\r\n    addPoints: (state, action: PayloadAction<number>) => {\r\n      state.data.points += action.payload\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchProfile.pending, (state) => {\r\n      state.isLoading = true\r\n    })\r\n    builder.addCase(fetchProfile.fulfilled, (state, action) => {\r\n      const { hasRegistered, profile } = action.payload\r\n\r\n      state.isInitialized = true\r\n      state.isLoading = false\r\n      state.hasRegistered = hasRegistered\r\n      state.data = profile\r\n    })\r\n    builder.addCase(fetchProfile.rejected, (state) => {\r\n      state.isLoading = false\r\n      state.isInitialized = true\r\n    })\r\n    builder.addCase(fetchProfileUsername.pending, (state, action) => {\r\n      const { account } = action.meta.arg\r\n      if (state.profileAvatars[account]) {\r\n        state.profileAvatars[account] = {\r\n          ...state.profileAvatars[account],\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.FETCHING,\r\n        }\r\n      } else {\r\n        state.profileAvatars[account] = {\r\n          hasRegistered: false,\r\n          username: null,\r\n          nft: null,\r\n          // I think in theory this else should never be reached since we only check for username after we checked for profile/avatar\r\n          // just in case I set isFetchingAvatar will be ProfileAvatarFetchStatus.FETCHED at this point to avoid refetching\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.FETCHING,\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      }\r\n    })\r\n    builder.addCase(fetchProfileUsername.fulfilled, (state, action) => {\r\n      const { account, username } = action.payload\r\n\r\n      if (state.profileAvatars[account]) {\r\n        state.profileAvatars[account] = {\r\n          ...state.profileAvatars[account],\r\n          username,\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      } else {\r\n        state.profileAvatars[account] = {\r\n          username,\r\n          nft: null,\r\n          hasRegistered: true,\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n          // I think in theory this else should never be reached since we only check for username after we checked for profile/avatar\r\n          // just in case I set isFetchingAvatar will be ProfileAvatarFetchStatus.FETCHED at this point to avoid refetching\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      }\r\n    })\r\n    builder.addCase(fetchProfileUsername.rejected, (state, action) => {\r\n      const { account } = action.meta.arg\r\n      if (state.profileAvatars[account]) {\r\n        state.profileAvatars[account] = {\r\n          ...state.profileAvatars[account],\r\n          username: '',\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      } else {\r\n        state.profileAvatars[account] = {\r\n          hasRegistered: false,\r\n          username: '',\r\n          nft: null,\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      }\r\n    })\r\n    builder.addCase(fetchProfileAvatar.pending, (state, action) => {\r\n      const account = action.meta.arg\r\n      if (state.profileAvatars[account]) {\r\n        state.profileAvatars[account] = {\r\n          ...state.profileAvatars[account],\r\n          hasRegistered: false,\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHING,\r\n        }\r\n      } else {\r\n        state.profileAvatars[account] = {\r\n          username: null,\r\n          nft: null,\r\n          hasRegistered: false,\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.NOT_FETCHED,\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHING,\r\n        }\r\n      }\r\n    })\r\n    builder.addCase(fetchProfileAvatar.fulfilled, (state, action) => {\r\n      const { account, nft, hasRegistered } = action.payload\r\n\r\n      if (state.profileAvatars[account]) {\r\n        state.profileAvatars[account] = {\r\n          ...state.profileAvatars[account],\r\n          nft,\r\n          hasRegistered,\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      } else {\r\n        state.profileAvatars[account] = {\r\n          username: null,\r\n          nft,\r\n          hasRegistered,\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.NOT_FETCHED,\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      }\r\n    })\r\n    builder.addCase(fetchProfileAvatar.rejected, (state, action) => {\r\n      const account = action.meta.arg\r\n\r\n      if (state.profileAvatars[account]) {\r\n        state.profileAvatars[account] = {\r\n          ...state.profileAvatars[account],\r\n          nft: null,\r\n          hasRegistered: false,\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      } else {\r\n        state.profileAvatars[account] = {\r\n          username: null,\r\n          nft: null,\r\n          hasRegistered: false,\r\n          usernameFetchStatus: ProfileAvatarFetchStatus.NOT_FETCHED,\r\n          avatarFetchStatus: ProfileAvatarFetchStatus.FETCHED,\r\n        }\r\n      }\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { profileClear, addPoints } = profileSlice.actions\r\n\r\nexport default profileSlice.reducer\r\n","import { ChainId, Pair, Token } from '@pancakeswap/sdk'\r\nimport flatMap from 'lodash/flatMap'\r\nimport { useCallback, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { BASES_TO_TRACK_LIQUIDITY_FOR, PINNED_PAIRS } from 'config/constants'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { useAllTokens } from 'hooks/Tokens'\r\nimport { AppDispatch, AppState } from '../../index'\r\nimport {\r\n  addSerializedPair,\r\n  addSerializedToken,\r\n  FarmStakedOnly,\r\n  muteAudio,\r\n  removeSerializedToken,\r\n  SerializedPair,\r\n  toggleTheme as toggleThemeAction,\r\n  unmuteAudio,\r\n  updateUserDeadline,\r\n  updateUserExpertMode,\r\n  updateUserFarmStakedOnly,\r\n  updateUserSingleHopOnly,\r\n  updateUserSlippageTolerance,\r\n  updateGasPrice,\r\n  addWatchlistToken,\r\n  addWatchlistPool,\r\n  updateUserPoolStakedOnly,\r\n  updateUserPoolsViewMode,\r\n  ViewMode,\r\n  updateUserFarmsViewMode,\r\n  updateUserPredictionChartDisclaimerShow,\r\n  updateUserPredictionAcceptedRisk,\r\n  updateUserUsernameVisibility,\r\n  updateUserExpertModeAcknowledgementShow,\r\n  hidePhishingWarningBanner,\r\n  setIsExchangeChartDisplayed,\r\n  ChartViewMode,\r\n  setChartViewMode,\r\n  setSubgraphHealthIndicatorDisplayed,\r\n} from '../actions'\r\nimport { deserializeToken, GAS_PRICE_GWEI, serializeToken } from './helpers'\r\n\r\nexport function useAudioModeManager(): [boolean, () => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const audioPlay = useSelector<AppState, AppState['user']['audioPlay']>((state) => state.user.audioPlay)\r\n\r\n  const toggleSetAudioMode = useCallback(() => {\r\n    if (audioPlay) {\r\n      dispatch(muteAudio())\r\n    } else {\r\n      dispatch(unmuteAudio())\r\n    }\r\n  }, [audioPlay, dispatch])\r\n\r\n  return [audioPlay, toggleSetAudioMode]\r\n}\r\n\r\nexport function usePhishingBannerManager(): [boolean, () => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const showPhishingWarningBanner = useSelector<AppState, AppState['user']['showPhishingWarningBanner']>(\r\n    (state) => state.user.showPhishingWarningBanner,\r\n  )\r\n\r\n  const hideBanner = useCallback(() => {\r\n    dispatch(hidePhishingWarningBanner())\r\n  }, [dispatch])\r\n\r\n  return [showPhishingWarningBanner, hideBanner]\r\n}\r\n\r\n// Get user preference for exchange price chart\r\n// For mobile layout chart is hidden by default\r\nexport function useExchangeChartManager(isMobile: boolean): [boolean, (isDisplayed: boolean) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const isChartDisplayed = useSelector<AppState, AppState['user']['isExchangeChartDisplayed']>(\r\n    (state) => state.user.isExchangeChartDisplayed,\r\n  )\r\n\r\n  const setUserChartPreference = useCallback(\r\n    (isDisplayed: boolean) => {\r\n      dispatch(setIsExchangeChartDisplayed(isDisplayed))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [isMobile ? false : isChartDisplayed, setUserChartPreference]\r\n}\r\n\r\nexport function useExchangeChartViewManager() {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const chartViewMode = useSelector<AppState, AppState['user']['userChartViewMode']>(\r\n    (state) => state.user.userChartViewMode,\r\n  )\r\n\r\n  const setUserChartViewPreference = useCallback(\r\n    (view: ChartViewMode) => {\r\n      dispatch(setChartViewMode(view))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [chartViewMode, setUserChartViewPreference] as const\r\n}\r\n\r\nexport function useSubgraphHealthIndicatorManager() {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const isSubgraphHealthIndicatorDisplayed = useSelector<\r\n    AppState,\r\n    AppState['user']['isSubgraphHealthIndicatorDisplayed']\r\n  >((state) => state.user.isSubgraphHealthIndicatorDisplayed)\r\n\r\n  const setSubgraphHealthIndicatorDisplayedPreference = useCallback(\r\n    (newIsDisplayed: boolean) => {\r\n      dispatch(setSubgraphHealthIndicatorDisplayed(newIsDisplayed))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [isSubgraphHealthIndicatorDisplayed, setSubgraphHealthIndicatorDisplayedPreference] as const\r\n}\r\n\r\nexport function useIsExpertMode(): boolean {\r\n  return useSelector<AppState, AppState['user']['userExpertMode']>((state) => state.user.userExpertMode)\r\n}\r\n\r\nexport function useExpertModeManager(): [boolean, () => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const expertMode = useIsExpertMode()\r\n\r\n  const toggleSetExpertMode = useCallback(() => {\r\n    dispatch(updateUserExpertMode({ userExpertMode: !expertMode }))\r\n  }, [expertMode, dispatch])\r\n\r\n  return [expertMode, toggleSetExpertMode]\r\n}\r\n\r\nexport function useThemeManager(): [boolean, () => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const isDark = useSelector<AppState, AppState['user']['isDark']>((state) => state.user.isDark)\r\n\r\n  const toggleTheme = useCallback(() => {\r\n    dispatch(toggleThemeAction())\r\n  }, [dispatch])\r\n\r\n  return [isDark, toggleTheme]\r\n}\r\n\r\nexport function useUserSingleHopOnly(): [boolean, (newSingleHopOnly: boolean) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const singleHopOnly = useSelector<AppState, AppState['user']['userSingleHopOnly']>(\r\n    (state) => state.user.userSingleHopOnly,\r\n  )\r\n\r\n  const setSingleHopOnly = useCallback(\r\n    (newSingleHopOnly: boolean) => {\r\n      dispatch(updateUserSingleHopOnly({ userSingleHopOnly: newSingleHopOnly }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [singleHopOnly, setSingleHopOnly]\r\n}\r\n\r\nexport function useUserSlippageTolerance(): [number, (slippage: number) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userSlippageTolerance = useSelector<AppState, AppState['user']['userSlippageTolerance']>((state) => {\r\n    return state.user.userSlippageTolerance\r\n  })\r\n\r\n  const setUserSlippageTolerance = useCallback(\r\n    (slippage: number) => {\r\n      dispatch(updateUserSlippageTolerance({ userSlippageTolerance: slippage }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userSlippageTolerance, setUserSlippageTolerance]\r\n}\r\n\r\nexport function useUserFarmStakedOnly(isActive: boolean): [boolean, (stakedOnly: boolean) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userFarmStakedOnly = useSelector<AppState, AppState['user']['userFarmStakedOnly']>((state) => {\r\n    return state.user.userFarmStakedOnly\r\n  })\r\n\r\n  const setUserFarmStakedOnly = useCallback(\r\n    (stakedOnly: boolean) => {\r\n      const farmStakedOnly = stakedOnly ? FarmStakedOnly.TRUE : FarmStakedOnly.FALSE\r\n      dispatch(updateUserFarmStakedOnly({ userFarmStakedOnly: farmStakedOnly }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [\r\n    userFarmStakedOnly === FarmStakedOnly.ON_FINISHED ? !isActive : userFarmStakedOnly === FarmStakedOnly.TRUE,\r\n    setUserFarmStakedOnly,\r\n  ]\r\n}\r\n\r\nexport function useUserPoolStakedOnly(): [boolean, (stakedOnly: boolean) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userPoolStakedOnly = useSelector<AppState, AppState['user']['userPoolStakedOnly']>((state) => {\r\n    return state.user.userPoolStakedOnly\r\n  })\r\n\r\n  const setUserPoolStakedOnly = useCallback(\r\n    (stakedOnly: boolean) => {\r\n      dispatch(updateUserPoolStakedOnly({ userPoolStakedOnly: stakedOnly }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userPoolStakedOnly, setUserPoolStakedOnly]\r\n}\r\n\r\nexport function useUserPoolsViewMode(): [ViewMode, (viewMode: ViewMode) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userPoolsViewMode = useSelector<AppState, AppState['user']['userPoolsViewMode']>((state) => {\r\n    return state.user.userPoolsViewMode\r\n  })\r\n\r\n  const setUserPoolsViewMode = useCallback(\r\n    (viewMode: ViewMode) => {\r\n      dispatch(updateUserPoolsViewMode({ userPoolsViewMode: viewMode }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userPoolsViewMode, setUserPoolsViewMode]\r\n}\r\n\r\nexport function useUserFarmsViewMode(): [ViewMode, (viewMode: ViewMode) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userFarmsViewMode = useSelector<AppState, AppState['user']['userFarmsViewMode']>((state) => {\r\n    return state.user.userFarmsViewMode\r\n  })\r\n\r\n  const setUserFarmsViewMode = useCallback(\r\n    (viewMode: ViewMode) => {\r\n      dispatch(updateUserFarmsViewMode({ userFarmsViewMode: viewMode }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userFarmsViewMode, setUserFarmsViewMode]\r\n}\r\n\r\nexport function useUserPredictionAcceptedRisk(): [boolean, (acceptedRisk: boolean) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userPredictionAcceptedRisk = useSelector<AppState, AppState['user']['userPredictionAcceptedRisk']>((state) => {\r\n    return state.user.userPredictionAcceptedRisk\r\n  })\r\n\r\n  const setUserPredictionAcceptedRisk = useCallback(\r\n    (acceptedRisk: boolean) => {\r\n      dispatch(updateUserPredictionAcceptedRisk({ userAcceptedRisk: acceptedRisk }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userPredictionAcceptedRisk, setUserPredictionAcceptedRisk]\r\n}\r\n\r\nexport function useUserPredictionChartDisclaimerShow(): [boolean, (showDisclaimer: boolean) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userPredictionChartDisclaimerShow = useSelector<\r\n    AppState,\r\n    AppState['user']['userPredictionChartDisclaimerShow']\r\n  >((state) => {\r\n    return state.user.userPredictionChartDisclaimerShow\r\n  })\r\n\r\n  const setPredictionUserChartDisclaimerShow = useCallback(\r\n    (showDisclaimer: boolean) => {\r\n      dispatch(updateUserPredictionChartDisclaimerShow({ userShowDisclaimer: showDisclaimer }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userPredictionChartDisclaimerShow, setPredictionUserChartDisclaimerShow]\r\n}\r\n\r\nexport function useUserExpertModeAcknowledgementShow(): [boolean, (showAcknowledgement: boolean) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userExpertModeAcknowledgementShow = useSelector<\r\n    AppState,\r\n    AppState['user']['userExpertModeAcknowledgementShow']\r\n  >((state) => {\r\n    return state.user.userExpertModeAcknowledgementShow\r\n  })\r\n\r\n  const setUserExpertModeAcknowledgementShow = useCallback(\r\n    (showAcknowledgement: boolean) => {\r\n      dispatch(updateUserExpertModeAcknowledgementShow({ userExpertModeAcknowledgementShow: showAcknowledgement }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userExpertModeAcknowledgementShow, setUserExpertModeAcknowledgementShow]\r\n}\r\n\r\nexport function useUserUsernameVisibility(): [boolean, (usernameVisibility: boolean) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userUsernameVisibility = useSelector<AppState, AppState['user']['userUsernameVisibility']>((state) => {\r\n    return state.user.userUsernameVisibility\r\n  })\r\n\r\n  const setUserUsernameVisibility = useCallback(\r\n    (usernameVisibility: boolean) => {\r\n      dispatch(updateUserUsernameVisibility({ userUsernameVisibility: usernameVisibility }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userUsernameVisibility, setUserUsernameVisibility]\r\n}\r\n\r\nexport function useUserTransactionTTL(): [number, (slippage: number) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userDeadline = useSelector<AppState, AppState['user']['userDeadline']>((state) => {\r\n    return state.user.userDeadline\r\n  })\r\n\r\n  const setUserDeadline = useCallback(\r\n    (deadline: number) => {\r\n      dispatch(updateUserDeadline({ userDeadline: deadline }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userDeadline, setUserDeadline]\r\n}\r\n\r\nexport function useAddUserToken(): (token: Token) => void {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  return useCallback(\r\n    (token: Token) => {\r\n      dispatch(addSerializedToken({ serializedToken: serializeToken(token) }))\r\n    },\r\n    [dispatch],\r\n  )\r\n}\r\n\r\nexport function useRemoveUserAddedToken(): (chainId: number, address: string) => void {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  return useCallback(\r\n    (chainId: number, address: string) => {\r\n      dispatch(removeSerializedToken({ chainId, address }))\r\n    },\r\n    [dispatch],\r\n  )\r\n}\r\n\r\nexport function useGasPrice(): string {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const userGas = useSelector<AppState, AppState['user']['gasPrice']>((state) => state.user.gasPrice)\r\n  return chainId === ChainId.MAINNET.toString() ? userGas : GAS_PRICE_GWEI.testnet\r\n}\r\n\r\nexport function useGasPriceManager(): [string, (userGasPrice: string) => void] {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const userGasPrice = useGasPrice()\r\n\r\n  const setGasPrice = useCallback(\r\n    (gasPrice: string) => {\r\n      dispatch(updateGasPrice({ gasPrice }))\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  return [userGasPrice, setGasPrice]\r\n}\r\n\r\nfunction serializePair(pair: Pair): SerializedPair {\r\n  return {\r\n    token0: serializeToken(pair.token0),\r\n    token1: serializeToken(pair.token1),\r\n  }\r\n}\r\n\r\nexport function usePairAdder(): (pair: Pair) => void {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  return useCallback(\r\n    (pair: Pair) => {\r\n      dispatch(addSerializedPair({ serializedPair: serializePair(pair) }))\r\n    },\r\n    [dispatch],\r\n  )\r\n}\r\n\r\n/**\r\n * Given two tokens return the liquidity token that represents its liquidity shares\r\n * @param tokenA one of the two tokens\r\n * @param tokenB the other token\r\n */\r\nexport function toV2LiquidityToken([tokenA, tokenB]: [Token, Token]): Token {\r\n  return new Token(tokenA.chainId, Pair.getAddress(tokenA, tokenB), 18, 'Cake-LP', 'Pancake LPs')\r\n}\r\n\r\n/**\r\n * Returns all the pairs of tokens that are tracked by the user for the current chain ID.\r\n */\r\nexport function useTrackedTokenPairs(): [Token, Token][] {\r\n  const { chainId } = useActiveWeb3React()\r\n  const tokens = useAllTokens()\r\n\r\n  // pinned pairs\r\n  const pinnedPairs = useMemo(() => (chainId ? PINNED_PAIRS[chainId] ?? [] : []), [chainId])\r\n\r\n  // pairs for every token against every base\r\n  const generatedPairs: [Token, Token][] = useMemo(\r\n    () =>\r\n      chainId\r\n        ? flatMap(Object.keys(tokens), (tokenAddress) => {\r\n            const token = tokens[tokenAddress]\r\n            // for each token on the current chain,\r\n            return (\r\n              // loop though all bases on the current chain\r\n              (BASES_TO_TRACK_LIQUIDITY_FOR[chainId] ?? [])\r\n                // to construct pairs of the given token with each base\r\n                .map((base) => {\r\n                  if (base.address === token.address) {\r\n                    return null\r\n                  }\r\n                  return [base, token]\r\n                })\r\n                .filter((p): p is [Token, Token] => p !== null)\r\n            )\r\n          })\r\n        : [],\r\n    [tokens, chainId],\r\n  )\r\n\r\n  // pairs saved by users\r\n  const savedSerializedPairs = useSelector<AppState, AppState['user']['pairs']>(({ user: { pairs } }) => pairs)\r\n\r\n  const userPairs: [Token, Token][] = useMemo(() => {\r\n    if (!chainId || !savedSerializedPairs) return []\r\n    const forChain = savedSerializedPairs[chainId]\r\n    if (!forChain) return []\r\n\r\n    return Object.keys(forChain).map((pairId) => {\r\n      return [deserializeToken(forChain[pairId].token0), deserializeToken(forChain[pairId].token1)]\r\n    })\r\n  }, [savedSerializedPairs, chainId])\r\n\r\n  const combinedList = useMemo(\r\n    () => userPairs.concat(generatedPairs).concat(pinnedPairs),\r\n    [generatedPairs, pinnedPairs, userPairs],\r\n  )\r\n\r\n  return useMemo(() => {\r\n    // dedupes pairs of tokens in the combined list\r\n    const keyed = combinedList.reduce<{ [key: string]: [Token, Token] }>((memo, [tokenA, tokenB]) => {\r\n      const sorted = tokenA.sortsBefore(tokenB)\r\n      const key = sorted ? `${tokenA.address}:${tokenB.address}` : `${tokenB.address}:${tokenA.address}`\r\n      if (memo[key]) return memo\r\n      memo[key] = sorted ? [tokenA, tokenB] : [tokenB, tokenA]\r\n      return memo\r\n    }, {})\r\n\r\n    return Object.keys(keyed).map((key) => keyed[key])\r\n  }, [combinedList])\r\n}\r\n\r\nexport const useWatchlistTokens = (): [string[], (address: string) => void] => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const savedTokens = useSelector((state: AppState) => state.user.watchlistTokens) ?? []\r\n  const updatedSavedTokens = useCallback(\r\n    (address: string) => {\r\n      dispatch(addWatchlistToken({ address }))\r\n    },\r\n    [dispatch],\r\n  )\r\n  return [savedTokens, updatedSavedTokens]\r\n}\r\n\r\nexport const useWatchlistPools = (): [string[], (address: string) => void] => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const savedPools = useSelector((state: AppState) => state.user.watchlistPools) ?? []\r\n  const updateSavedPools = useCallback(\r\n    (address: string) => {\r\n      dispatch(addWatchlistPool({ address }))\r\n    },\r\n    [dispatch],\r\n  )\r\n  return [savedPools, updateSavedPools]\r\n}\r\n","import { Token, ChainId } from '@pancakeswap/sdk'\r\nimport tokens from './tokens'\r\nimport farms from './farms'\r\nimport { Ifo } from './types'\r\n\r\nexport const cakeBnbLpToken = new Token(ChainId.MAINNET, farms[1].lpAddresses[ChainId.MAINNET], 18, farms[1].lpSymbol)\r\n\r\nconst ifos: Ifo[] = [\r\n  {\r\n    id: 'dpt',\r\n    address: '0x63914805A0864e9557eA3A5cC86cc1BA054ec64b',\r\n    isActive: true,\r\n    name: 'Diviner Protocol (DPT)',\r\n    poolBasic: {\r\n      saleAmount: '7,200,000 DPT',\r\n      raiseAmount: '$180,000',\r\n      cakeToBurn: '$0',\r\n      distributionRatio: 0.3,\r\n    },\r\n    poolUnlimited: {\r\n      saleAmount: '16,800,000 DPT',\r\n      raiseAmount: '$420,000',\r\n      cakeToBurn: '$0',\r\n      distributionRatio: 0.7,\r\n    },\r\n    currency: tokens.cake,\r\n    token: tokens.dpt,\r\n    releaseBlockNumber: 13491500,\r\n    campaignId: '511160000',\r\n    articleUrl: 'https://pancakeswap.finance/voting/proposal/QmQqpknHvuQwshVP259qFxfQsxiWbQ9SLMebohDeRwRzKg',\r\n    tokenOfferingPrice: 0.025,\r\n    version: 3,\r\n  },\r\n  {\r\n    id: 'santos',\r\n    address: '0x69B5D2Ab0cf532a0E22Fc0dEB0c5135639892468',\r\n    isActive: false,\r\n    name: 'FC Santos Fan Token (SANTOS)',\r\n    poolBasic: {\r\n      saleAmount: '120,000 SANTOS',\r\n      raiseAmount: '$300,000',\r\n      cakeToBurn: '$0',\r\n      distributionRatio: 0.3,\r\n    },\r\n    poolUnlimited: {\r\n      saleAmount: '280,000 SANTOS',\r\n      raiseAmount: '$700,000',\r\n      cakeToBurn: '$0',\r\n      distributionRatio: 0.7,\r\n    },\r\n    currency: tokens.cake,\r\n    token: tokens.santos,\r\n    releaseBlockNumber: 13097777,\r\n    campaignId: '511150000',\r\n    articleUrl: 'https://pancakeswap.finance/voting/proposal/QmUqRxjwZCWeZWEdgV2vHJ6hex7jMW7i247NKFas73xc8j',\r\n    tokenOfferingPrice: 2.5,\r\n    version: 2,\r\n  },\r\n  {\r\n    id: 'porto',\r\n    address: '0xFDFf29dD0b4DD49Bf5E991A30b8593eaA34B4580',\r\n    isActive: false,\r\n    name: 'FC Porto Fan Token (PORTO)',\r\n    poolBasic: {\r\n      saleAmount: '250,000 PORTO',\r\n      raiseAmount: '$500,000',\r\n      cakeToBurn: '$0',\r\n      distributionRatio: 0.5,\r\n    },\r\n    poolUnlimited: {\r\n      saleAmount: '250,000 PORTO',\r\n      raiseAmount: '$500,000',\r\n      cakeToBurn: '$0',\r\n      distributionRatio: 0.5,\r\n    },\r\n    currency: tokens.cake,\r\n    token: tokens.porto,\r\n    releaseBlockNumber: 12687500,\r\n    campaignId: '511140000',\r\n    articleUrl: 'https://pancakeswap.finance/voting/proposal/QmaakXYpydAwCgTuSPe3R2ZNraRtkCbK6iBRqBCCdzqKEG',\r\n    tokenOfferingPrice: 2,\r\n    version: 2,\r\n  },\r\n  {\r\n    id: 'dar',\r\n    address: '0xb6eF1f36220397c434A6B15dc5EA616CFFDF58CE',\r\n    isActive: false,\r\n    name: 'Mines of Dalarnia (DAR)',\r\n    poolBasic: {\r\n      saleAmount: '6,000,000 DAR',\r\n      raiseAmount: '$450,000',\r\n      cakeToBurn: '$0',\r\n      distributionRatio: 0.5,\r\n    },\r\n    poolUnlimited: {\r\n      saleAmount: '6,000,000 DAR',\r\n      raiseAmount: '$450,000',\r\n      cakeToBurn: '$0',\r\n      distributionRatio: 0.5,\r\n    },\r\n    currency: tokens.cake,\r\n    token: tokens.dar,\r\n    releaseBlockNumber: 12335455,\r\n    campaignId: '511130000',\r\n    articleUrl: 'https://pancakeswap.finance/voting/proposal/QmeJenHcbY45eQxLRebzvpNk5qSCrj2wM1t4EAMHotFoJL',\r\n    tokenOfferingPrice: 0.075,\r\n    version: 2,\r\n  },\r\n  {\r\n    id: 'dkt',\r\n    address: '0x89ab9852155A794e371095d863aEAa2DF198067C',\r\n    isActive: false,\r\n    name: 'Duelist King (DKT)',\r\n    poolBasic: {\r\n      saleAmount: '75,000 DKT',\r\n      raiseAmount: '$131,250',\r\n      cakeToBurn: '$65,625',\r\n      distributionRatio: 0.3,\r\n    },\r\n    poolUnlimited: {\r\n      saleAmount: '175,000 DKT',\r\n      raiseAmount: '$306,250',\r\n      cakeToBurn: '$153,125',\r\n      distributionRatio: 0.7,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.dkt,\r\n    releaseBlockNumber: 12130750,\r\n    campaignId: '511120000',\r\n    articleUrl: 'https://pancakeswap.finance/voting/proposal/QmTRWdW9a65fAkyJy1wrAJRU548fNMAZhRUDrSxzMDLmwk',\r\n    tokenOfferingPrice: 1.75,\r\n    version: 2,\r\n  },\r\n  {\r\n    id: 'kalmar',\r\n    address: '0x1aFB32b76696CdF05593Ca3f3957AEFB23a220FB',\r\n    isActive: false,\r\n    name: 'Kalmar (KALM)',\r\n    poolBasic: {\r\n      saleAmount: '375,000 KALM',\r\n      raiseAmount: '$750,000',\r\n      cakeToBurn: '$375,000',\r\n      distributionRatio: 0.3,\r\n    },\r\n    poolUnlimited: {\r\n      saleAmount: '875,000 KALM',\r\n      raiseAmount: '$2,500,000',\r\n      cakeToBurn: '$1,250,000',\r\n      distributionRatio: 0.7,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.kalm,\r\n    releaseBlockNumber: 7707736,\r\n    campaignId: '511110000',\r\n    articleUrl: 'https://pancakeswap.medium.com/kalmar-kalm-ifo-to-be-hosted-on-pancakeswap-4540059753e4',\r\n    tokenOfferingPrice: 2.0,\r\n    version: 2,\r\n  },\r\n  {\r\n    id: 'hotcross',\r\n    address: '0xb664cdbe385656F8c54031c0CB12Cea55b584b63',\r\n    isActive: false,\r\n    name: 'Hot Cross (HOTCROSS)',\r\n    poolBasic: {\r\n      saleAmount: '15,000,000 HOTCROSS',\r\n      raiseAmount: '$750,000',\r\n      cakeToBurn: '$375,000',\r\n      distributionRatio: 0.3,\r\n    },\r\n    poolUnlimited: {\r\n      saleAmount: '35,000,000 HOTCROSS',\r\n      raiseAmount: '$1,750,000',\r\n      cakeToBurn: '$875,000',\r\n      distributionRatio: 0.7,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.hotcross,\r\n    releaseBlockNumber: 7477900,\r\n    campaignId: '511100000',\r\n    articleUrl: 'https://pancakeswap.medium.com/hot-cross-hotcross-ifo-to-be-hosted-on-pancakeswap-10e70f1f6841',\r\n    tokenOfferingPrice: 0.05,\r\n    version: 2,\r\n  },\r\n  {\r\n    id: 'horizon',\r\n    address: '0x6137B571f7F1E44839ae10310a08be86D1A4D03B',\r\n    isActive: false,\r\n    name: 'Horizon Protocol (HZN)',\r\n    poolBasic: {\r\n      saleAmount: '3,000,000 HZN',\r\n      raiseAmount: '$750,000',\r\n      cakeToBurn: '$375,000',\r\n      distributionRatio: 0.3,\r\n    },\r\n    poolUnlimited: {\r\n      saleAmount: '7,000,000 HZN',\r\n      raiseAmount: '$1,750,000',\r\n      cakeToBurn: '$875,000',\r\n      distributionRatio: 0.7,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.hzn,\r\n    releaseBlockNumber: 6581111,\r\n    campaignId: '511090000',\r\n    articleUrl: 'https://pancakeswap.medium.com/horizon-protocol-hzn-ifo-to-be-hosted-on-pancakeswap-51f79601c9d8',\r\n    tokenOfferingPrice: 0.25,\r\n    version: 2,\r\n  },\r\n  {\r\n    id: 'belt',\r\n    address: '0xc9FBedC033a1c479a6AD451ffE463025E92a1d38',\r\n    isActive: false,\r\n    name: 'Belt (BELT)',\r\n    poolUnlimited: {\r\n      saleAmount: '150,000 BELT',\r\n      raiseAmount: '$3,000,000',\r\n      cakeToBurn: '$1,500,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.belt,\r\n    releaseBlockNumber: 5493919,\r\n    campaignId: '511080000',\r\n    articleUrl: 'https://pancakeswap.medium.com/belt-fi-belt-ifo-to-be-hosted-on-pancakeswap-353585117e32',\r\n    tokenOfferingPrice: null,\r\n    version: 1,\r\n  },\r\n  {\r\n    id: 'watch',\r\n    address: '0x55344b55C71Ad8834C397E6e08dF5195cF84fe6d',\r\n    isActive: false,\r\n    name: 'Yieldwatch (WATCH)',\r\n    poolUnlimited: {\r\n      saleAmount: '8,000,000 WATCH',\r\n      raiseAmount: '$800,000',\r\n      cakeToBurn: '$400,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.watch,\r\n    releaseBlockNumber: 5294924,\r\n    campaignId: '511070000',\r\n    articleUrl: 'https://pancakeswap.medium.com/yieldwatch-watch-ifo-to-be-hosted-on-pancakeswap-d24301f17241',\r\n    tokenOfferingPrice: null,\r\n    version: 1,\r\n  },\r\n  {\r\n    id: 'berry',\r\n    address: '0x5d028cE3435B2bB9AceBfaC599EEbA1ccD63d7dd',\r\n    isActive: false,\r\n    name: 'Berry (BRY)',\r\n    poolUnlimited: {\r\n      saleAmount: '2,000,000 BRY',\r\n      raiseAmount: '$1,000,000',\r\n      cakeToBurn: '$500,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.bry,\r\n    releaseBlockNumber: 4750968,\r\n    campaignId: '511060000',\r\n    articleUrl: 'https://pancakeswap.medium.com/berry-bry-ifo-to-be-hosted-on-pancakeswap-b4f9095e9cdb',\r\n    tokenOfferingPrice: null,\r\n    version: 1,\r\n  },\r\n  {\r\n    id: 'soteria',\r\n    address: '0x9C21123D94b93361a29B2C2EFB3d5CD8B17e0A9e',\r\n    isActive: false,\r\n    name: 'Soteria (wSOTE)',\r\n    poolUnlimited: {\r\n      saleAmount: '1,500,000 wSOTE',\r\n      raiseAmount: '$525,000',\r\n      cakeToBurn: '$262,500',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.wsote,\r\n    releaseBlockNumber: 4086064,\r\n    campaignId: '511050000',\r\n    articleUrl: 'https://pancakeswap.medium.com/soteria-sota-ifo-to-be-hosted-on-pancakeswap-64b727c272ae',\r\n    tokenOfferingPrice: null,\r\n    version: 1,\r\n  },\r\n  {\r\n    id: 'helmet',\r\n    address: '0xa32509d760ee47Eb2Be96D338b5d69B5FBa4eFEB',\r\n    isActive: false,\r\n    name: 'Helmet.insure (Helmet)',\r\n    poolUnlimited: {\r\n      saleAmount: '10,000,000 Helmet',\r\n      raiseAmount: '$1,000,000',\r\n      cakeToBurn: '$500,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.helmet,\r\n    releaseBlockNumber: 3771926,\r\n    campaignId: '511040000',\r\n    articleUrl: 'https://pancakeswap.medium.com/1-000-000-helmet-helmet-ifo-to-be-hosted-on-pancakeswap-3379a2a89a67',\r\n    tokenOfferingPrice: null,\r\n    version: 1,\r\n  },\r\n  {\r\n    id: 'tenet',\r\n    address: '0xB922aA19A2603A07C6C9ED6c236618C9bac51f06',\r\n    isActive: false,\r\n    name: 'Tenet (TEN)',\r\n    poolUnlimited: {\r\n      saleAmount: '1,000,000 TEN',\r\n      raiseAmount: '$1,000,000',\r\n      cakeToBurn: '$500,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.ten,\r\n    releaseBlockNumber: 3483883,\r\n    campaignId: '511030000',\r\n    articleUrl: 'https://pancakeswap.medium.com/tenet-ten-ifo-to-be-hosted-on-pancakeswap-b7e1eb4cb272',\r\n    tokenOfferingPrice: null,\r\n    version: 1,\r\n  },\r\n  {\r\n    id: 'ditto',\r\n    address: '0x570c9eB19553526Fb35895a531928E19C7D20788',\r\n    isActive: false,\r\n    name: 'Ditto (DITTO)',\r\n    poolUnlimited: {\r\n      saleAmount: '700,000 DITTO',\r\n      raiseAmount: '$630,000',\r\n      cakeToBurn: '$315,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.ditto,\r\n    releaseBlockNumber: 3279767,\r\n    campaignId: '511020000',\r\n    articleUrl: 'https://pancakeswap.medium.com/ditto-money-ditto-ifo-to-be-hosted-on-pancakeswap-342da3059a66',\r\n    tokenOfferingPrice: null,\r\n    version: 1,\r\n  },\r\n  {\r\n    id: 'blink',\r\n    address: '0x44a9Cc8463EC00937242b660BF65B10365d99baD',\r\n    isActive: false,\r\n    name: 'BLINk (BLK)',\r\n    poolUnlimited: {\r\n      saleAmount: '100,000,000 BLINK',\r\n      raiseAmount: '$1,000,000',\r\n      cakeToBurn: '$500,000',\r\n      distributionRatio: 1,\r\n    },\r\n    currency: cakeBnbLpToken,\r\n    token: tokens.blink,\r\n    releaseBlockNumber: 3279767,\r\n    campaignId: '511010000',\r\n    articleUrl: 'https://medium.com/pancakeswap/1-000-000-ifo-blink-joins-pancakeswap-15841800bdd8',\r\n    tokenOfferingPrice: null,\r\n    version: 1,\r\n  },\r\n]\r\n\r\nexport default ifos\r\n","export default {\r\n  masterChef: {\r\n    4002: '0x1d32c2945C8FDCBc7156c553B7cEa4325a17f4f9',\r\n    250: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n  },\r\n  sousChef: {\r\n    4002: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n    250: '0x6ab8463a4185b80905e05a9ff80a2d6b714b9e95',\r\n  },\r\n  lotteryV2: {\r\n    4002: '0x5790c3534F30437641541a0FA04C992799602998',\r\n    250: '0x5aF6D33DE2ccEC94efb1bDF8f92Bd58085432d2c',\r\n  },\r\n  multiCall: {\r\n    250: '0xfF6FD90A470Aaa0c1B8A54681746b07AcdFedc9B',\r\n    4002: '0x8F3273Fb89B075b1645095ABaC6ed17B2d4Bc576',\r\n  },\r\n  pancakeProfile: {\r\n    250: '0xDf4dBf6536201370F95e06A0F8a7a70fE40E388a',\r\n    4002: '0x4B683C7E13B6d5D7fd1FeA9530F451954c1A7c8A',\r\n  },\r\n  pancakeRabbits: {\r\n    250: '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07',\r\n    4002: '0x60935F36e4631F73f0f407e68642144e07aC7f5E',\r\n  },\r\n  bunnyFactory: {\r\n    250: '0xfa249Caa1D16f75fa159F7DFBAc0cC5EaB48CeFf',\r\n    4002: '0x707CBF373175fdB601D34eeBF2Cf665d08f01148',\r\n  },\r\n  claimRefund: {\r\n    250: '0xE7e53A7e9E3Cf6b840f167eF69519175c497e149',\r\n    4002: '',\r\n  },\r\n  pointCenterIfo: {\r\n    250: '0x3C6919b132462C1FEc572c6300E83191f4F0012a',\r\n    4002: '0xd2Ac1B1728Bb1C11ae02AB6e75B76Ae41A2997e3',\r\n  },\r\n  bunnySpecial: {\r\n    250: '0xFee8A195570a18461146F401d6033f5ab3380849',\r\n    4002: '0x7b7b1583De1DeB32Ce6605F6deEbF24A0671c17C',\r\n  },\r\n  tradingCompetition: {\r\n    250: '0xd718baa0B1F4f70dcC8458154042120FFE0DEFFA',\r\n    4002: '0xC787F45B833721ED3aC46E99b703B3E1E01abb97',\r\n  },\r\n  tradingCompetitionV2: {\r\n    250: '0xA8FECf847e28aa1Df39E995a45b7FCfb91b676d4',\r\n    4002: '',\r\n  },\r\n  easterNft: {\r\n    250: '0x23c41D28A239dDCAABd1bb1deF8d057189510066',\r\n    4002: '0x24ec6962dbe874F6B67B5C50857565667fA0854F',\r\n  },\r\n  cakeVault: {\r\n    250: '0xa80240Eb5d7E05d3F250cF000eEc0891d00b51CC',\r\n    4002: '',\r\n  },\r\n  ifoPool: {\r\n    250: '0x1B2A2f6ed4A1401E8C73B4c2B6172455ce2f78E8',\r\n    4002: '',\r\n  },\r\n  predictions: {\r\n    250: '0x18B2A687610328590Bc8F2e5fEdDe3b582A49cdA',\r\n    4002: '',\r\n  },\r\n  chainlinkOracle: {\r\n    250: '0xD276fCF34D54A926773c399eBAa772C12ec394aC',\r\n    4002: '',\r\n  },\r\n  bunnySpecialCakeVault: {\r\n    250: '0x5B4a770Abe7Eafb2601CA4dF9d73EA99363E60a4',\r\n    4002: '',\r\n  },\r\n  bunnySpecialPrediction: {\r\n    250: '0x342c99e9aC24157657095eC69CB04b73257e7A9C',\r\n    4002: '',\r\n  },\r\n  bunnySpecialLottery: {\r\n    250: '0x24ED31d31C5868e5a96aA77fdcB890f3511fa0b2',\r\n    4002: '0x382cB497110F398F0f152cae82821476AE51c9cF',\r\n  },\r\n  bunnySpecialXmas: {\r\n    250: '0x59EdDF3c21509dA3b0aCCd7c5ccc596d930f4783',\r\n    4002: '',\r\n  },\r\n  farmAuction: {\r\n    250: '0xb92Ab7c1edcb273AbA24b0656cEb3681654805D2',\r\n    4002: '0x3F9602593b4f7C67ab045DB51BbDEa94E40fA9Fe',\r\n  },\r\n  AnniversaryAchievement: {\r\n    250: '0x787980da5491118C3cB33B21aB50c8c379D2C552',\r\n    4002: '0x981aE96378e770DE44F89cD9175E708f9EDB70a9',\r\n  },\r\n  nftMarket: {\r\n    250: '0x17539cCa21C7933Df5c980172d22659B8C345C5A',\r\n    4002: '0x7f9f37ddcaa33893f9beb3d8748c8d6bfbde6ab2',\r\n  },\r\n  nftSale: {\r\n    250: '0x29fE7148636b7Ae0b1E53777b28dfbaA9327af8E',\r\n    4002: '0xe486De509c5381cbdBF3e71F57D7F1f7570f5c46',\r\n  },\r\n  pancakeSquad: {\r\n    250: '0x0a8901b0E25DEb55A87524f0cC164E9644020EBA',\r\n    4002: '0xfC0c3F11fDA72Cb9A56F28Ec8D44C0ae4B3ABF86',\r\n  },\r\n  presale: {\r\n    250: '0x746fDe808cD1629217b17205F813fF3E5D152103',\r\n    4002: '',\r\n  },\r\n}\r\n","import { ChainId } from '@pancakeswap/sdk'\r\nimport addresses from 'config/constants/contracts'\r\nimport { Address } from 'config/constants/types'\r\nimport { VaultKey } from 'state/types'\r\n\r\nexport const getAddress = (address: Address): string => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  return address[chainId] ? address[chainId] : address[ChainId.MAINNET]\r\n}\r\n\r\nexport const getMasterChefAddress = () => {\r\n  return getAddress(addresses.masterChef)\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return getAddress(addresses.multiCall)\r\n}\r\nexport const getLotteryV2Address = () => {\r\n  return getAddress(addresses.lotteryV2)\r\n}\r\nexport const getPancakeProfileAddress = () => {\r\n  return getAddress(addresses.pancakeProfile)\r\n}\r\nexport const getPancakeRabbitsAddress = () => {\r\n  return getAddress(addresses.pancakeRabbits)\r\n}\r\nexport const getBunnyFactoryAddress = () => {\r\n  return getAddress(addresses.bunnyFactory)\r\n}\r\nexport const getClaimRefundAddress = () => {\r\n  return getAddress(addresses.claimRefund)\r\n}\r\nexport const getPointCenterIfoAddress = () => {\r\n  return getAddress(addresses.pointCenterIfo)\r\n}\r\nexport const getBunnySpecialAddress = () => {\r\n  return getAddress(addresses.bunnySpecial)\r\n}\r\nexport const getTradingCompetitionAddress = () => {\r\n  return getAddress(addresses.tradingCompetition)\r\n}\r\nexport const getTradingCompetitionAddressV2 = () => {\r\n  return getAddress(addresses.tradingCompetitionV2)\r\n}\r\nexport const getEasterNftAddress = () => {\r\n  return getAddress(addresses.easterNft)\r\n}\r\n\r\nexport const getVaultPoolAddress = (vaultKey: VaultKey) => {\r\n  if (!vaultKey) {\r\n    return null\r\n  }\r\n  return getAddress(addresses[vaultKey])\r\n}\r\n\r\nexport const getCakeVaultAddress = () => {\r\n  return getAddress(addresses.cakeVault)\r\n}\r\nexport const getIfoPoolAddress = () => {\r\n  return getAddress(addresses.ifoPool)\r\n}\r\nexport const getPredictionsAddress = () => {\r\n  return getAddress(addresses.predictions)\r\n}\r\nexport const getChainlinkOracleAddress = () => {\r\n  return getAddress(addresses.chainlinkOracle)\r\n}\r\nexport const getBunnySpecialCakeVaultAddress = () => {\r\n  return getAddress(addresses.bunnySpecialCakeVault)\r\n}\r\nexport const getBunnySpecialPredictionAddress = () => {\r\n  return getAddress(addresses.bunnySpecialPrediction)\r\n}\r\nexport const getBunnySpecialLotteryAddress = () => {\r\n  return getAddress(addresses.bunnySpecialLottery)\r\n}\r\nexport const getBunnySpecialXmasAddress = () => {\r\n  return getAddress(addresses.bunnySpecialXmas)\r\n}\r\nexport const getFarmAuctionAddress = () => {\r\n  return getAddress(addresses.farmAuction)\r\n}\r\nexport const getAnniversaryAchievement = () => {\r\n  return getAddress(addresses.AnniversaryAchievement)\r\n}\r\nexport const getNftMarketAddress = () => {\r\n  return getAddress(addresses.nftMarket)\r\n}\r\nexport const getNftSaleAddress = () => {\r\n  return getAddress(addresses.nftSale)\r\n}\r\nexport const getPancakeSquadAddress = () => {\r\n  return getAddress(addresses.pancakeSquad)\r\n}\r\nexport const getPresaleAddress = () => {\r\n  return getAddress(addresses.presale)\r\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { BlockState } from '../types'\r\n\r\nconst initialState: BlockState = { currentBlock: 0, initialBlock: 0 }\r\n\r\nexport const blockSlice = createSlice({\r\n  name: 'Block',\r\n  initialState,\r\n  reducers: {\r\n    setBlock: (state, action: PayloadAction<number>) => {\r\n      if (state.initialBlock === 0) {\r\n        state.initialBlock = action.payload\r\n      }\r\n\r\n      state.currentBlock = action.payload\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setBlock } = blockSlice.actions\r\n\r\nexport default blockSlice.reducer\r\n","import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'\r\nimport { pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport {\r\n  getNftsFromCollectionApi,\r\n  getNftsMarketData,\r\n  getCollectionsApi,\r\n  getCollectionsSg,\r\n  getUserActivity,\r\n  combineCollectionData,\r\n  getCollectionSg,\r\n  getCollectionApi,\r\n  getNftsFromDifferentCollectionsApi,\r\n  getCompleteAccountNftData,\r\n  getNftsByBunnyIdSg,\r\n  getMarketDataForTokenIds,\r\n  getMetadataWithFallback,\r\n  getPancakeBunniesAttributesField,\r\n  combineApiAndSgResponseToNftToken,\r\n  fetchNftsFiltered,\r\n} from './helpers'\r\nimport {\r\n  State,\r\n  Collection,\r\n  ApiCollections,\r\n  TokenIdWithCollectionAddress,\r\n  NFTMarketInitializationState,\r\n  UserNftInitializationState,\r\n  NftToken,\r\n  NftLocation,\r\n  ApiSingleTokenData,\r\n  NftAttribute,\r\n  NftFilterLoadingState,\r\n  NftFilter,\r\n  NftActivityFilter,\r\n  MarketEvent,\r\n} from './types'\r\n\r\nconst initialNftFilterState: NftFilter = {\r\n  loadingState: NftFilterLoadingState.IDLE,\r\n  activeFilters: {},\r\n  showOnlyOnSale: true,\r\n  ordering: {\r\n    field: 'currentAskPrice',\r\n    direction: 'asc',\r\n  },\r\n}\r\n\r\nconst initialNftActivityFilterState: NftActivityFilter = {\r\n  typeFilters: [],\r\n}\r\n\r\nconst initialState: State = {\r\n  initializationState: NFTMarketInitializationState.UNINITIALIZED,\r\n  data: {\r\n    collections: {},\r\n    nfts: {},\r\n    filters: {},\r\n    activityFilters: {},\r\n    loadingState: {\r\n      isUpdatingPancakeBunnies: false,\r\n      latestPancakeBunniesUpdateAt: 0,\r\n    },\r\n    users: {},\r\n    user: {\r\n      userNftsInitializationState: UserNftInitializationState.UNINITIALIZED,\r\n      nfts: [],\r\n      activity: {\r\n        initializationState: UserNftInitializationState.UNINITIALIZED,\r\n        askOrderHistory: [],\r\n        buyTradeHistory: [],\r\n        sellTradeHistory: [],\r\n      },\r\n    },\r\n  },\r\n}\r\n\r\n/**\r\n * Fetch all collections data by combining data from the API (static metadata) and the Subgraph (dynamic market data)\r\n */\r\nexport const fetchCollections = createAsyncThunk<Record<string, Collection>>('nft/fetchCollections', async () => {\r\n  const [collections, collectionsMarket] = await Promise.all([getCollectionsApi(), getCollectionsSg()])\r\n  return combineCollectionData(collections?.data ?? [], collectionsMarket)\r\n})\r\n\r\n/**\r\n * Fetch collection data by combining data from the API (static metadata) and the Subgraph (dynamic market data)\r\n */\r\nexport const fetchCollection = createAsyncThunk<Record<string, Collection>, string>(\r\n  'nft/fetchCollection',\r\n  async (collectionAddress) => {\r\n    const [collection, collectionMarket] = await Promise.all([\r\n      getCollectionApi(collectionAddress),\r\n      getCollectionSg(collectionAddress),\r\n    ])\r\n\r\n    return combineCollectionData([collection], [collectionMarket])\r\n  },\r\n)\r\n\r\n/**\r\n * Fetch all NFT data for a collections by combining data from the API (static metadata)\r\n * and the Subgraph (dynamic market data)\r\n * @param collectionAddress\r\n */\r\nexport const fetchNftsFromCollections = createAsyncThunk<\r\n  NftToken[],\r\n  { collectionAddress: string; page: number; size: number }\r\n>('nft/fetchNftsFromCollections', async ({ collectionAddress, page, size }) => {\r\n  try {\r\n    if (collectionAddress === pancakeBunniesAddress) {\r\n      // PancakeBunnies don't need to pre-fetch \"all nfts\" from the collection\r\n      // When user visits IndividualNFTPage required nfts will be fetched via bunny id\r\n      return []\r\n    }\r\n\r\n    const nfts = await getNftsFromCollectionApi(collectionAddress, size, page)\r\n\r\n    if (!nfts?.data) {\r\n      return []\r\n    }\r\n\r\n    const tokenIds = Object.values(nfts.data).map((nft) => nft.tokenId)\r\n    const nftsMarket = await getMarketDataForTokenIds(collectionAddress, tokenIds)\r\n\r\n    return tokenIds.map((id) => {\r\n      const apiMetadata = nfts.data[id]\r\n      const marketData = nftsMarket.find((nft) => nft.tokenId === id)\r\n\r\n      return {\r\n        tokenId: id,\r\n        name: apiMetadata.name,\r\n        description: apiMetadata.description,\r\n        collectionName: apiMetadata.collection.name,\r\n        collectionAddress,\r\n        image: apiMetadata.image,\r\n        attributes: apiMetadata.attributes,\r\n        marketData,\r\n      }\r\n    })\r\n  } catch (error) {\r\n    console.error(`Failed to fetch collection NFTs for ${collectionAddress}`, error)\r\n    return []\r\n  }\r\n})\r\n\r\nexport const filterNftsFromCollection = createAsyncThunk<\r\n  NftToken[],\r\n  { collectionAddress: string; nftFilters: Record<string, NftAttribute> }\r\n>('nft/filterNftsFromCollection', async ({ collectionAddress, nftFilters }) => {\r\n  try {\r\n    const attrParams = Object.values(nftFilters).reduce(\r\n      (accum, attr) => ({\r\n        ...accum,\r\n        [attr.traitType]: attr.value,\r\n      }),\r\n      {},\r\n    )\r\n    if (isEmpty(attrParams)) {\r\n      return []\r\n    }\r\n    const attrFilters = await fetchNftsFiltered(collectionAddress, attrParams)\r\n\r\n    // Fetch market data for each token returned\r\n    const tokenIds = Object.values(attrFilters.data).map((apiToken) => apiToken.tokenId)\r\n    const marketData = await getNftsMarketData({ tokenId_in: tokenIds, collection: collectionAddress.toLowerCase() })\r\n\r\n    const nftTokens: NftToken[] = Object.values(attrFilters.data).map((apiToken) => {\r\n      const apiTokenMarketData = marketData.find((tokenMarketData) => tokenMarketData.tokenId === apiToken.tokenId)\r\n\r\n      return {\r\n        tokenId: apiToken.tokenId,\r\n        name: apiToken.name,\r\n        description: apiToken.description,\r\n        collectionName: apiToken.collection.name,\r\n        collectionAddress,\r\n        image: apiToken.image,\r\n        attributes: apiToken.attributes,\r\n        marketData: apiTokenMarketData,\r\n      }\r\n    })\r\n\r\n    return nftTokens\r\n  } catch {\r\n    return []\r\n  }\r\n})\r\n\r\n/**\r\n * This action keeps data on the individual PancakeBunny page up-to-date. Operation is a twofold\r\n * 1. Update existing NFTs in the state in case some were sold or got price modified\r\n * 2. Fetch 30 more NFTs with specified bunny id\r\n */\r\nexport const fetchNewPBAndUpdateExisting = createAsyncThunk<\r\n  NftToken[],\r\n  {\r\n    bunnyId: string\r\n    existingTokensWithBunnyId: string[]\r\n    allExistingPBTokenIds: string[]\r\n    existingMetadata: ApiSingleTokenData\r\n    orderDirection: 'asc' | 'desc'\r\n  }\r\n>(\r\n  'nft/fetchNewPBAndUpdateExisting',\r\n  async ({ bunnyId, existingTokensWithBunnyId, allExistingPBTokenIds, existingMetadata, orderDirection }) => {\r\n    try {\r\n      // 1. Update existing NFTs in the state in case some were sold or got price modified\r\n      const [updatedNfts, updatedNftsMarket] = await Promise.all([\r\n        getNftsFromCollectionApi(pancakeBunniesAddress),\r\n        getMarketDataForTokenIds(pancakeBunniesAddress, allExistingPBTokenIds),\r\n      ])\r\n\r\n      if (!updatedNfts?.data) {\r\n        return []\r\n      }\r\n      const updatedTokens = updatedNftsMarket.map((marketData) => {\r\n        const apiMetadata = getMetadataWithFallback(updatedNfts.data, marketData.otherId)\r\n        const attributes = getPancakeBunniesAttributesField(marketData.otherId)\r\n        return combineApiAndSgResponseToNftToken(apiMetadata, marketData, attributes)\r\n      })\r\n\r\n      // 2. Fetch 30 more NFTs with specified bunny id\r\n      let newNfts = { data: { [bunnyId]: existingMetadata } }\r\n\r\n      if (!existingMetadata) {\r\n        newNfts = await getNftsFromCollectionApi(pancakeBunniesAddress)\r\n      }\r\n      const nftsMarket = await getNftsByBunnyIdSg(bunnyId, existingTokensWithBunnyId, orderDirection)\r\n\r\n      if (!newNfts?.data) {\r\n        return updatedTokens\r\n      }\r\n\r\n      const moreTokensWithRequestedBunnyId = nftsMarket.map((marketData) => {\r\n        const apiMetadata = getMetadataWithFallback(newNfts.data, marketData.otherId)\r\n        const attributes = getPancakeBunniesAttributesField(marketData.otherId)\r\n        return combineApiAndSgResponseToNftToken(apiMetadata, marketData, attributes)\r\n      })\r\n      return [...updatedTokens, ...moreTokensWithRequestedBunnyId]\r\n    } catch (error) {\r\n      console.error(`Failed to update PancakeBunnies NFTs`, error)\r\n      return []\r\n    }\r\n  },\r\n)\r\n\r\nexport const fetchUserNfts = createAsyncThunk<\r\n  NftToken[],\r\n  { account: string; profileNftWithCollectionAddress?: TokenIdWithCollectionAddress; collections: ApiCollections }\r\n>('nft/fetchUserNfts', async ({ account, profileNftWithCollectionAddress, collections }) => {\r\n  const completeNftData = await getCompleteAccountNftData(account, collections, profileNftWithCollectionAddress)\r\n  return completeNftData\r\n})\r\n\r\nexport const updateUserNft = createAsyncThunk<\r\n  NftToken,\r\n  { tokenId: string; collectionAddress: string; location?: NftLocation }\r\n>('nft/updateUserNft', async ({ tokenId, collectionAddress, location = NftLocation.WALLET }) => {\r\n  const marketDataForNft = await getNftsMarketData({\r\n    tokenId_in: [tokenId],\r\n    collection: collectionAddress.toLowerCase(),\r\n  })\r\n  const metadataForNft = await getNftsFromDifferentCollectionsApi([{ tokenId, collectionAddress }])\r\n  const completeNftData = { ...metadataForNft[0], location, marketData: marketDataForNft[0] }\r\n\r\n  return completeNftData\r\n})\r\n\r\nexport const removeUserNft = createAsyncThunk<string, { tokenId: string }>(\r\n  'nft/removeUserNft',\r\n  async ({ tokenId }) => tokenId,\r\n)\r\n\r\nexport const addUserNft = createAsyncThunk<\r\n  NftToken,\r\n  { tokenId: string; collectionAddress: string; nftLocation?: NftLocation }\r\n>('nft/addUserNft', async ({ tokenId, collectionAddress, nftLocation = NftLocation.WALLET }) => {\r\n  const marketDataForNft = await getNftsMarketData({\r\n    tokenId_in: [tokenId],\r\n    collection: collectionAddress.toLowerCase(),\r\n  })\r\n  const metadataForNft = await getNftsFromDifferentCollectionsApi([{ tokenId, collectionAddress }])\r\n\r\n  return {\r\n    ...metadataForNft[0],\r\n    location: nftLocation,\r\n    marketData: marketDataForNft[0],\r\n  }\r\n})\r\n\r\nexport const fetchUserActivity = createAsyncThunk('nft/fetchUserActivity', async (address: string) => {\r\n  const userActivity = await getUserActivity(address.toLocaleLowerCase())\r\n  return userActivity\r\n})\r\n\r\nexport const NftMarket = createSlice({\r\n  name: 'NftMarket',\r\n  initialState,\r\n  reducers: {\r\n    removeAllFilters: (state, action: PayloadAction<string>) => {\r\n      state.data.filters[action.payload] = { ...initialNftFilterState }\r\n      state.data.nfts[action.payload] = []\r\n    },\r\n    addActivityTypeFilters: (state, action: PayloadAction<{ collection: string; field: MarketEvent }>) => {\r\n      if (state.data.activityFilters[action.payload.collection]) {\r\n        state.data.activityFilters[action.payload.collection].typeFilters.push(action.payload.field)\r\n      } else {\r\n        state.data.activityFilters[action.payload.collection] = {\r\n          ...initialNftActivityFilterState,\r\n          typeFilters: [action.payload.field],\r\n        }\r\n      }\r\n    },\r\n    removeActivityTypeFilters: (state, action: PayloadAction<{ collection: string; field: MarketEvent }>) => {\r\n      if (state.data.activityFilters[action.payload.collection]) {\r\n        state.data.activityFilters[action.payload.collection].typeFilters = state.data.activityFilters[\r\n          action.payload.collection\r\n        ].typeFilters.filter((activeFilter) => activeFilter !== action.payload.field)\r\n      }\r\n    },\r\n    removeAllActivityFilters: (state, action: PayloadAction<string>) => {\r\n      state.data.activityFilters[action.payload] = { ...initialNftActivityFilterState }\r\n    },\r\n    setOrdering: (state, action: PayloadAction<{ collection: string; field: string; direction: 'asc' | 'desc' }>) => {\r\n      if (state.data.filters[action.payload.collection]) {\r\n        state.data.filters[action.payload.collection].ordering = {\r\n          field: action.payload.field,\r\n          direction: action.payload.direction,\r\n        }\r\n      } else {\r\n        state.data.filters[action.payload.collection] = {\r\n          ...initialNftFilterState,\r\n          ordering: {\r\n            field: action.payload.field,\r\n            direction: action.payload.direction,\r\n          },\r\n        }\r\n      }\r\n    },\r\n    setShowOnlyOnSale: (state, action: PayloadAction<{ collection: string; showOnlyOnSale: boolean }>) => {\r\n      if (state.data.filters[action.payload.collection]) {\r\n        state.data.filters[action.payload.collection].showOnlyOnSale = action.payload.showOnlyOnSale\r\n      } else {\r\n        state.data.filters[action.payload.collection] = {\r\n          ...initialNftFilterState,\r\n          showOnlyOnSale: action.payload.showOnlyOnSale,\r\n        }\r\n      }\r\n    },\r\n    resetUserNftState: (state) => {\r\n      state.data.user = { ...initialState.data.user }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(filterNftsFromCollection.pending, (state, action) => {\r\n      const { collectionAddress } = action.meta.arg\r\n      if (state.data.filters[collectionAddress]) {\r\n        state.data.filters[collectionAddress].loadingState = NftFilterLoadingState.LOADING\r\n      } else {\r\n        state.data.filters[collectionAddress] = {\r\n          ...initialNftFilterState,\r\n          loadingState: NftFilterLoadingState.LOADING,\r\n        }\r\n      }\r\n    })\r\n    builder.addCase(filterNftsFromCollection.fulfilled, (state, action) => {\r\n      const { collectionAddress, nftFilters } = action.meta.arg\r\n\r\n      state.data.filters[collectionAddress] = {\r\n        ...state.data.filters[collectionAddress],\r\n        loadingState: NftFilterLoadingState.IDLE,\r\n        activeFilters: nftFilters,\r\n      }\r\n      state.data.nfts[collectionAddress] = action.payload\r\n    })\r\n\r\n    builder.addCase(fetchCollection.fulfilled, (state, action) => {\r\n      state.data.collections = { ...state.data.collections, ...action.payload }\r\n    })\r\n    builder.addCase(fetchCollections.fulfilled, (state, action) => {\r\n      state.data.collections = action.payload\r\n      state.initializationState = NFTMarketInitializationState.INITIALIZED\r\n    })\r\n    builder.addCase(fetchNftsFromCollections.pending, (state, action) => {\r\n      const { collectionAddress } = action.meta.arg\r\n      if (state.data.filters[collectionAddress]) {\r\n        state.data.filters[collectionAddress].loadingState = NftFilterLoadingState.LOADING\r\n      } else {\r\n        state.data.filters[collectionAddress] = {\r\n          ...initialNftFilterState,\r\n          loadingState: NftFilterLoadingState.LOADING,\r\n        }\r\n      }\r\n    })\r\n    builder.addCase(fetchNftsFromCollections.fulfilled, (state, action) => {\r\n      const { collectionAddress } = action.meta.arg\r\n      const existingNfts: NftToken[] = state.data.nfts[collectionAddress] ?? []\r\n      const existingNftsWithoutNewOnes = existingNfts.filter(\r\n        (nftToken) => !action.payload.find((newToken) => newToken.tokenId === nftToken.tokenId),\r\n      )\r\n\r\n      state.data.filters[collectionAddress] = {\r\n        ...state.data.filters[collectionAddress],\r\n        loadingState: NftFilterLoadingState.IDLE,\r\n        activeFilters: {},\r\n      }\r\n      state.data.nfts[collectionAddress] = [...existingNftsWithoutNewOnes, ...action.payload]\r\n    })\r\n    builder.addCase(fetchNewPBAndUpdateExisting.pending, (state) => {\r\n      state.data.loadingState.isUpdatingPancakeBunnies = true\r\n    })\r\n    builder.addCase(fetchNewPBAndUpdateExisting.fulfilled, (state, action) => {\r\n      if (action.payload.length > 0) {\r\n        state.data.nfts[pancakeBunniesAddress] = action.payload\r\n      }\r\n      state.data.loadingState.isUpdatingPancakeBunnies = false\r\n      state.data.loadingState.latestPancakeBunniesUpdateAt = Date.now()\r\n    })\r\n    builder.addCase(fetchNewPBAndUpdateExisting.rejected, (state) => {\r\n      state.data.loadingState.isUpdatingPancakeBunnies = false\r\n      state.data.loadingState.latestPancakeBunniesUpdateAt = Date.now()\r\n    })\r\n    builder.addCase(fetchUserNfts.rejected, (state) => {\r\n      state.data.user.userNftsInitializationState = UserNftInitializationState.ERROR\r\n    })\r\n    builder.addCase(fetchUserNfts.pending, (state) => {\r\n      state.data.user.userNftsInitializationState = UserNftInitializationState.INITIALIZING\r\n    })\r\n    builder.addCase(fetchUserNfts.fulfilled, (state, action) => {\r\n      state.data.user.nfts = action.payload\r\n      state.data.user.userNftsInitializationState = UserNftInitializationState.INITIALIZED\r\n    })\r\n    builder.addCase(updateUserNft.fulfilled, (state, action) => {\r\n      const userNftsState: NftToken[] = state.data.user.nfts\r\n      const nftToUpdate = userNftsState.find((nft) => nft.tokenId === action.payload.tokenId)\r\n      const indexInState = userNftsState.indexOf(nftToUpdate)\r\n      state.data.user.nfts[indexInState] = action.payload\r\n    })\r\n    builder.addCase(removeUserNft.fulfilled, (state, action) => {\r\n      const copyOfState: NftToken[] = [...state.data.user.nfts]\r\n      const nftToRemove = copyOfState.find((nft) => nft.tokenId === action.payload)\r\n      const indexInState = copyOfState.indexOf(nftToRemove)\r\n      copyOfState.splice(indexInState, 1)\r\n      state.data.user.nfts = copyOfState\r\n    })\r\n    builder.addCase(addUserNft.fulfilled, (state, action) => {\r\n      state.data.user.nfts = [...state.data.user.nfts, action.payload]\r\n    })\r\n    builder.addCase(fetchUserActivity.fulfilled, (state, action) => {\r\n      state.data.user.activity = { ...action.payload, initializationState: UserNftInitializationState.INITIALIZED }\r\n    })\r\n    builder.addCase(fetchUserActivity.rejected, (state) => {\r\n      state.data.user.activity.initializationState = UserNftInitializationState.ERROR\r\n    })\r\n    builder.addCase(fetchUserActivity.pending, (state) => {\r\n      state.data.user.activity.initializationState = UserNftInitializationState.INITIALIZING\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const {\r\n  removeAllFilters,\r\n  removeAllActivityFilters,\r\n  removeActivityTypeFilters,\r\n  addActivityTypeFilters,\r\n  setOrdering,\r\n  setShowOnlyOnSale,\r\n  resetUserNftState,\r\n} = NftMarket.actions\r\n\r\nexport default NftMarket.reducer\r\n","import { useMemo } from 'react'\r\nimport { ChainId, Token } from '@pancakeswap/sdk'\r\nimport { useSelector } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { AppState } from '../../index'\r\nimport { deserializeToken } from './helpers'\r\n\r\nexport default function useUserAddedTokens(): Token[] {\r\n  const { chainId } = useActiveWeb3React()\r\n  const serializedTokensMap = useSelector<AppState, AppState['user']['tokens']>(({ user: { tokens } }) => tokens)\r\n\r\n  return useMemo(() => {\r\n    if (!chainId) return []\r\n    return Object.values(serializedTokensMap?.[chainId as ChainId] ?? {}).map(deserializeToken)\r\n  }, [serializedTokensMap, chainId])\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { parseBytes32String } from '@ethersproject/strings'\r\nimport { Currency, ETHER, Token, currencyEquals } from '@pancakeswap/sdk'\r\nimport { useMemo } from 'react'\r\nimport { arrayify } from 'ethers/lib/utils'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport {\r\n  TokenAddressMap,\r\n  useDefaultTokenList,\r\n  useUnsupportedTokenList,\r\n  useCombinedActiveList,\r\n  useCombinedInactiveList,\r\n} from '../state/lists/hooks'\r\n\r\nimport { NEVER_RELOAD, useSingleCallResult } from '../state/multicall/hooks'\r\nimport useUserAddedTokens from '../state/user/hooks/useUserAddedTokens'\r\nimport { isAddress } from '../utils'\r\n\r\nimport { useBytes32TokenContract, useTokenContract } from './useContract'\r\nimport { filterTokens } from '../components/SearchModal/filtering'\r\n\r\n// reduce token map into standard address <-> Token mapping, optionally include user added tokens\r\nfunction useTokensFromMap(tokenMap: TokenAddressMap, includeUserAdded: boolean): { [address: string]: Token } {\r\n  const { chainId } = useActiveWeb3React()\r\n  const userAddedTokens = useUserAddedTokens()\r\n\r\n  return useMemo(() => {\r\n    if (!chainId) return {}\r\n\r\n    // reduce to just tokens\r\n    const mapWithoutUrls = Object.keys(tokenMap[chainId]).reduce<{ [address: string]: Token }>((newMap, address) => {\r\n      newMap[address] = tokenMap[chainId][address].token\r\n      return newMap\r\n    }, {})\r\n\r\n    if (includeUserAdded) {\r\n      return (\r\n        userAddedTokens\r\n          // reduce into all ALL_TOKENS filtered by the current chain\r\n          .reduce<{ [address: string]: Token }>(\r\n            (tokenMap_, token) => {\r\n              tokenMap_[token.address] = token\r\n              return tokenMap_\r\n            },\r\n            // must make a copy because reduce modifies the map, and we do not\r\n            // want to make a copy in every iteration\r\n            { ...mapWithoutUrls },\r\n          )\r\n      )\r\n    }\r\n\r\n    return mapWithoutUrls\r\n  }, [chainId, userAddedTokens, tokenMap, includeUserAdded])\r\n}\r\n\r\nexport function useDefaultTokens(): { [address: string]: Token } {\r\n  const defaultList = useDefaultTokenList()\r\n  return useTokensFromMap(defaultList, false)\r\n}\r\n\r\nexport function useAllTokens(): { [address: string]: Token } {\r\n  const allTokens = useCombinedActiveList()\r\n  return useTokensFromMap(allTokens, true)\r\n}\r\n\r\nexport function useAllInactiveTokens(): { [address: string]: Token } {\r\n  // get inactive tokens\r\n  const inactiveTokensMap = useCombinedInactiveList()\r\n  const inactiveTokens = useTokensFromMap(inactiveTokensMap, false)\r\n\r\n  // filter out any token that are on active list\r\n  const activeTokensAddresses = Object.keys(useAllTokens())\r\n  const filteredInactive = activeTokensAddresses\r\n    ? Object.keys(inactiveTokens).reduce<{ [address: string]: Token }>((newMap, address) => {\r\n        if (!activeTokensAddresses.includes(address)) {\r\n          newMap[address] = inactiveTokens[address]\r\n        }\r\n        return newMap\r\n      }, {})\r\n    : inactiveTokens\r\n\r\n  return filteredInactive\r\n}\r\n\r\nexport function useUnsupportedTokens(): { [address: string]: Token } {\r\n  const unsupportedTokensMap = useUnsupportedTokenList()\r\n  return useTokensFromMap(unsupportedTokensMap, false)\r\n}\r\n\r\nexport function useIsTokenActive(token: Token | undefined | null): boolean {\r\n  const activeTokens = useAllTokens()\r\n\r\n  if (!activeTokens || !token) {\r\n    return false\r\n  }\r\n\r\n  return !!activeTokens[token.address]\r\n}\r\n\r\n// used to detect extra search results\r\nexport function useFoundOnInactiveList(searchQuery: string): Token[] | undefined {\r\n  const { chainId } = useActiveWeb3React()\r\n  const inactiveTokens = useAllInactiveTokens()\r\n\r\n  return useMemo(() => {\r\n    if (!chainId || searchQuery === '') {\r\n      return undefined\r\n    }\r\n    const tokens = filterTokens(Object.values(inactiveTokens), searchQuery)\r\n    return tokens\r\n  }, [chainId, inactiveTokens, searchQuery])\r\n}\r\n\r\n// Check if currency is included in custom list from user storage\r\nexport function useIsUserAddedToken(currency: Currency | undefined | null): boolean {\r\n  const userAddedTokens = useUserAddedTokens()\r\n\r\n  if (!currency) {\r\n    return false\r\n  }\r\n\r\n  return !!userAddedTokens.find((token) => currencyEquals(currency, token))\r\n}\r\n\r\n// parse a name or symbol from a token response\r\nconst BYTES32_REGEX = /^0x[a-fA-F0-9]{64}$/\r\n\r\nfunction parseStringOrBytes32(str: string | undefined, bytes32: string | undefined, defaultValue: string): string {\r\n  return str && str.length > 0\r\n    ? str\r\n    : // need to check for proper bytes string and valid terminator\r\n    bytes32 && BYTES32_REGEX.test(bytes32) && arrayify(bytes32)[31] === 0\r\n    ? parseBytes32String(bytes32)\r\n    : defaultValue\r\n}\r\n\r\n// undefined if invalid or does not exist\r\n// null if loading\r\n// otherwise returns the token\r\nexport function useToken(tokenAddress?: string): Token | undefined | null {\r\n  const { chainId } = useActiveWeb3React()\r\n  const tokens = useAllTokens()\r\n\r\n  const address = isAddress(tokenAddress)\r\n\r\n  const tokenContract = useTokenContract(address || undefined, false)\r\n  const tokenContractBytes32 = useBytes32TokenContract(address || undefined, false)\r\n  const token: Token | undefined = address ? tokens[address] : undefined\r\n\r\n  const tokenName = useSingleCallResult(token ? undefined : tokenContract, 'name', undefined, NEVER_RELOAD)\r\n  const tokenNameBytes32 = useSingleCallResult(\r\n    token ? undefined : tokenContractBytes32,\r\n    'name',\r\n    undefined,\r\n    NEVER_RELOAD,\r\n  )\r\n  const symbol = useSingleCallResult(token ? undefined : tokenContract, 'symbol', undefined, NEVER_RELOAD)\r\n  const symbolBytes32 = useSingleCallResult(token ? undefined : tokenContractBytes32, 'symbol', undefined, NEVER_RELOAD)\r\n  const decimals = useSingleCallResult(token ? undefined : tokenContract, 'decimals', undefined, NEVER_RELOAD)\r\n\r\n  return useMemo(() => {\r\n    if (token) return token\r\n    if (!chainId || !address) return undefined\r\n    if (decimals.loading || symbol.loading || tokenName.loading) return null\r\n    if (decimals.result) {\r\n      return new Token(\r\n        chainId,\r\n        address,\r\n        decimals.result[0],\r\n        parseStringOrBytes32(symbol.result?.[0], symbolBytes32.result?.[0], 'UNKNOWN'),\r\n        parseStringOrBytes32(tokenName.result?.[0], tokenNameBytes32.result?.[0], 'Unknown Token'),\r\n      )\r\n    }\r\n    return undefined\r\n  }, [\r\n    address,\r\n    chainId,\r\n    decimals.loading,\r\n    decimals.result,\r\n    symbol.loading,\r\n    symbol.result,\r\n    symbolBytes32.result,\r\n    token,\r\n    tokenName.loading,\r\n    tokenName.result,\r\n    tokenNameBytes32.result,\r\n  ])\r\n}\r\n\r\nexport function useCurrency(currencyId: string | undefined): Currency | null | undefined {\r\n  const isBNB = currencyId?.toUpperCase() === 'BNB'\r\n  const token = useToken(isBNB ? undefined : currencyId)\r\n  return isBNB ? ETHER : token\r\n}\r\n","import { ChainId, Token } from '@pancakeswap/sdk'\r\nimport { serializeToken } from 'state/user/hooks/helpers'\r\nimport { SerializedToken } from './types'\r\n\r\nconst { MAINNET, TESTNET } = ChainId\r\n\r\ninterface TokenList {\r\n  [symbol: string]: Token\r\n}\r\n\r\nconst defineTokens = <T extends TokenList>(t: T) => t\r\n\r\nexport const mainnetTokens = defineTokens({\r\n  wbnb: new Token(\r\n    MAINNET,\r\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    18,\r\n    'WBNB',\r\n    'Wrapped BNB',\r\n    'https://www.binance.com/',\r\n  ),\r\n  // bnb here points to the wbnb contract. Wherever the currency BNB is required, conditional checks for the symbol 'BNB' can be used\r\n  bnb: new Token(MAINNET, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'BNB', 'BNB', 'https://www.binance.com/'),\r\n  cake: new Token(\r\n    MAINNET,\r\n    '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',\r\n    18,\r\n    'CAKE',\r\n    'PancakeSwap Token',\r\n    'https://pancakeswap.finance/',\r\n  ),\r\n  sera: new Token(\r\n    MAINNET,\r\n    '0x31640330cd2337e57c9591a2a183ac4e8a754e87',\r\n    18,\r\n    'SERA',\r\n    'SERA',\r\n    'https://seraproject.org/',\r\n  ),\r\n  tlos: new Token(MAINNET, '0xb6C53431608E626AC81a9776ac3e999c5556717c', 18, 'TLOS', 'Telos', 'https://www.telos.net/'),\r\n  beta: new Token(\r\n    MAINNET,\r\n    '0xBe1a001FE942f96Eea22bA08783140B9Dcc09D28',\r\n    18,\r\n    'BETA',\r\n    'Beta Finance',\r\n    'https://betafinance.org',\r\n  ),\r\n  nft: new Token(MAINNET, '0x1fC9004eC7E5722891f5f38baE7678efCB11d34D', 6, 'NFT', 'APENFT', 'https://apenft.org'),\r\n  stephero: new Token(\r\n    MAINNET,\r\n    '0xE8176d414560cFE1Bf82Fd73B986823B89E4F545',\r\n    18,\r\n    'HERO',\r\n    'StepHero',\r\n    'https://stephero.io/',\r\n  ),\r\n  pros: new Token(MAINNET, '0xEd8c8Aa8299C10f067496BB66f8cC7Fb338A3405', 18, 'PROS', 'Prosper', 'https://prosper.so/'),\r\n  qbt: new Token(MAINNET, '0x17B7163cf1Dbd286E262ddc68b553D899B93f526', 18, 'QBT', 'Qubit Token', 'https://qbt.fi/'),\r\n  cvp: new Token(\r\n    MAINNET,\r\n    '0x5Ec3AdBDae549Dce842e24480Eb2434769e22B2E',\r\n    18,\r\n    'CVP',\r\n    'Concentrated Voting Power Token',\r\n    'https://powerpool.finance/',\r\n  ),\r\n  bscdefi: new Token(\r\n    MAINNET,\r\n    '0x40E46dE174dfB776BB89E04dF1C47d8a66855EB3',\r\n    18,\r\n    'BSCDEFI',\r\n    'BSC Defi blue chips token',\r\n    'https://powerpool.finance/',\r\n  ),\r\n  busd: new Token(\r\n    MAINNET,\r\n    '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\r\n    18,\r\n    'BUSD',\r\n    'Binance USD',\r\n    'https://www.paxos.com/busd/',\r\n  ),\r\n  dai: new Token(\r\n    MAINNET,\r\n    '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3',\r\n    18,\r\n    'DAI',\r\n    'Dai Stablecoin',\r\n    'https://www.makerdao.com/',\r\n  ),\r\n  usdt: new Token(\r\n    MAINNET,\r\n    '0x55d398326f99059fF775485246999027B3197955',\r\n    18,\r\n    'USDT',\r\n    'Tether USD',\r\n    'https://tether.to/',\r\n  ),\r\n  btcb: new Token(\r\n    MAINNET,\r\n    '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c',\r\n    18,\r\n    'BTCB',\r\n    'Binance BTC',\r\n    'https://bitcoin.org/',\r\n  ),\r\n  ust: new Token(\r\n    MAINNET,\r\n    '0x23396cF899Ca06c4472205fC903bDB4de249D6fC',\r\n    18,\r\n    'UST',\r\n    'Wrapped UST Token',\r\n    'https://mirror.finance/',\r\n  ),\r\n  eth: new Token(\r\n    MAINNET,\r\n    '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n    18,\r\n    'ETH',\r\n    'Binance-Peg Ethereum Token',\r\n    'https://ethereum.org/en/',\r\n  ),\r\n  usdc: new Token(\r\n    MAINNET,\r\n    '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\r\n    18,\r\n    'USDC',\r\n    'Binance-Peg USD Coin',\r\n    'https://www.centre.io/usdc',\r\n  ),\r\n  kalm: new Token(\r\n    MAINNET,\r\n    '0x4BA0057f784858a48fe351445C672FF2a3d43515',\r\n    18,\r\n    'KALM',\r\n    'Kalmar Token',\r\n    'https://kalmar.io/',\r\n  ),\r\n  dkt: new Token(\r\n    MAINNET,\r\n    '0x7Ceb519718A80Dd78a8545AD8e7f401dE4f2faA7',\r\n    18,\r\n    'DKT',\r\n    'Duelist King',\r\n    'https://duelistking.com/',\r\n  ),\r\n  hotcross: new Token(\r\n    MAINNET,\r\n    '0x4FA7163E153419E0E1064e418dd7A99314Ed27b6',\r\n    18,\r\n    'HOTCROSS',\r\n    'Hotcross Token',\r\n    'https://www.hotcross.com/',\r\n  ),\r\n  belt: new Token(\r\n    MAINNET,\r\n    '0xE0e514c71282b6f4e823703a39374Cf58dc3eA4f',\r\n    18,\r\n    'BELT',\r\n    'Belt Token',\r\n    'https://beta.belt.fi/',\r\n  ),\r\n  watch: new Token(\r\n    MAINNET,\r\n    '0x7A9f28EB62C791422Aa23CeAE1dA9C847cBeC9b0',\r\n    18,\r\n    'WATCH',\r\n    'Yieldwatch Token',\r\n    'https://yieldwatch.net/',\r\n  ),\r\n  bry: new Token(\r\n    MAINNET,\r\n    '0xf859Bf77cBe8699013d6Dbc7C2b926Aaf307F830',\r\n    18,\r\n    'BRY',\r\n    'Berry Token',\r\n    'https://berrydata.co/',\r\n  ),\r\n  wsote: new Token(\r\n    MAINNET,\r\n    '0x541E619858737031A1244A5d0Cd47E5ef480342c',\r\n    18,\r\n    'wSOTE',\r\n    'Soteria Token',\r\n    'https://soteria.finance/',\r\n  ),\r\n  helmet: new Token(\r\n    MAINNET,\r\n    '0x948d2a81086A075b3130BAc19e4c6DEe1D2E3fE8',\r\n    18,\r\n    'Helmet',\r\n    'Helmet Token',\r\n    'https://www.helmet.insure/',\r\n  ),\r\n  ten: new Token(\r\n    MAINNET,\r\n    '0xdFF8cb622790b7F92686c722b02CaB55592f152C',\r\n    18,\r\n    'TEN',\r\n    'Tenet Token',\r\n    'https://www.tenet.farm/',\r\n  ),\r\n  ditto: new Token(\r\n    MAINNET,\r\n    '0x233d91A0713155003fc4DcE0AFa871b508B3B715',\r\n    9,\r\n    'DITTO',\r\n    'Ditto Token',\r\n    'https://ditto.money/',\r\n  ),\r\n  blink: new Token(\r\n    MAINNET,\r\n    '0x63870A18B6e42b01Ef1Ad8A2302ef50B7132054F',\r\n    6,\r\n    'BLINK',\r\n    'Blink Token',\r\n    'https://blink.wink.org',\r\n  ),\r\n  syrup: new Token(\r\n    MAINNET,\r\n    '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\r\n    18,\r\n    'SYRUP',\r\n    'SyrupBar Token',\r\n    'https://pancakeswap.finance/',\r\n  ),\r\n  pha: new Token(\r\n    MAINNET,\r\n    '0x0112e557d400474717056C4e6D40eDD846F38351',\r\n    18,\r\n    'PHA',\r\n    'Phala Token',\r\n    'https://phala.network',\r\n  ),\r\n  babycake: new Token(\r\n    MAINNET,\r\n    '0xdB8D30b74bf098aF214e862C90E647bbB1fcC58c',\r\n    18,\r\n    'BABYCAKE',\r\n    'Baby Cake Token',\r\n    'https://babycake.app/',\r\n  ),\r\n  bmon: new Token(\r\n    MAINNET,\r\n    '0x08ba0619b1e7A582E0BCe5BBE9843322C954C340',\r\n    18,\r\n    'BMON',\r\n    'Binamon Token',\r\n    'https://binamon.org/',\r\n  ),\r\n  hero: new Token(\r\n    MAINNET,\r\n    '0xD40bEDb44C081D2935eebA6eF5a3c8A31A1bBE13',\r\n    18,\r\n    'HERO',\r\n    'Metahero Token',\r\n    'https://metahero.io/',\r\n  ),\r\n  wsg: new Token(\r\n    MAINNET,\r\n    '0xA58950F05FeA2277d2608748412bf9F802eA4901',\r\n    18,\r\n    'WSG',\r\n    'Wall Street Games Token',\r\n    'https://wsg.gg/',\r\n  ),\r\n  mcrn: new Token(\r\n    MAINNET,\r\n    '0xacb2d47827C9813AE26De80965845D80935afd0B',\r\n    18,\r\n    'MCRN',\r\n    'Macaronswap Token',\r\n    'https://www.macaronswap.finance/',\r\n  ),\r\n  revv: new Token(\r\n    MAINNET,\r\n    '0x833F307aC507D47309fD8CDD1F835BeF8D702a93',\r\n    18,\r\n    'REVV',\r\n    'REVV Token',\r\n    'https://revvmotorsport.com/',\r\n  ),\r\n  skill: new Token(\r\n    MAINNET,\r\n    '0x154A9F9cbd3449AD22FDaE23044319D6eF2a1Fab',\r\n    18,\r\n    'SKILL',\r\n    'Cryptoblades Token',\r\n    'https://www.cryptoblades.io/',\r\n  ),\r\n  if: new Token(\r\n    MAINNET,\r\n    '0xB0e1fc65C1a741b4662B813eB787d369b8614Af1',\r\n    18,\r\n    'IF',\r\n    'Impossible Finance Token',\r\n    'https://impossible.finance/',\r\n  ),\r\n  sps: new Token(\r\n    MAINNET,\r\n    '0x1633b7157e7638C4d6593436111Bf125Ee74703F',\r\n    18,\r\n    'SPS',\r\n    'Splinterlands Token',\r\n    'https://splinterlands.com',\r\n  ),\r\n  chess: new Token(\r\n    MAINNET,\r\n    '0x20de22029ab63cf9A7Cf5fEB2b737Ca1eE4c82A6',\r\n    18,\r\n    'CHESS',\r\n    'Chess Token',\r\n    'https://tranchess.com/',\r\n  ),\r\n  titan: new Token(\r\n    MAINNET,\r\n    '0xe898EDc43920F357A93083F1d4460437dE6dAeC2',\r\n    18,\r\n    'TITAN',\r\n    'Titanswap Token',\r\n    'https://titanswap.org',\r\n  ),\r\n  harmony: new Token(\r\n    MAINNET,\r\n    '0x03fF0ff224f904be3118461335064bB48Df47938',\r\n    18,\r\n    'ONE',\r\n    'Harmony ONE Token',\r\n    'https://www.harmony.one/',\r\n  ),\r\n  mask: new Token(MAINNET, '0x2eD9a5C8C13b93955103B9a7C167B67Ef4d568a3', 18, 'MASK', 'Mask Token', 'https://mask.io/'),\r\n  dvi: new Token(\r\n    MAINNET,\r\n    '0x758FB037A375F17c7e195CC634D77dA4F554255B',\r\n    18,\r\n    'DVI',\r\n    'Dvision Network Token',\r\n    'https://dvision.network/',\r\n  ),\r\n  adx: new Token(\r\n    MAINNET,\r\n    '0x6bfF4Fb161347ad7de4A625AE5aa3A1CA7077819',\r\n    18,\r\n    'ADX',\r\n    'Adex Network Token',\r\n    'https://www.adex.network',\r\n  ),\r\n  bscpad: new Token(\r\n    MAINNET,\r\n    '0x5A3010d4d8D3B5fB49f8B6E57FB9E48063f16700',\r\n    18,\r\n    'BSCPAD',\r\n    'Bscpad Token',\r\n    'https://bscpad.com/',\r\n  ),\r\n  rabbit: new Token(\r\n    MAINNET,\r\n    '0x95a1199EBA84ac5f19546519e287d43D2F0E1b41',\r\n    18,\r\n    'RABBIT',\r\n    'Rabbit Finance Token',\r\n    'https://rabbitfinance.io/earn',\r\n  ),\r\n  form: new Token(\r\n    MAINNET,\r\n    '0x25A528af62e56512A19ce8c3cAB427807c28CC19',\r\n    18,\r\n    'FORM',\r\n    'Formation Token',\r\n    'https://formation.fi/',\r\n  ),\r\n  txl: new Token(MAINNET, '0x1FFD0b47127fdd4097E54521C9E2c7f0D66AafC5', 18, 'TXL', 'Tixl Token', 'https://tixl.org/'),\r\n  orbs: new Token(\r\n    MAINNET,\r\n    '0xeBd49b26169e1b52c04cFd19FCf289405dF55F80',\r\n    18,\r\n    'ORBS',\r\n    'Orbs Token',\r\n    'https://www.orbs.com/',\r\n  ),\r\n  cos: new Token(\r\n    MAINNET,\r\n    '0x96Dd399F9c3AFda1F194182F71600F1B65946501',\r\n    18,\r\n    'COS',\r\n    'Contentos Token',\r\n    'https://www.contentos.io/',\r\n  ),\r\n  bunny: new Token(\r\n    MAINNET,\r\n    '0xC9849E6fdB743d08fAeE3E34dd2D1bc69EA11a51',\r\n    18,\r\n    'BUNNY',\r\n    'Pancakebunny Token',\r\n    'https://pancakebunny.finance/',\r\n  ),\r\n  alice: new Token(\r\n    MAINNET,\r\n    '0xAC51066d7bEC65Dc4589368da368b212745d63E8',\r\n    6,\r\n    'ALICE',\r\n    'My Neighbor Alice Token',\r\n    'https://www.myneighboralice.com/',\r\n  ),\r\n  for: new Token(\r\n    MAINNET,\r\n    '0x658A109C5900BC6d2357c87549B651670E5b0539',\r\n    18,\r\n    'FOR',\r\n    'Fortube Token',\r\n    'https://www.for.tube/home',\r\n  ),\r\n  bux: new Token(\r\n    MAINNET,\r\n    '0x211FfbE424b90e25a15531ca322adF1559779E45',\r\n    18,\r\n    'BUX',\r\n    'Bux Crypto Token',\r\n    'https://getbux.com/bux-crypto/',\r\n  ),\r\n  nuls: new Token(\r\n    MAINNET,\r\n    '0x8CD6e29d3686d24d3C2018CEe54621eA0f89313B',\r\n    8,\r\n    'NULS',\r\n    'Nuls Token',\r\n    'https://www.nuls.io/',\r\n  ),\r\n  ramp: new Token(\r\n    MAINNET,\r\n    '0x8519EA49c997f50cefFa444d240fB655e89248Aa',\r\n    18,\r\n    'RAMP',\r\n    'RAMP DEFI Token',\r\n    'https://rampdefi.com/',\r\n  ),\r\n  bfi: new Token(\r\n    MAINNET,\r\n    '0x81859801b01764D4f0Fa5E64729f5a6C3b91435b',\r\n    18,\r\n    'BFI',\r\n    'bearn.fi Token',\r\n    'https://bearn.fi/',\r\n  ),\r\n  dexe: new Token(\r\n    MAINNET,\r\n    '0x039cB485212f996A9DBb85A9a75d898F94d38dA6',\r\n    18,\r\n    'DEXE',\r\n    'DeXe Token',\r\n    'https://dexe.network/',\r\n  ),\r\n  bel: new Token(\r\n    MAINNET,\r\n    '0x8443f091997f06a61670B735ED92734F5628692F',\r\n    18,\r\n    'BEL',\r\n    'Bella Protocol Token',\r\n    'https://bella.fi/',\r\n  ),\r\n  tpt: new Token(\r\n    MAINNET,\r\n    '0xECa41281c24451168a37211F0bc2b8645AF45092',\r\n    4,\r\n    'TPT',\r\n    'Tokenpocket Token',\r\n    'https://www.tokenpocket.pro/',\r\n  ),\r\n  xmark: new Token(\r\n    MAINNET,\r\n    '0x26A5dFab467d4f58fB266648CAe769503CEC9580',\r\n    9,\r\n    'xMARK',\r\n    'Benchmark Protocol Token',\r\n    'https://benchmarkprotocol.finance/',\r\n  ),\r\n  bmxx: new Token(\r\n    MAINNET,\r\n    '0x4131b87F74415190425ccD873048C708F8005823',\r\n    18,\r\n    'bMXX',\r\n    'Multiplier Token',\r\n    'https://multiplier.finance/',\r\n  ),\r\n  iotx: new Token(\r\n    MAINNET,\r\n    '0x9678E42ceBEb63F23197D726B29b1CB20d0064E5',\r\n    18,\r\n    'IOTX',\r\n    'Binance-Peg IoTeX Network Token',\r\n    'https://iotex.io/',\r\n  ),\r\n  bor: new Token(\r\n    MAINNET,\r\n    '0x92D7756c60dcfD4c689290E8A9F4d263b3b32241',\r\n    18,\r\n    'BOR',\r\n    'BoringDAO Token',\r\n    'https://www.boringdao.com/',\r\n  ),\r\n  bopen: new Token(\r\n    MAINNET,\r\n    '0xF35262a9d427F96d2437379eF090db986eaE5d42',\r\n    18,\r\n    'bOPEN',\r\n    'OPEN Governance Token',\r\n    'https://opendao.io/',\r\n  ),\r\n  dodo: new Token(\r\n    MAINNET,\r\n    '0x67ee3Cb086F8a16f34beE3ca72FAD36F7Db929e2',\r\n    18,\r\n    'DODO',\r\n    'Dodo Token',\r\n    'https://dodoex.io/',\r\n  ),\r\n  swingby: new Token(\r\n    MAINNET,\r\n    '0x71DE20e0C4616E7fcBfDD3f875d568492cBE4739',\r\n    18,\r\n    'SWINGBY',\r\n    'Swingby Network Token',\r\n    'https://swingby.network/',\r\n  ),\r\n  zee: new Token(\r\n    MAINNET,\r\n    '0x44754455564474A89358B2C2265883DF993b12F0',\r\n    18,\r\n    'ZEE',\r\n    'Zeroswap Token',\r\n    'https://zeroswap.io/',\r\n  ),\r\n  swgb: new Token(\r\n    MAINNET,\r\n    '0xE40255C5d7fa7ceEc5120408C78C787CECB4cfdb',\r\n    18,\r\n    'SWGb',\r\n    'SWGb Token',\r\n    'https://swirgepay.com/',\r\n  ),\r\n  swg: new Token(\r\n    MAINNET,\r\n    '0xe792f64C582698b8572AAF765bDC426AC3aEfb6B',\r\n    18,\r\n    'SWG',\r\n    'SWG Token',\r\n    'https://swirgepay.com/',\r\n  ),\r\n  sfp: new Token(\r\n    MAINNET,\r\n    '0xD41FDb03Ba84762dD66a0af1a6C8540FF1ba5dfb',\r\n    18,\r\n    'SFP',\r\n    'Safepal Token',\r\n    'https://www.safepal.io/',\r\n  ),\r\n  lina: new Token(\r\n    MAINNET,\r\n    '0x762539b45A1dCcE3D36d080F74d1AED37844b878',\r\n    18,\r\n    'LINA',\r\n    'Linear Finance Token',\r\n    'https://linear.finance/',\r\n  ),\r\n  lit: new Token(\r\n    MAINNET,\r\n    '0xb59490aB09A0f526Cc7305822aC65f2Ab12f9723',\r\n    18,\r\n    'LIT',\r\n    'Litentry Token',\r\n    'https://www.litentry.com/',\r\n  ),\r\n  hget: new Token(\r\n    MAINNET,\r\n    '0xC7d8D35EBA58a0935ff2D5a33Df105DD9f071731',\r\n    6,\r\n    'HGET',\r\n    'Hedget Token',\r\n    'https://www.hedget.com/',\r\n  ),\r\n  bdo: new Token(\r\n    MAINNET,\r\n    '0x190b589cf9Fb8DDEabBFeae36a813FFb2A702454',\r\n    18,\r\n    'BDO',\r\n    'Bdollar Token',\r\n    'https://bdollar.fi/',\r\n  ),\r\n  egld: new Token(\r\n    MAINNET,\r\n    '0xbF7c81FFF98BbE61B40Ed186e4AfD6DDd01337fe',\r\n    18,\r\n    'EGLD',\r\n    'Elrond Token',\r\n    'https://elrond.com/',\r\n  ),\r\n  front: new Token(\r\n    MAINNET,\r\n    '0x928e55daB735aa8260AF3cEDadA18B5f70C72f1b',\r\n    18,\r\n    'FRONT',\r\n    'Frontier Token',\r\n    'https://frontier.xyz/',\r\n  ),\r\n  btcst: new Token(\r\n    MAINNET,\r\n    '0x78650B139471520656b9E7aA7A5e9276814a38e9',\r\n    17,\r\n    'BTCST',\r\n    'StandardBTCHashrate Token',\r\n    'https://www.1-b.tc/',\r\n  ),\r\n  bscx: new Token(\r\n    MAINNET,\r\n    '0x5Ac52EE5b2a633895292Ff6d8A89bB9190451587',\r\n    18,\r\n    'BSCX',\r\n    'BSCX Token',\r\n    'https://bscex.org/',\r\n  ),\r\n  balbt: new Token(\r\n    MAINNET,\r\n    '0x72fAa679E1008Ad8382959FF48E392042A8b06f7',\r\n    18,\r\n    'bALBT',\r\n    'AllianceBlock Token',\r\n    'https://allianceblock.io/',\r\n  ),\r\n  asr: new Token(\r\n    MAINNET,\r\n    '0x80D5f92C2c8C682070C95495313dDB680B267320',\r\n    2,\r\n    'ASR',\r\n    'AS Roma Token',\r\n    'https://www.chiliz.com',\r\n  ),\r\n  atm: new Token(\r\n    MAINNET,\r\n    '0x25E9d05365c867E59C1904E7463Af9F312296f9E',\r\n    2,\r\n    'ATM',\r\n    'Athletico Madrid Token',\r\n    'https://www.chiliz.com',\r\n  ),\r\n  og: new Token(\r\n    MAINNET,\r\n    '0xf05E45aD22150677a017Fbd94b84fBB63dc9b44c',\r\n    2,\r\n    'OG',\r\n    'OG Nice Token',\r\n    'https://www.chiliz.com',\r\n  ),\r\n  reef: new Token(\r\n    MAINNET,\r\n    '0xF21768cCBC73Ea5B6fd3C687208a7c2def2d966e',\r\n    18,\r\n    'REEF',\r\n    'Reef.finance Token',\r\n    'https://reef.finance/',\r\n  ),\r\n  juv: new Token(\r\n    MAINNET,\r\n    '0xC40C9A843E1c6D01b7578284a9028854f6683b1B',\r\n    2,\r\n    'JUV',\r\n    'Juventus Token',\r\n    'https://www.chiliz.com',\r\n  ),\r\n  psg: new Token(\r\n    MAINNET,\r\n    '0xBc5609612b7C44BEf426De600B5fd1379DB2EcF1',\r\n    2,\r\n    'PSG',\r\n    'Paris Saint-Germain Token',\r\n    'https://www.chiliz.com',\r\n  ),\r\n  vai: new Token(\r\n    MAINNET,\r\n    '0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7',\r\n    18,\r\n    'VAI',\r\n    'VAI Stablecoin',\r\n    '0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7',\r\n  ),\r\n  unfi: new Token(\r\n    MAINNET,\r\n    '0x728C5baC3C3e370E372Fc4671f9ef6916b814d8B',\r\n    18,\r\n    'UNFI',\r\n    'UNFI Token',\r\n    'https://unifiprotocol.com',\r\n  ),\r\n  twt: new Token(\r\n    MAINNET,\r\n    '0x4B0F1812e5Df2A09796481Ff14017e6005508003',\r\n    18,\r\n    'TWT',\r\n    'Trust Wallet Token',\r\n    'https://trustwallet.com/',\r\n  ),\r\n  hard: new Token(\r\n    MAINNET,\r\n    '0xf79037F6f6bE66832DE4E7516be52826BC3cBcc4',\r\n    6,\r\n    'HARD',\r\n    'HARD Token',\r\n    'https://hard.kava.io',\r\n  ),\r\n  broobee: new Token(\r\n    MAINNET,\r\n    '0xE64F5Cb844946C1F102Bd25bBD87a5aB4aE89Fbe',\r\n    18,\r\n    'bROOBEE',\r\n    'ROOBEE Token',\r\n    'https://roobee.io/',\r\n  ),\r\n  stax: new Token(\r\n    MAINNET,\r\n    '0x0Da6Ed8B13214Ff28e9Ca979Dd37439e8a88F6c4',\r\n    18,\r\n    'STAX',\r\n    'StableX Token',\r\n    'https://stablexswap.com/',\r\n  ),\r\n  nar: new Token(\r\n    MAINNET,\r\n    '0xA1303E6199b319a891b79685F0537D289af1FC83',\r\n    18,\r\n    'NAR',\r\n    'Narwhalswap Token',\r\n    'https://narwhalswap.org/',\r\n  ),\r\n  nya: new Token(\r\n    MAINNET,\r\n    '0xbFa0841F7a90c4CE6643f651756EE340991F99D5',\r\n    18,\r\n    'NYA',\r\n    'Nyanswop Token',\r\n    'https://nyanswop.org/',\r\n  ),\r\n  ctk: new Token(\r\n    MAINNET,\r\n    '0xA8c2B8eec3d368C0253ad3dae65a5F2BBB89c929',\r\n    6,\r\n    'CTK',\r\n    'Certik Token',\r\n    'https://www.certik.foundation/',\r\n  ),\r\n  inj: new Token(\r\n    MAINNET,\r\n    '0xa2B726B1145A4773F68593CF171187d8EBe4d495',\r\n    18,\r\n    'INJ',\r\n    'Injective Protocol Token',\r\n    'https://injectiveprotocol.com/',\r\n  ),\r\n  sxp: new Token(MAINNET, '0x47BEAd2563dCBf3bF2c9407fEa4dC236fAbA485A', 18, 'SXP', 'Swipe Token', 'https://swipe.io/'),\r\n  alpha: new Token(\r\n    MAINNET,\r\n    '0xa1faa113cbE53436Df28FF0aEe54275c13B40975',\r\n    18,\r\n    'ALPHA',\r\n    'Alpha Finance Token',\r\n    'https://alphafinance.io/',\r\n  ),\r\n  xvs: new Token(MAINNET, '0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63', 18, 'XVS', 'Venus Token', 'https://venus.io/'),\r\n  sushi: new Token(\r\n    MAINNET,\r\n    '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\r\n    18,\r\n    'SUSHI',\r\n    'Binance-Peg SushiToken',\r\n    'https://sushi.com/',\r\n  ),\r\n  comp: new Token(\r\n    MAINNET,\r\n    '0x52CE071Bd9b1C4B00A0b92D298c512478CaD67e8',\r\n    18,\r\n    'COMP',\r\n    'Compound Finance Token',\r\n    'https://compound.finance/',\r\n  ),\r\n  bifi: new Token(\r\n    MAINNET,\r\n    '0xCa3F508B8e4Dd382eE878A314789373D80A5190A',\r\n    18,\r\n    'BIFI',\r\n    'Beefy Finance Token',\r\n    'https://beefy.finance/',\r\n  ),\r\n  dusk: new Token(\r\n    MAINNET,\r\n    '0xB2BD0749DBE21f623d9BABa856D3B0f0e1BFEc9C',\r\n    18,\r\n    'DUSK',\r\n    'Dusk Network Token',\r\n    'https://dusk.network/',\r\n  ),\r\n  beth: new Token(\r\n    MAINNET,\r\n    '0x250632378E573c6Be1AC2f97Fcdf00515d0Aa91B',\r\n    18,\r\n    'BETH',\r\n    'Binance Beacon ETH',\r\n    'https://ethereum.org/en/eth2/beacon-chain/',\r\n  ),\r\n  mamzn: new Token(\r\n    MAINNET,\r\n    '0x3947B992DC0147D2D89dF0392213781b04B25075',\r\n    18,\r\n    'mAMZN',\r\n    'Wrapped Mirror AMZN Token',\r\n    'https://mirror.finance/',\r\n  ),\r\n  mgoogl: new Token(\r\n    MAINNET,\r\n    '0x62D71B23bF15218C7d2D7E48DBbD9e9c650B173f',\r\n    18,\r\n    'mGOOGL',\r\n    'Wrapped Mirror GOOGL Token',\r\n    'https://mirror.finance/',\r\n  ),\r\n  mnflx: new Token(\r\n    MAINNET,\r\n    '0xa04F060077D90Fe2647B61e4dA4aD1F97d6649dc',\r\n    18,\r\n    'mNFLX',\r\n    'Wrapped Mirror NFLX Token',\r\n    'https://mirror.finance/',\r\n  ),\r\n  mtsla: new Token(\r\n    MAINNET,\r\n    '0xF215A127A196e3988C09d052e16BcFD365Cd7AA3',\r\n    18,\r\n    'mTSLA',\r\n    'Wrapped Mirror TSLA Token',\r\n    'https://mirror.finance/',\r\n  ),\r\n  ltc: new Token(\r\n    MAINNET,\r\n    '0x4338665CBB7B2485A8855A139b75D5e34AB0DB94',\r\n    18,\r\n    'LTC',\r\n    'Binance-Peg Litecoin Token',\r\n    'https://litecoin.org/',\r\n  ),\r\n  ada: new Token(\r\n    MAINNET,\r\n    '0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47',\r\n    18,\r\n    'ADA',\r\n    ' Binance-Peg Cardano Token',\r\n    'https://www.cardano.org/',\r\n  ),\r\n  band: new Token(\r\n    MAINNET,\r\n    '0xAD6cAEb32CD2c308980a548bD0Bc5AA4306c6c18',\r\n    18,\r\n    'BAND',\r\n    'Binance-Peg Band Protocol Token',\r\n    'https://bandprotocol.com/',\r\n  ),\r\n  dot: new Token(\r\n    MAINNET,\r\n    '0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402',\r\n    18,\r\n    'DOT',\r\n    'Binance-Peg Polkadot Token',\r\n    'https://polkadot.network/',\r\n  ),\r\n  eos: new Token(\r\n    MAINNET,\r\n    '0x56b6fB708fC5732DEC1Afc8D8556423A2EDcCbD6',\r\n    18,\r\n    'EOS',\r\n    'Binance-Peg EOS Token',\r\n    'https://eos.io/',\r\n  ),\r\n  link: new Token(\r\n    MAINNET,\r\n    '0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD',\r\n    18,\r\n    'LINK',\r\n    'Binance-Peg Chainlink Token',\r\n    'https://chain.link/',\r\n  ),\r\n  xrp: new Token(\r\n    MAINNET,\r\n    '0x1D2F0da169ceB9fC7B3144628dB156f3F6c60dBE',\r\n    18,\r\n    'XRP',\r\n    'Binance-Peg XRP Token',\r\n    'https://ripple.com/xrp/',\r\n  ),\r\n  atom: new Token(\r\n    MAINNET,\r\n    '0x0Eb3a705fc54725037CC9e008bDede697f62F335',\r\n    18,\r\n    'ATOM',\r\n    'Binance-Peg Cosmos Token',\r\n    'https://cosmos.network/',\r\n  ),\r\n  yfii: new Token(\r\n    MAINNET,\r\n    '0x7F70642d88cf1C4a3a7abb072B53B929b653edA5',\r\n    18,\r\n    'YFII',\r\n    'Binance-Peg YFII.finance Token',\r\n    'https://dfi.money/#/',\r\n  ),\r\n  xtz: new Token(\r\n    MAINNET,\r\n    '0x16939ef78684453bfDFb47825F8a5F714f12623a',\r\n    18,\r\n    'XTZ',\r\n    'Binance-Peg Tezos Token',\r\n    'https://www.tezos.com/',\r\n  ),\r\n  bch: new Token(\r\n    MAINNET,\r\n    '0x8fF795a6F4D97E7887C79beA79aba5cc76444aDf',\r\n    18,\r\n    'BCH',\r\n    'Binance-Peg Bitcoin Cash Token',\r\n    'https://bch.info/',\r\n  ),\r\n  yfi: new Token(\r\n    MAINNET,\r\n    '0x88f1A5ae2A3BF98AEAF342D26B30a79438c9142e',\r\n    18,\r\n    'YFI',\r\n    'Binance-Peg yearn.finance Token',\r\n    'https://yearn.finance/',\r\n  ),\r\n  uni: new Token(\r\n    MAINNET,\r\n    '0xBf5140A22578168FD562DCcF235E5D43A02ce9B1',\r\n    18,\r\n    'UNI',\r\n    'Binance-Peg Uniswap Token',\r\n    'https://uniswap.org/',\r\n  ),\r\n  fil: new Token(\r\n    MAINNET,\r\n    '0x0D8Ce2A99Bb6e3B7Db580eD848240e4a0F9aE153',\r\n    18,\r\n    'FIL',\r\n    'Binance-Peg Filecoin Token',\r\n    'https://filecoin.io/',\r\n  ),\r\n  bake: new Token(\r\n    MAINNET,\r\n    '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    18,\r\n    'BAKE',\r\n    'Bakeryswap Token',\r\n    'https://www.bakeryswap.org/',\r\n  ),\r\n  burger: new Token(\r\n    MAINNET,\r\n    '0xAe9269f27437f0fcBC232d39Ec814844a51d6b8f',\r\n    18,\r\n    'BURGER',\r\n    'Burgerswap Token',\r\n    'https://burgerswap.org/',\r\n  ),\r\n  bdigg: new Token(\r\n    MAINNET,\r\n    '0x5986D5c77c65e5801a5cAa4fAE80089f870A71dA',\r\n    18,\r\n    'bDIGG',\r\n    'Badger Sett Digg Token',\r\n    'https://badger.finance/',\r\n  ),\r\n  bbadger: new Token(\r\n    MAINNET,\r\n    '0x1F7216fdB338247512Ec99715587bb97BBf96eae',\r\n    18,\r\n    'bBadger',\r\n    'Badger Sett Badger Token',\r\n    'https://badger.finance/',\r\n  ),\r\n  trade: new Token(\r\n    MAINNET,\r\n    '0x7af173F350D916358AF3e218Bdf2178494Beb748',\r\n    18,\r\n    'TRADE',\r\n    'Unitrade Token',\r\n    'https://unitrade.app/',\r\n  ),\r\n  pnt: new Token(\r\n    MAINNET,\r\n    '0xdaacB0Ab6Fb34d24E8a67BfA14BF4D95D4C7aF92',\r\n    18,\r\n    'PNT',\r\n    'pNetwork Token',\r\n    'https://ptokens.io/',\r\n  ),\r\n  mir: new Token(\r\n    MAINNET,\r\n    '0x5B6DcF557E2aBE2323c48445E8CC948910d8c2c9',\r\n    18,\r\n    'MIR',\r\n    'Mirror Protocol Token',\r\n    'https://mirror.finance/',\r\n  ),\r\n  pbtc: new Token(\r\n    MAINNET,\r\n    '0xeD28A457A5A76596ac48d87C0f577020F6Ea1c4C',\r\n    18,\r\n    'pBTC',\r\n    'pTokens BTC Token',\r\n    'https://ptokens.io/',\r\n  ),\r\n  lto: new Token(\r\n    MAINNET,\r\n    '0x857B222Fc79e1cBBf8Ca5f78CB133d1b7CF34BBd',\r\n    18,\r\n    'LTO',\r\n    'LTO Network Token',\r\n    'https://ltonetwork.com/',\r\n  ),\r\n  pcws: new Token(\r\n    MAINNET,\r\n    '0xbcf39F0EDDa668C58371E519AF37CA705f2bFcbd',\r\n    18,\r\n    'pCWS',\r\n    'PolyCrowns Token',\r\n    'https://game.seascape.network/',\r\n  ),\r\n  zil: new Token(\r\n    MAINNET,\r\n    '0xb86AbCb37C3A4B64f74f59301AFF131a1BEcC787',\r\n    12,\r\n    'ZIL',\r\n    'Zilliqa Token',\r\n    'https://www.zilliqa.com/',\r\n  ),\r\n  lien: new Token(\r\n    MAINNET,\r\n    '0x5d684ADaf3FcFe9CFb5ceDe3abf02F0Cdd1012E3',\r\n    8,\r\n    'LIEN',\r\n    'Lien Finance Token',\r\n    'https://lien.finance/',\r\n  ),\r\n  swth: new Token(\r\n    MAINNET,\r\n    '0x250b211EE44459dAd5Cd3bCa803dD6a7EcB5d46C',\r\n    8,\r\n    'SWTH',\r\n    'Switcheo Network Token',\r\n    'https://switcheo.network/',\r\n  ),\r\n  dft: new Token(\r\n    MAINNET,\r\n    '0x42712dF5009c20fee340B245b510c0395896cF6e',\r\n    18,\r\n    'DFT',\r\n    'Dfuture Token',\r\n    'https://www.dfuture.com/home',\r\n  ),\r\n  gum: new Token(\r\n    MAINNET,\r\n    '0xc53708664b99DF348dd27C3Ac0759d2DA9c40462',\r\n    18,\r\n    'GUM',\r\n    'GourmetGalaxy Token',\r\n    'https://gourmetgalaxy.io/',\r\n  ),\r\n  dego: new Token(\r\n    MAINNET,\r\n    '0x3FdA9383A84C05eC8f7630Fe10AdF1fAC13241CC',\r\n    18,\r\n    'DEGO',\r\n    'Dego Finance Token',\r\n    'https://bsc.dego.finance/home',\r\n  ),\r\n  nrv: new Token(\r\n    MAINNET,\r\n    '0x42F6f551ae042cBe50C739158b4f0CAC0Edb9096',\r\n    18,\r\n    'NRV',\r\n    'Nerve Finance Token',\r\n    'https://nerve.fi/',\r\n  ),\r\n  easy: new Token(\r\n    MAINNET,\r\n    '0x7C17c8bED8d14bAccE824D020f994F4880D6Ab3B',\r\n    18,\r\n    'EASY',\r\n    'EASY Token',\r\n    'https://easyfi.network/',\r\n  ),\r\n  oddz: new Token(MAINNET, '0xCD40F2670CF58720b694968698A5514e924F742d', 18, 'ODDZ', 'Oddz Token', 'https://oddz.fi/'),\r\n  hoo: new Token(MAINNET, '0xE1d1F66215998786110Ba0102ef558b22224C016', 8, 'HOO', 'Hoo Token', 'https://hoo.com/'),\r\n  apys: new Token(\r\n    MAINNET,\r\n    '0x37dfACfaeDA801437Ff648A1559d73f4C40aAcb7',\r\n    18,\r\n    'APYS',\r\n    'APY Swap Token',\r\n    'https://apyswap.com/',\r\n  ),\r\n  bondly: new Token(\r\n    MAINNET,\r\n    '0x96058f8C3e16576D9BD68766f3836d9A33158f89',\r\n    18,\r\n    'BONDLY',\r\n    'Bondly Token',\r\n    'https://www.bondly.finance/',\r\n  ),\r\n  tko: new Token(\r\n    MAINNET,\r\n    '0x9f589e3eabe42ebC94A44727b3f3531C0c877809',\r\n    18,\r\n    'TKO',\r\n    'Tokocrypto Token',\r\n    'https://www.tokocrypto.com/',\r\n  ),\r\n  itam: new Token(\r\n    MAINNET,\r\n    '0x04C747b40Be4D535fC83D09939fb0f626F32800B',\r\n    18,\r\n    'ITAM',\r\n    'Itam Network Token',\r\n    'https://itam.network/',\r\n  ),\r\n  arpa: new Token(\r\n    MAINNET,\r\n    '0x6F769E65c14Ebd1f68817F5f1DcDb61Cfa2D6f7e',\r\n    18,\r\n    'ARPA',\r\n    'Arpachain Token',\r\n    'https://arpachain.io/',\r\n  ),\r\n  eps: new Token(\r\n    MAINNET,\r\n    '0xA7f552078dcC247C2684336020c03648500C6d9F',\r\n    18,\r\n    'EPS',\r\n    'Ellipsis Finance Token',\r\n    'https://ellipsis.finance/',\r\n  ),\r\n  jgn: new Token(\r\n    MAINNET,\r\n    '0xC13B7a43223BB9Bf4B69BD68Ab20ca1B79d81C75',\r\n    18,\r\n    'JGN',\r\n    'Juggernaut DeFi Token',\r\n    'https://jgndefi.com/',\r\n  ),\r\n  tlm: new Token(\r\n    MAINNET,\r\n    '0x2222227E22102Fe3322098e4CBfE18cFebD57c95',\r\n    4,\r\n    'TLM',\r\n    'Alien Worlds Trilium Token',\r\n    'https://alienworlds.io/',\r\n  ),\r\n  perl: new Token(\r\n    MAINNET,\r\n    '0x0F9E4D49f25de22c2202aF916B681FBB3790497B',\r\n    18,\r\n    'PERL',\r\n    'Perlin',\r\n    'https://perlinx.finance/',\r\n  ),\r\n  alpa: new Token(\r\n    MAINNET,\r\n    '0xc5E6689C9c8B02be7C49912Ef19e79cF24977f03',\r\n    18,\r\n    'ALPA',\r\n    'AlpaToken',\r\n    'https://bsc.alpaca.city/',\r\n  ),\r\n  hzn: new Token(\r\n    MAINNET,\r\n    '0xC0eFf7749b125444953ef89682201Fb8c6A917CD',\r\n    18,\r\n    'HZN',\r\n    'Horizon Protocol Token',\r\n    'https://horizonprotocol.com/',\r\n  ),\r\n  suter: new Token(\r\n    MAINNET,\r\n    '0x4CfbBdfBd5BF0814472fF35C72717Bd095ADa055',\r\n    18,\r\n    'SUTER',\r\n    'Suterusu Token',\r\n    'https://shield.suterusu.io/',\r\n  ),\r\n  cgg: new Token(\r\n    MAINNET,\r\n    '0x1613957159E9B0ac6c80e824F7Eea748a32a0AE2',\r\n    18,\r\n    'CGG',\r\n    'pTokens CGG Token',\r\n    'https://chainguardians.io/',\r\n  ),\r\n  mix: new Token(\r\n    MAINNET,\r\n    '0xB67754f5b4C704A24d2db68e661b2875a4dDD197',\r\n    18,\r\n    'MIX',\r\n    'Mix Token',\r\n    'https://mixie.chainguardians.io/',\r\n  ),\r\n  hakka: new Token(\r\n    MAINNET,\r\n    '0x1D1eb8E8293222e1a29d2C0E4cE6C0Acfd89AaaC',\r\n    18,\r\n    'HAKKA',\r\n    'Hakka Token',\r\n    'https://hakka.finance/',\r\n  ),\r\n  xed: new Token(\r\n    MAINNET,\r\n    '0x5621b5A3f4a8008c4CCDd1b942B121c8B1944F1f',\r\n    18,\r\n    'XED',\r\n    'Exeedme Token',\r\n    'https://www.exeedme.com/',\r\n  ),\r\n  τbtc: new Token(\r\n    MAINNET,\r\n    '0x2cD1075682b0FCCaADd0Ca629e138E64015Ba11c',\r\n    9,\r\n    'τBTC',\r\n    'τBitcoin Token',\r\n    'https://www.btcst.finance/',\r\n  ),\r\n  alpaca: new Token(\r\n    MAINNET,\r\n    '0x8F0528cE5eF7B51152A59745bEfDD91D97091d2F',\r\n    18,\r\n    'ALPACA',\r\n    'AlpacaToken',\r\n    'https://www.alpacafinance.org/',\r\n  ),\r\n  dfd: new Token(\r\n    MAINNET,\r\n    '0x9899a98b222fCb2f3dbee7dF45d943093a4ff9ff',\r\n    18,\r\n    'DFD',\r\n    'DefiDollar DAO',\r\n    'https://dusd.finance/',\r\n  ),\r\n  lmt: new Token(\r\n    MAINNET,\r\n    '0x9617857E191354dbEA0b714d78Bc59e57C411087',\r\n    18,\r\n    'LMT',\r\n    'Lympo Market Token',\r\n    'https://lympo.io/lmt/',\r\n  ),\r\n  btt: new Token(\r\n    MAINNET,\r\n    '0x8595F9dA7b868b1822194fAEd312235E43007b49',\r\n    18,\r\n    'BTT',\r\n    'Binance-Peg BitTorrent Token',\r\n    'https://www.bittorrent.com/',\r\n  ),\r\n  trx: new Token(\r\n    MAINNET,\r\n    '0x85EAC5Ac2F758618dFa09bDbe0cf174e7d574D5B',\r\n    18,\r\n    'TRX',\r\n    'TRON Token',\r\n    'https://tron.network/',\r\n  ),\r\n  win: new Token(\r\n    MAINNET,\r\n    '0xaeF0d72a118ce24feE3cD1d43d383897D05B4e99',\r\n    18,\r\n    'WIN',\r\n    'WIN Token',\r\n    'https://winklink.org/',\r\n  ),\r\n  mcoin: new Token(\r\n    MAINNET,\r\n    '0x49022089e78a8D46Ec87A3AF86a1Db6c189aFA6f',\r\n    18,\r\n    'MCOIN',\r\n    'Wrapped Mirror COIN Token',\r\n    'https://mirror.finance/',\r\n  ),\r\n  math: new Token(\r\n    MAINNET,\r\n    '0xF218184Af829Cf2b0019F8E6F0b2423498a36983',\r\n    18,\r\n    'MATH',\r\n    'MATH Token',\r\n    'https://mathwallet.org/',\r\n  ),\r\n  kun: new Token(\r\n    MAINNET,\r\n    '0x1A2fb0Af670D0234c2857FaD35b789F8Cb725584',\r\n    18,\r\n    'KUN',\r\n    'QIAN governance token',\r\n    'https://chemix.io/home',\r\n  ),\r\n  qsd: new Token(\r\n    MAINNET,\r\n    '0x07AaA29E63FFEB2EBf59B33eE61437E1a91A3bb2',\r\n    18,\r\n    'QSD',\r\n    'QIAN second generation dollar',\r\n    'https://chemix.io/home',\r\n  ),\r\n  hyfi: new Token(\r\n    MAINNET,\r\n    '0x9a319b959e33369C5eaA494a770117eE3e585318',\r\n    18,\r\n    'HYFI',\r\n    'HYFI Token',\r\n    'https://hyfi.pro/#/',\r\n  ),\r\n  oin: new Token(\r\n    MAINNET,\r\n    '0x658E64FFcF40D240A43D52CA9342140316Ae44fA',\r\n    8,\r\n    'OIN',\r\n    'oinfinance Token',\r\n    'https://oin.finance/',\r\n  ),\r\n  doge: new Token(\r\n    MAINNET,\r\n    '0xbA2aE424d960c26247Dd6c32edC70B295c744C43',\r\n    8,\r\n    'DOGE',\r\n    'Binance-Peg Dogecoin',\r\n    'https://dogecoin.com/',\r\n  ),\r\n  fine: new Token(\r\n    MAINNET,\r\n    '0x4e6415a5727ea08aAE4580057187923aeC331227',\r\n    18,\r\n    'FINE',\r\n    'Refinable Token',\r\n    'https://refinable.com/',\r\n  ),\r\n  one: new Token(\r\n    MAINNET,\r\n    '0x04BAf95Fd4C52fd09a56D840bAEe0AB8D7357bf0',\r\n    18,\r\n    'ONE',\r\n    'BigONE Token',\r\n    'https://www.bigone.com/',\r\n  ),\r\n  pmon: new Token(\r\n    MAINNET,\r\n    '0x1796ae0b0fa4862485106a0de9b654eFE301D0b2',\r\n    18,\r\n    'PMON',\r\n    'Polkamon Token',\r\n    'https://polkamon.com/',\r\n  ),\r\n  τdoge: new Token(\r\n    MAINNET,\r\n    '0xe550a593d09FBC8DCD557b5C88Cea6946A8b404A',\r\n    8,\r\n    'τDOGE',\r\n    'τDogecoin',\r\n    'https://www.btcst.finance/',\r\n  ),\r\n  btr: new Token(\r\n    MAINNET,\r\n    '0x5a16E8cE8cA316407c6E6307095dc9540a8D62B3',\r\n    18,\r\n    'BTR',\r\n    'Bitrue Token',\r\n    'https://www.bitrue.com/',\r\n  ),\r\n  ubxt: new Token(\r\n    MAINNET,\r\n    '0xBbEB90cFb6FAFa1F69AA130B7341089AbeEF5811',\r\n    18,\r\n    'UBXT',\r\n    'UpBots Token',\r\n    'https://upbots.com/',\r\n  ),\r\n  wmass: new Token(\r\n    MAINNET,\r\n    '0x7e396BfC8a2f84748701167c2d622F041A1D7a17',\r\n    8,\r\n    'WMASS',\r\n    'Wrapped MASS Token',\r\n    'https://massnet.org/en/',\r\n  ),\r\n  rfox: new Token(\r\n    MAINNET,\r\n    '0x0a3A21356793B49154Fd3BbE91CBc2A16c0457f5',\r\n    18,\r\n    'RFOX',\r\n    'RFOX Token',\r\n    'https://www.redfoxlabs.io/',\r\n  ),\r\n  xend: new Token(\r\n    MAINNET,\r\n    '0x4a080377f83D669D7bB83B3184a8A5E61B500608',\r\n    18,\r\n    'XEND',\r\n    'XEND Token',\r\n    'https://xend.finance/',\r\n  ),\r\n  cyc: new Token(MAINNET, '0x810EE35443639348aDbbC467b33310d2AB43c168', 18, 'CYC', 'CYC Token', 'https://cyclone.xyz/'),\r\n  chr: new Token(\r\n    MAINNET,\r\n    '0xf9CeC8d50f6c8ad3Fb6dcCEC577e05aA32B224FE',\r\n    6,\r\n    'CHR',\r\n    'Chroma Token',\r\n    'https://chromia.com/',\r\n  ),\r\n  deri: new Token(\r\n    MAINNET,\r\n    '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\r\n    18,\r\n    'DERI',\r\n    'Deri Token',\r\n    'https://deri.finance/#/index',\r\n  ),\r\n  well: new Token(\r\n    MAINNET,\r\n    '0xf07a32Eb035b786898c00bB1C64d8c6F8E7a46D5',\r\n    18,\r\n    'WELL',\r\n    'BitWell Token',\r\n    'https://www.bitwellex.com/',\r\n  ),\r\n  wex: new Token(\r\n    MAINNET,\r\n    '0xa9c41A46a6B3531d28d5c32F6633dd2fF05dFB90',\r\n    18,\r\n    'WEX',\r\n    'WaultSwap Token',\r\n    'https://wault.finance/',\r\n  ),\r\n  waultx: new Token(\r\n    MAINNET,\r\n    '0xB64E638E60D154B43f660a6BF8fD8a3b249a6a21',\r\n    18,\r\n    'WAULTx',\r\n    'Wault Token',\r\n    'https://wault.finance/',\r\n  ),\r\n  popen: new Token(\r\n    MAINNET,\r\n    '0xaBaE871B7E3b67aEeC6B46AE9FE1A91660AadAC5',\r\n    18,\r\n    'pOPEN',\r\n    'OPEN Governance Token',\r\n    'https://opendao.io/',\r\n  ),\r\n  ez: new Token(\r\n    MAINNET,\r\n    '0x5512014efa6Cd57764Fa743756F7a6Ce3358cC83',\r\n    18,\r\n    'EZ',\r\n    'Easy V2 Token',\r\n    'https://easyfi.network/',\r\n  ),\r\n  vrt: new Token(\r\n    MAINNET,\r\n    '0x5F84ce30DC3cF7909101C69086c50De191895883',\r\n    18,\r\n    'VRT',\r\n    'Venus Reward Token',\r\n    'https://venus.io/',\r\n  ),\r\n  tusd: new Token(\r\n    MAINNET,\r\n    '0x14016E85a25aeb13065688cAFB43044C2ef86784',\r\n    18,\r\n    'TUSD',\r\n    'Binance-Peg TrueUSD Token',\r\n    'https://www.trueusd.com/',\r\n  ),\r\n  mtrg: new Token(\r\n    MAINNET,\r\n    '0xBd2949F67DcdC549c6Ebe98696449Fa79D988A9F',\r\n    18,\r\n    'MTRG',\r\n    'Wrapped MTRG Token',\r\n    'https://www.meter.io/',\r\n  ),\r\n  ktn: new Token(\r\n    MAINNET,\r\n    '0xDAe6c2A48BFAA66b43815c5548b10800919c993E',\r\n    18,\r\n    'KTN',\r\n    'Kattana Token',\r\n    'https://kattana.io/',\r\n  ),\r\n  qkc: new Token(\r\n    MAINNET,\r\n    '0xA1434F1FC3F437fa33F7a781E041961C0205B5Da',\r\n    18,\r\n    'QKC',\r\n    'QuarkChain Token',\r\n    'https://quarkchain.io/',\r\n  ),\r\n  bcfx: new Token(\r\n    MAINNET,\r\n    '0x045c4324039dA91c52C55DF5D785385Aab073DcF',\r\n    18,\r\n    'bCFX',\r\n    'BSC Conflux Token',\r\n    'https://www.confluxnetwork.org/',\r\n  ),\r\n  mx: new Token(MAINNET, '0x9F882567A62a5560d147d64871776EeA72Df41D3', 18, 'MX', 'MX Token', 'https://www.mxc.com/'),\r\n  ata: new Token(\r\n    MAINNET,\r\n    '0xA2120b9e674d3fC3875f415A7DF52e382F141225',\r\n    18,\r\n    'ATA',\r\n    'Automata Token',\r\n    'https://www.ata.network/',\r\n  ),\r\n  mbox: new Token(\r\n    MAINNET,\r\n    '0x3203c9E46cA618C8C1cE5dC67e7e9D75f5da2377',\r\n    18,\r\n    'MBOX',\r\n    'Mobox Token',\r\n    'https://www.mobox.io/#/',\r\n  ),\r\n  boring: new Token(\r\n    MAINNET,\r\n    '0xffEecbf8D7267757c2dc3d13D730E97E15BfdF7F',\r\n    18,\r\n    'BORING',\r\n    'BoringDAO Token',\r\n    'https://www.boringdao.com/',\r\n  ),\r\n  marsh: new Token(\r\n    MAINNET,\r\n    '0x2FA5dAF6Fe0708fBD63b1A7D1592577284f52256',\r\n    18,\r\n    'MARSH',\r\n    'Unmarshal Token',\r\n    'https://unmarshal.io/',\r\n  ),\r\n  ampl: new Token(\r\n    MAINNET,\r\n    '0xDB021b1B247fe2F1fa57e0A87C748Cc1E321F07F',\r\n    9,\r\n    'AMPL',\r\n    'AMPL Token',\r\n    'https://www.ampleforth.org/',\r\n  ),\r\n  o3: new Token(\r\n    MAINNET,\r\n    '0xEe9801669C6138E84bD50dEB500827b776777d28',\r\n    18,\r\n    'O3',\r\n    'O3 Swap Token',\r\n    'https://o3swap.com/',\r\n  ),\r\n  hai: new Token(MAINNET, '0xaA9E582e5751d703F85912903bacADdFed26484C', 8, 'HAI', 'Hacken Token', 'https://hacken.io/'),\r\n  htb: new Token(\r\n    MAINNET,\r\n    '0x4e840AADD28DA189B9906674B4Afcb77C128d9ea',\r\n    18,\r\n    'HTB',\r\n    'Hotbit Token',\r\n    'https://www.hotbit.io/',\r\n  ),\r\n  woo: new Token(\r\n    MAINNET,\r\n    '0x4691937a7508860F876c9c0a2a617E7d9E945D4B',\r\n    18,\r\n    'WOO',\r\n    'Wootrade Network Token',\r\n    'https://woo.network/',\r\n  ),\r\n  $dg: new Token(\r\n    MAINNET,\r\n    '0x9Fdc3ae5c814b79dcA2556564047C5e7e5449C19',\r\n    18,\r\n    '$DG',\r\n    'Decentral Games Token',\r\n    'https://decentral.games/',\r\n  ),\r\n  safemoon: new Token(\r\n    MAINNET,\r\n    '0x8076C74C5e3F5852037F31Ff0093Eeb8c8ADd8D3',\r\n    9,\r\n    'SAFEMOON',\r\n    'Safemoon Token',\r\n    'https://safemoon.net/',\r\n  ),\r\n  axs: new Token(\r\n    MAINNET,\r\n    '0x715D400F88C167884bbCc41C5FeA407ed4D2f8A0',\r\n    18,\r\n    'AXS',\r\n    'Binance-Pegged Axie Infinity Shard',\r\n    'https://axieinfinity.com/',\r\n  ),\r\n  c98: new Token(\r\n    MAINNET,\r\n    '0xaEC945e04baF28b135Fa7c640f624f8D90F1C3a6',\r\n    18,\r\n    'c98',\r\n    'Coin98 Token',\r\n    'https://coin98.com/',\r\n  ),\r\n  pots: new Token(\r\n    MAINNET,\r\n    '0x3Fcca8648651E5b974DD6d3e50F61567779772A8',\r\n    18,\r\n    'POTS',\r\n    'Moonpot Token',\r\n    'https://moonpot.com/',\r\n  ),\r\n  gnt: new Token(\r\n    MAINNET,\r\n    '0xF750A26EB0aCf95556e8529E72eD530f3b60f348',\r\n    18,\r\n    'GNT',\r\n    'GreenTrust Token',\r\n    'https://www.greentrusttoken.com/',\r\n  ),\r\n  rusd: new Token(\r\n    MAINNET,\r\n    '0x07663837218A003e66310a01596af4bf4e44623D',\r\n    18,\r\n    'rUSD',\r\n    'rUSD Token',\r\n    'https://appv2.rampdefi.com/#/',\r\n  ),\r\n  bp: new Token(\r\n    MAINNET,\r\n    '0xACB8f52DC63BB752a51186D1c55868ADbFfEe9C1',\r\n    18,\r\n    'BP',\r\n    'BunnyPark Token',\r\n    'https://www.bunnypark.com/',\r\n  ),\r\n  sfund: new Token(\r\n    MAINNET,\r\n    '0x477bC8d23c634C154061869478bce96BE6045D12',\r\n    18,\r\n    'SFUND',\r\n    'Seedify Fund Token',\r\n    'https://seedify.fund/',\r\n  ),\r\n  naos: new Token(\r\n    MAINNET,\r\n    '0x758d08864fB6cCE3062667225ca10b8F00496cc2',\r\n    18,\r\n    'NAOS',\r\n    'NAOSToken',\r\n    'https://naos.finance/',\r\n  ),\r\n  cart: new Token(\r\n    MAINNET,\r\n    '0x5C8C8D560048F34E5f7f8ad71f2f81a89DBd273e',\r\n    18,\r\n    'CART',\r\n    'CryptoArt.ai',\r\n    'https://cryptoart.ai/',\r\n  ),\r\n  light: new Token(\r\n    MAINNET,\r\n    '0x037838b556d9c9d654148a284682C55bB5f56eF4',\r\n    18,\r\n    'LIGHT',\r\n    'Lightning',\r\n    'https://lightningprotocol.finance/',\r\n  ),\r\n  rpg: new Token(\r\n    MAINNET,\r\n    '0xc2098a8938119A52B1F7661893c0153A6CB116d5',\r\n    18,\r\n    'RPG',\r\n    'Rangers Protocol',\r\n    'https://www.rangersprotocol.com/',\r\n  ),\r\n  mcb: new Token(\r\n    MAINNET,\r\n    '0x5fE80d2CD054645b9419657d3d10d26391780A7B',\r\n    18,\r\n    'MCB',\r\n    'MCDEX',\r\n    'https://mcdex.io/homepage/',\r\n  ),\r\n  lazio: new Token(\r\n    MAINNET,\r\n    '0x77d547256A2cD95F32F67aE0313E450Ac200648d',\r\n    8,\r\n    'LAZIO',\r\n    'FC Lazio Fan Token',\r\n    'https://launchpad.binance.com/en/subscription/LAZIO_BNB',\r\n  ),\r\n  arv: new Token(MAINNET, '0x6679eB24F59dFe111864AEc72B443d1Da666B360', 8, 'ARV', 'ARIVA', 'https://ariva.digital'),\r\n  moni: new Token(\r\n    MAINNET,\r\n    '0x9573c88aE3e37508f87649f87c4dd5373C9F31e0',\r\n    18,\r\n    'MONI',\r\n    'Monsta Infinite',\r\n    'https://monstainfinite.com/',\r\n  ),\r\n  xms: new Token(\r\n    MAINNET,\r\n    '0x7859B01BbF675d67Da8cD128a50D155cd881B576',\r\n    18,\r\n    'XMS',\r\n    'Mars Ecosystem',\r\n    'https://marsecosystem.com/',\r\n  ),\r\n  zoo: new Token(\r\n    MAINNET,\r\n    '0x1D229B958D5DDFca92146585a8711aECbE56F095',\r\n    18,\r\n    'ZOO',\r\n    'ZOO Crypto World',\r\n    'https://zoogame.finance/',\r\n  ),\r\n  fina: new Token(\r\n    MAINNET,\r\n    '0x426c72701833fdDBdFc06c944737C6031645c708',\r\n    18,\r\n    'FINA',\r\n    'Defina Finance',\r\n    'https://defina.finance/',\r\n  ),\r\n  dar: new Token(\r\n    MAINNET,\r\n    '0x23CE9e926048273eF83be0A3A8Ba9Cb6D45cd978',\r\n    6,\r\n    'DAR',\r\n    'Mines of Dalarnia',\r\n    'https://www.minesofdalarnia.com/',\r\n  ),\r\n  xwg: new Token(\r\n    MAINNET,\r\n    '0x6b23C89196DeB721e6Fd9726E6C76E4810a464bc',\r\n    18,\r\n    'XWG',\r\n    'X World Games',\r\n    'https://xwg.games/',\r\n  ),\r\n  eternal: new Token(\r\n    MAINNET,\r\n    '0xD44FD09d74cd13838F137B590497595d6b3FEeA4',\r\n    18,\r\n    'ETERNAL',\r\n    'CryptoMines Eternal',\r\n    'https://cryptomines.app/',\r\n  ),\r\n  porto: new Token(\r\n    MAINNET,\r\n    '0x49f2145d6366099e13B10FbF80646C0F377eE7f6',\r\n    8,\r\n    'PORTO',\r\n    'FC Porto Fan Token',\r\n    'https://launchpad.binance.com/en/subscription/PORTO_BNB',\r\n  ),\r\n  kart: new Token(\r\n    MAINNET,\r\n    '0x8BDd8DBcBDf0C066cA5f3286d33673aA7A553C10',\r\n    18,\r\n    'KART',\r\n    'Dragon Kart',\r\n    'https://dragonkart.com/',\r\n  ),\r\n  qi: new Token(MAINNET, '0x8729438EB15e2C8B576fCc6AeCdA6A148776C0F5', 18, 'QI', 'BENQI', 'https://benqi.fi/'),\r\n  sheesha: new Token(\r\n    MAINNET,\r\n    '0x232FB065D9d24c34708eeDbF03724f2e95ABE768',\r\n    18,\r\n    'SHEESHA',\r\n    'Sheesha Finance',\r\n    'https://www.sheeshafinance.io/',\r\n  ),\r\n  bcoin: new Token(\r\n    MAINNET,\r\n    '0x00e1656e45f18ec6747F5a8496Fd39B50b38396D',\r\n    18,\r\n    'BCOIN',\r\n    'Bomb Crypto',\r\n    'https://bombcrypto.io/',\r\n  ),\r\n  quidd: new Token(\r\n    MAINNET,\r\n    '0x7961Ade0a767c0E5B67Dd1a1F78ba44F727642Ed',\r\n    18,\r\n    'QUIDD',\r\n    'Quidd Token',\r\n    'https://www.quiddtoken.com/',\r\n  ),\r\n  santos: new Token(\r\n    MAINNET,\r\n    '0xA64455a4553C9034236734FadDAddbb64aCE4Cc7',\r\n    8,\r\n    'SANTOS',\r\n    'FC Santos Fan Token',\r\n    'https://launchpad.binance.com/en/launchpool/SANTOS_BNB',\r\n  ),\r\n  nabox: new Token(\r\n    MAINNET,\r\n    '0x755f34709E369D37C6Fa52808aE84A32007d1155',\r\n    18,\r\n    'NABOX',\r\n    'Nabox Token',\r\n    'https://nabox.io/',\r\n  ),\r\n  xcv: new Token(\r\n    MAINNET,\r\n    '0x4be63a9b26EE89b9a3a13fd0aA1D0b2427C135f8',\r\n    18,\r\n    'XCV',\r\n    'XCarnival',\r\n    'https://xcarnival.fi/',\r\n  ),\r\n  idia: new Token(\r\n    MAINNET,\r\n    '0x0b15Ddf19D47E6a86A56148fb4aFFFc6929BcB89',\r\n    18,\r\n    'IDIA',\r\n    'Impossible Decentralized Incubator Access Token',\r\n    'https://impossible.finance/',\r\n  ),\r\n  tt: new Token(\r\n    MAINNET,\r\n    '0x990E7154bB999FAa9b2fa5Ed29E822703311eA85',\r\n    18,\r\n    'TT',\r\n    'Thunder Token',\r\n    'https://www.thundercore.com/',\r\n  ),\r\n  gmee: new Token(\r\n    MAINNET,\r\n    '0x84e9a6F9D240FdD33801f7135908BfA16866939A',\r\n    18,\r\n    'GMEE',\r\n    'GAMEE',\r\n    'https://www.gamee.com/token',\r\n  ),\r\n  htd: new Token(MAINNET, '0x5E2689412Fae5c29BD575fbe1d5C1CD1e0622A8f', 18, 'HTD', 'HeroesTD', 'https://heroestd.io/'),\r\n  dpt: new Token(\r\n    MAINNET,\r\n    '0xE69cAef10A488D7AF31Da46c89154d025546e990',\r\n    18,\r\n    'DPT',\r\n    'Diviner Protocol',\r\n    'https://diviner.finance/',\r\n  ),\r\n  thg: new Token(\r\n    MAINNET,\r\n    '0x9fD87aEfe02441B123c3c32466cD9dB4c578618f',\r\n    18,\r\n    'THG',\r\n    'Thetan Gem',\r\n    'https://thetanarena.com/',\r\n  ),\r\n  ccar: new Token(\r\n    MAINNET,\r\n    '0x50332bdca94673F33401776365b66CC4e81aC81d',\r\n    18,\r\n    'CCAR',\r\n    'CryptoCars',\r\n    'https://cryptocars.me/',\r\n  ),\r\n  high: new Token(\r\n    MAINNET,\r\n    '0x5f4Bde007Dc06b867f86EBFE4802e34A1fFEEd63',\r\n    18,\r\n    'HIGH',\r\n    'Highstreet Token',\r\n    'https://highstreet.market/',\r\n  ),\r\n  sdao: new Token(\r\n    MAINNET,\r\n    '0x90Ed8F1dc86388f14b64ba8fb4bbd23099f18240',\r\n    18,\r\n    'SDAO',\r\n    'Singularity Dao',\r\n    'https://app.singularitydao.ai/',\r\n  ),\r\n  antex: new Token(MAINNET, '0xCA1aCAB14e85F30996aC83c64fF93Ded7586977C', 8, 'ANTEX', 'Antex', 'https://antex.org/'),\r\n  bbt: new Token(\r\n    MAINNET,\r\n    '0xD48474E7444727bF500a32D5AbE01943f3A59A64',\r\n    8,\r\n    'BBT',\r\n    'BitBook',\r\n    'https://www.bitbook.network/',\r\n  ),\r\n  woop: new Token(\r\n    MAINNET,\r\n    '0x8b303d5BbfBbf46F1a4d9741E491e06986894e18',\r\n    18,\r\n    'WOOP',\r\n    'Woonkly Power',\r\n    'https://www.woonkly.com/',\r\n  ),\r\n  gm: new Token(\r\n    MAINNET,\r\n    '0xe2604C9561D490624AA35e156e65e590eB749519',\r\n    18,\r\n    'GM',\r\n    'GoldMiner',\r\n    'https://goldminer.games/',\r\n  ),\r\n  aog: new Token(\r\n    MAINNET,\r\n    '0x40C8225329Bd3e28A043B029E0D07a5344d2C27C',\r\n    18,\r\n    'AOG',\r\n    'AgeOfGods',\r\n    'https://ageofgods.net/',\r\n  ),\r\n  '8pay': new Token(\r\n    MAINNET,\r\n    '0xFeea0bDd3D07eb6FE305938878C0caDBFa169042',\r\n    18,\r\n    '8PAY',\r\n    '8PAY Network',\r\n    'https://8pay.network/',\r\n  ),\r\n  bath: new Token(\r\n    MAINNET,\r\n    '0x0bc89aa98Ad94E6798Ec822d0814d934cCD0c0cE',\r\n    18,\r\n    'BATH',\r\n    'Battle Hero',\r\n    'https://battlehero.io/',\r\n  ),\r\n  insur: new Token(\r\n    MAINNET,\r\n    '0x3192CCDdf1CDcE4Ff055EbC80f3F0231b86A7E30',\r\n    18,\r\n    'INSUR',\r\n    'Bsc-Peg INSUR Token',\r\n    'https://www.insurace.io/',\r\n  ),\r\n} as const)\r\n\r\nexport const testnetTokens = defineTokens({\r\n  wbnb: new Token(\r\n    TESTNET,\r\n    '0x094616F0BdFB0b526bD735Bf66Eca0Ad254ca81F',\r\n    18,\r\n    'WBNB',\r\n    'Wrapped BNB',\r\n    'https://www.binance.com/',\r\n  ),\r\n  cake: new Token(\r\n    TESTNET,\r\n    '0xa35062141Fa33BCA92Ce69FeD37D0E8908868AAe',\r\n    18,\r\n    'CAKE',\r\n    'PancakeSwap Token',\r\n    'https://pancakeswap.finance/',\r\n  ),\r\n  busd: new Token(\r\n    TESTNET,\r\n    '0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee',\r\n    18,\r\n    'BUSD',\r\n    'Binance USD',\r\n    'https://www.paxos.com/busd/',\r\n  ),\r\n  syrup: new Token(\r\n    TESTNET,\r\n    '0xfE1e507CeB712BDe086f3579d2c03248b2dB77f9',\r\n    18,\r\n    'SYRUP',\r\n    'SyrupBar Token',\r\n    'https://pancakeswap.finance/',\r\n  ),\r\n  bake: new Token(\r\n    TESTNET,\r\n    '0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5',\r\n    18,\r\n    'BAKE',\r\n    'Bakeryswap Token',\r\n    'https://www.bakeryswap.org/',\r\n  ),\r\n} as const)\r\n\r\nconst tokens = () => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\n  // If testnet - return list comprised of testnetTokens wherever they exist, and mainnetTokens where they don't\r\n  if (parseInt(chainId, 10) === ChainId.TESTNET) {\r\n    return Object.keys(mainnetTokens).reduce((accum, key) => {\r\n      return { ...accum, [key]: testnetTokens[key] || mainnetTokens[key] }\r\n    }, {} as typeof testnetTokens & typeof mainnetTokens)\r\n  }\r\n\r\n  return mainnetTokens\r\n}\r\n\r\nconst unserializedTokens = tokens()\r\n\r\ntype SerializedTokenList = Record<keyof typeof unserializedTokens, SerializedToken>\r\n\r\nexport const serializeTokens = () => {\r\n  const serializedTokens = Object.keys(unserializedTokens).reduce((accum, key) => {\r\n    return { ...accum, [key]: serializeToken(unserializedTokens[key]) }\r\n  }, {} as SerializedTokenList)\r\n\r\n  return serializedTokens\r\n}\r\n\r\nexport default unserializedTokens\r\n","import { ThunkAction } from 'redux-thunk'\r\nimport { AnyAction } from '@reduxjs/toolkit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport {\r\n  CampaignType,\r\n  SerializedFarmConfig,\r\n  LotteryStatus,\r\n  LotteryTicket,\r\n  DeserializedPoolConfig,\r\n  SerializedPoolConfig,\r\n  Team,\r\n  TranslatableText,\r\n  DeserializedFarmConfig,\r\n} from 'config/constants/types'\r\nimport { NftToken, State as NftMarketState } from './nftMarket/types'\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, State, unknown, AnyAction>\r\n\r\nexport interface BigNumberToJson {\r\n  type: 'BigNumber'\r\n  hex: string\r\n}\r\n\r\nexport type SerializedBigNumber = string\r\n\r\ninterface SerializedFarmUserData {\r\n  allowance: string\r\n  tokenBalance: string\r\n  stakedBalance: string\r\n  earnings: string\r\n}\r\n\r\nexport interface DeserializedFarmUserData {\r\n  allowance: BigNumber\r\n  tokenBalance: BigNumber\r\n  stakedBalance: BigNumber\r\n  earnings: BigNumber\r\n}\r\n\r\nexport interface SerializedFarm extends SerializedFarmConfig {\r\n  tokenPriceBusd?: string\r\n  quoteTokenPriceBusd?: string\r\n  tokenAmountTotal?: SerializedBigNumber\r\n  lpTotalInQuoteToken?: SerializedBigNumber\r\n  lpTotalSupply?: SerializedBigNumber\r\n  tokenPriceVsQuote?: SerializedBigNumber\r\n  poolWeight?: SerializedBigNumber\r\n  userData?: SerializedFarmUserData\r\n}\r\n\r\nexport interface DeserializedFarm extends DeserializedFarmConfig {\r\n  tokenPriceBusd?: string\r\n  quoteTokenPriceBusd?: string\r\n  tokenAmountTotal?: BigNumber\r\n  lpTotalInQuoteToken?: BigNumber\r\n  lpTotalSupply?: BigNumber\r\n  tokenPriceVsQuote?: BigNumber\r\n  poolWeight?: BigNumber\r\n  userData?: DeserializedFarmUserData\r\n}\r\n\r\nexport enum VaultKey {\r\n  CakeVault = 'cakeVault',\r\n  IfoPool = 'ifoPool',\r\n}\r\n\r\ninterface CorePoolProps {\r\n  startBlock?: number\r\n  endBlock?: number\r\n  apr?: number\r\n  rawApr?: number\r\n  stakingTokenPrice?: number\r\n  earningTokenPrice?: number\r\n  vaultKey?: VaultKey\r\n}\r\n\r\nexport interface DeserializedPool extends DeserializedPoolConfig, CorePoolProps {\r\n  totalStaked?: BigNumber\r\n  stakingLimit?: BigNumber\r\n  userData?: {\r\n    allowance: BigNumber\r\n    stakingTokenBalance: BigNumber\r\n    stakedBalance: BigNumber\r\n    pendingReward: BigNumber\r\n  }\r\n}\r\n\r\nexport interface SerializedPool extends SerializedPoolConfig, CorePoolProps {\r\n  totalStaked?: SerializedBigNumber\r\n  stakingLimit?: SerializedBigNumber\r\n  userData?: {\r\n    allowance: SerializedBigNumber\r\n    stakingTokenBalance: SerializedBigNumber\r\n    stakedBalance: SerializedBigNumber\r\n    pendingReward: SerializedBigNumber\r\n  }\r\n}\r\n\r\nexport interface Profile {\r\n  userId: number\r\n  points: number\r\n  teamId: number\r\n  collectionAddress: string\r\n  tokenId: number\r\n  isActive: boolean\r\n  username: string\r\n  nft?: NftToken\r\n  team: Team\r\n  hasRegistered: boolean\r\n}\r\n\r\n// Slices states\r\n\r\nexport interface SerializedFarmsState {\r\n  data: SerializedFarm[]\r\n  loadArchivedFarmsData: boolean\r\n  userDataLoaded: boolean\r\n  loadingKeys: Record<string, boolean>\r\n}\r\n\r\nexport interface DeserializedFarmsState {\r\n  data: DeserializedFarm[]\r\n  loadArchivedFarmsData: boolean\r\n  userDataLoaded: boolean\r\n}\r\n\r\nexport interface VaultFees {\r\n  performanceFee: number\r\n  callFee: number\r\n  withdrawalFee: number\r\n  withdrawalFeePeriod: number\r\n}\r\n\r\nexport interface VaultUser {\r\n  isLoading: boolean\r\n  userShares: string\r\n  cakeAtLastUserAction: string\r\n  lastDepositedTime: string\r\n  lastUserActionTime: string\r\n}\r\n\r\nexport interface IfoVaultUser extends VaultUser {\r\n  credit: string\r\n}\r\n\r\nexport interface CakeVault {\r\n  totalShares?: string\r\n  pricePerFullShare?: string\r\n  totalCakeInVault?: string\r\n  estimatedCakeBountyReward?: string\r\n  totalPendingCakeHarvest?: string\r\n  fees?: VaultFees\r\n  userData?: VaultUser\r\n}\r\n\r\nexport interface IfoCakeVault extends Omit<CakeVault, 'userData'> {\r\n  userData?: IfoVaultUser\r\n  creditStartBlock?: number\r\n  creditEndBlock?: number\r\n}\r\n\r\nexport interface PoolsState {\r\n  data: SerializedPool[]\r\n  cakeVault: CakeVault\r\n  ifoPool: IfoCakeVault\r\n  userDataLoaded: boolean\r\n}\r\n\r\nexport enum ProfileAvatarFetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  FETCHING = 'fetching',\r\n  FETCHED = 'fetched',\r\n}\r\n\r\nexport interface ProfileState {\r\n  isInitialized: boolean\r\n  isLoading: boolean\r\n  hasRegistered: boolean\r\n  data: Profile\r\n  profileAvatars: {\r\n    [key: string]: {\r\n      username: string\r\n      nft: NftToken\r\n      hasRegistered: boolean\r\n      usernameFetchStatus: ProfileAvatarFetchStatus\r\n      avatarFetchStatus: ProfileAvatarFetchStatus\r\n    }\r\n  }\r\n}\r\n\r\nexport type TeamResponse = {\r\n  0: string\r\n  1: string\r\n  2: string\r\n  3: string\r\n  4: boolean\r\n}\r\n\r\nexport type TeamsById = {\r\n  [key: string]: Team\r\n}\r\n\r\nexport interface TeamsState {\r\n  isInitialized: boolean\r\n  isLoading: boolean\r\n  data: TeamsById\r\n}\r\n\r\nexport interface Achievement {\r\n  id: string\r\n  type: CampaignType\r\n  address: string\r\n  title: TranslatableText\r\n  description?: TranslatableText\r\n  badge: string\r\n  points: number\r\n}\r\n\r\nexport enum AchievementFetchStatus {\r\n  ERROR = 'error',\r\n  NOT_FETCHED = 'not-fetched',\r\n  FETCHING = 'fetching',\r\n  FETCHED = 'fetched',\r\n}\r\n\r\nexport interface AchievementState {\r\n  achievements: Achievement[]\r\n  achievementFetchStatus: AchievementFetchStatus\r\n}\r\n\r\n// Block\r\n\r\nexport interface BlockState {\r\n  currentBlock: number\r\n  initialBlock: number\r\n}\r\n\r\n// Predictions\r\n\r\nexport enum BetPosition {\r\n  BULL = 'Bull',\r\n  BEAR = 'Bear',\r\n  HOUSE = 'House',\r\n}\r\n\r\nexport enum PredictionStatus {\r\n  INITIAL = 'initial',\r\n  LIVE = 'live',\r\n  PAUSED = 'paused',\r\n  ERROR = 'error',\r\n}\r\n\r\nexport interface Round {\r\n  id: string\r\n  epoch: number\r\n  position: BetPosition\r\n  failed: boolean\r\n  startAt: number\r\n  startBlock: number\r\n  startHash: string\r\n  lockAt: number\r\n  lockBlock: number\r\n  lockHash: string\r\n  lockPrice: number\r\n  lockRoundId: string\r\n  closeAt: number\r\n  closeBlock: number\r\n  closeHash: string\r\n  closePrice: number\r\n  closeRoundId: string\r\n  totalBets: number\r\n  totalAmount: number\r\n  bullBets: number\r\n  bullAmount: number\r\n  bearBets: number\r\n  bearAmount: number\r\n  bets?: Bet[]\r\n}\r\n\r\nexport interface Market {\r\n  paused: boolean\r\n  epoch: number\r\n}\r\n\r\nexport interface Bet {\r\n  id?: string\r\n  hash?: string\r\n  amount: number\r\n  position: BetPosition\r\n  claimed: boolean\r\n  claimedAt: number\r\n  claimedBlock: number\r\n  claimedHash: string\r\n  claimedBNB: number\r\n  claimedNetBNB: number\r\n  createdAt: number\r\n  updatedAt: number\r\n  user?: PredictionUser\r\n  round?: Round\r\n}\r\n\r\nexport interface PredictionUser {\r\n  id: string\r\n  createdAt: number\r\n  updatedAt: number\r\n  block: number\r\n  totalBets: number\r\n  totalBetsBull: number\r\n  totalBetsBear: number\r\n  totalBNB: number\r\n  totalBNBBull: number\r\n  totalBNBBear: number\r\n  totalBetsClaimed: number\r\n  totalBNBClaimed: number\r\n  winRate: number\r\n  averageBNB: number\r\n  netBNB: number\r\n  bets?: Bet[]\r\n}\r\n\r\nexport enum HistoryFilter {\r\n  ALL = 'all',\r\n  COLLECTED = 'collected',\r\n  UNCOLLECTED = 'uncollected',\r\n}\r\n\r\nexport interface LedgerData {\r\n  [key: string]: {\r\n    [key: string]: ReduxNodeLedger\r\n  }\r\n}\r\n\r\nexport interface RoundData {\r\n  [key: string]: ReduxNodeRound\r\n}\r\n\r\nexport interface ReduxNodeLedger {\r\n  position: BetPosition\r\n  amount: BigNumberToJson\r\n  claimed: boolean\r\n}\r\n\r\nexport interface NodeLedger {\r\n  position: BetPosition\r\n  amount: ethers.BigNumber\r\n  claimed: boolean\r\n}\r\n\r\nexport interface ReduxNodeRound {\r\n  epoch: number\r\n  startTimestamp: number | null\r\n  lockTimestamp: number | null\r\n  closeTimestamp: number | null\r\n  lockPrice: BigNumberToJson | null\r\n  closePrice: BigNumberToJson | null\r\n  totalAmount: BigNumberToJson\r\n  bullAmount: BigNumberToJson\r\n  bearAmount: BigNumberToJson\r\n  rewardBaseCalAmount: BigNumberToJson\r\n  rewardAmount: BigNumberToJson\r\n  oracleCalled: boolean\r\n  lockOracleId: string\r\n  closeOracleId: string\r\n}\r\n\r\nexport interface NodeRound {\r\n  epoch: number\r\n  startTimestamp: number | null\r\n  lockTimestamp: number | null\r\n  closeTimestamp: number | null\r\n  lockPrice: ethers.BigNumber | null\r\n  closePrice: ethers.BigNumber | null\r\n  totalAmount: ethers.BigNumber\r\n  bullAmount: ethers.BigNumber\r\n  bearAmount: ethers.BigNumber\r\n  rewardBaseCalAmount: ethers.BigNumber\r\n  rewardAmount: ethers.BigNumber\r\n  oracleCalled: boolean\r\n  closeOracleId: string\r\n  lockOracleId: string\r\n}\r\n\r\nexport enum LeaderboardLoadingState {\r\n  INITIAL,\r\n  LOADING,\r\n  IDLE,\r\n}\r\n\r\nexport type LeaderboardFilterTimePeriod = '1d' | '7d' | '1m' | 'all'\r\n\r\nexport interface LeaderboardFilter {\r\n  address?: string\r\n  orderBy?: string\r\n  timePeriod?: LeaderboardFilterTimePeriod\r\n}\r\n\r\nexport interface PredictionsState {\r\n  status: PredictionStatus\r\n  isLoading: boolean\r\n  isHistoryPaneOpen: boolean\r\n  isChartPaneOpen: boolean\r\n  isFetchingHistory: boolean\r\n  historyFilter: HistoryFilter\r\n  currentEpoch: number\r\n  intervalSeconds: number\r\n  minBetAmount: string\r\n  bufferSeconds: number\r\n  lastOraclePrice: string\r\n  history: Bet[]\r\n  totalHistory: number\r\n  currentHistoryPage: number\r\n  hasHistoryLoaded: boolean\r\n  rounds?: RoundData\r\n  ledgers?: LedgerData\r\n  claimableStatuses: {\r\n    [key: string]: boolean\r\n  }\r\n  leaderboard: {\r\n    selectedAddress: string\r\n    loadingState: LeaderboardLoadingState\r\n    filters: LeaderboardFilter\r\n    skip: number\r\n    hasMoreResults: boolean\r\n    addressResults: {\r\n      [key: string]: PredictionUser\r\n    }\r\n    results: PredictionUser[]\r\n  }\r\n}\r\n\r\n// Voting\r\n\r\n/* eslint-disable camelcase */\r\n/**\r\n * @see https://hub.snapshot.page/graphql\r\n */\r\nexport interface VoteWhere {\r\n  id?: string\r\n  id_in?: string[]\r\n  voter?: string\r\n  voter_in?: string[]\r\n  proposal?: string\r\n  proposal_in?: string[]\r\n}\r\n\r\nexport enum SnapshotCommand {\r\n  PROPOSAL = 'proposal',\r\n  VOTE = 'vote',\r\n}\r\n\r\nexport enum ProposalType {\r\n  ALL = 'all',\r\n  CORE = 'core',\r\n  COMMUNITY = 'community',\r\n}\r\n\r\nexport enum ProposalState {\r\n  ACTIVE = 'active',\r\n  PENDING = 'pending',\r\n  CLOSED = 'closed',\r\n}\r\n\r\nexport interface Space {\r\n  id: string\r\n  name: string\r\n}\r\n\r\nexport interface Proposal {\r\n  author: string\r\n  body: string\r\n  choices: string[]\r\n  end: number\r\n  id: string\r\n  snapshot: string\r\n  space: Space\r\n  start: number\r\n  state: ProposalState\r\n  title: string\r\n}\r\n\r\nexport interface Vote {\r\n  id: string\r\n  voter: string\r\n  created: number\r\n  space: Space\r\n  proposal: {\r\n    choices: Proposal['choices']\r\n  }\r\n  choice: number\r\n  metadata?: {\r\n    votingPower: string\r\n    verificationHash: string\r\n  }\r\n  _inValid?: boolean\r\n}\r\n\r\nexport enum VotingStateLoadingStatus {\r\n  INITIAL = 'initial',\r\n  IDLE = 'idle',\r\n  LOADING = 'loading',\r\n  ERROR = 'error',\r\n}\r\n\r\nexport interface VotingState {\r\n  proposalLoadingStatus: VotingStateLoadingStatus\r\n  proposals: {\r\n    [key: string]: Proposal\r\n  }\r\n  voteLoadingStatus: VotingStateLoadingStatus\r\n  votes: {\r\n    [key: string]: Vote[]\r\n  }\r\n}\r\n\r\nexport interface LotteryRoundUserTickets {\r\n  isLoading?: boolean\r\n  tickets?: LotteryTicket[]\r\n}\r\n\r\ninterface LotteryRoundGenerics {\r\n  isLoading?: boolean\r\n  lotteryId: string\r\n  status: LotteryStatus\r\n  startTime: string\r\n  endTime: string\r\n  treasuryFee: string\r\n  firstTicketId: string\r\n  lastTicketId: string\r\n  finalNumber: number\r\n}\r\n\r\nexport interface LotteryRound extends LotteryRoundGenerics {\r\n  userTickets?: LotteryRoundUserTickets\r\n  priceTicketInCake: BigNumber\r\n  discountDivisor: BigNumber\r\n  amountCollectedInCake: BigNumber\r\n  cakePerBracket: string[]\r\n  countWinnersPerBracket: string[]\r\n  rewardsBreakdown: string[]\r\n}\r\n\r\nexport interface LotteryResponse extends LotteryRoundGenerics {\r\n  priceTicketInCake: SerializedBigNumber\r\n  discountDivisor: SerializedBigNumber\r\n  amountCollectedInCake: SerializedBigNumber\r\n  cakePerBracket: SerializedBigNumber[]\r\n  countWinnersPerBracket: SerializedBigNumber[]\r\n  rewardsBreakdown: SerializedBigNumber[]\r\n}\r\n\r\nexport interface LotteryState {\r\n  currentLotteryId: string\r\n  maxNumberTicketsPerBuyOrClaim: string\r\n  isTransitioning: boolean\r\n  currentRound: LotteryResponse & { userTickets?: LotteryRoundUserTickets }\r\n  lotteriesData?: LotteryRoundGraphEntity[]\r\n  userLotteryData?: LotteryUserGraphEntity\r\n}\r\n\r\nexport interface LotteryRoundGraphEntity {\r\n  id: string\r\n  totalUsers: string\r\n  totalTickets: string\r\n  winningTickets: string\r\n  status: LotteryStatus\r\n  finalNumber: string\r\n  startTime: string\r\n  endTime: string\r\n  ticketPrice: SerializedBigNumber\r\n}\r\n\r\nexport interface LotteryUserGraphEntity {\r\n  account: string\r\n  totalCake: string\r\n  totalTickets: string\r\n  rounds: UserRound[]\r\n}\r\n\r\nexport interface UserRound {\r\n  claimed: boolean\r\n  lotteryId: string\r\n  status: LotteryStatus\r\n  endTime: string\r\n  totalTickets: string\r\n  tickets?: LotteryTicket[]\r\n}\r\n\r\nexport type UserTicketsResponse = [ethers.BigNumber[], number[], boolean[]]\r\n\r\n// Global state\r\n\r\nexport interface State {\r\n  achievements: AchievementState\r\n  block: BlockState\r\n  farms: SerializedFarmsState\r\n  pools: PoolsState\r\n  predictions: PredictionsState\r\n  profile: ProfileState\r\n  teams: TeamsState\r\n  voting: VotingState\r\n  lottery: LotteryState\r\n  nftMarket: NftMarketState\r\n}\r\n","import { useEffect, useState, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Web3Provider } from '@ethersproject/providers'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\r\n\r\n/**\r\n * Provides a web3 provider with or without user's signer\r\n * Recreate web3 instance only if the provider change\r\n */\r\nconst useActiveWeb3React = (): Web3ReactContextInterface<Web3Provider> => {\r\n  const { library, chainId, ...web3React } = useWeb3React()\r\n  const refEth = useRef(library)\r\n  const [provider, setProvider] = useState(library || simpleRpcProvider)\r\n\r\n  useEffect(() => {\r\n    if (library !== refEth.current) {\r\n      setProvider(library || simpleRpcProvider)\r\n      refEth.current = library\r\n    }\r\n  }, [library])\r\n\r\n  return { library: provider, chainId: chainId ?? parseInt(process.env.REACT_APP_CHAIN_ID, 10), ...web3React }\r\n}\r\n\r\nexport default useActiveWeb3React\r\n","import { ethers } from 'ethers'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport { poolsConfig } from 'config/constants'\r\nimport { PoolCategory } from 'config/constants/types'\r\nimport tokens from 'config/constants/tokens'\r\n\r\n// Addresses\r\nimport {\r\n  getAddress,\r\n  getPancakeProfileAddress,\r\n  getPancakeRabbitsAddress,\r\n  getBunnyFactoryAddress,\r\n  getBunnySpecialAddress,\r\n  getLotteryV2Address,\r\n  getMasterChefAddress,\r\n  getPointCenterIfoAddress,\r\n  getClaimRefundAddress,\r\n  getTradingCompetitionAddress,\r\n  getEasterNftAddress,\r\n  getCakeVaultAddress,\r\n  getIfoPoolAddress,\r\n  getPredictionsAddress,\r\n  getChainlinkOracleAddress,\r\n  getMulticallAddress,\r\n  getBunnySpecialCakeVaultAddress,\r\n  getBunnySpecialPredictionAddress,\r\n  getBunnySpecialLotteryAddress,\r\n  getFarmAuctionAddress,\r\n  getAnniversaryAchievement,\r\n  getNftMarketAddress,\r\n  getNftSaleAddress,\r\n  getPancakeSquadAddress,\r\n  getTradingCompetitionAddressV2,\r\n  getBunnySpecialXmasAddress,\r\n  getPresaleAddress,\r\n} from 'utils/addressHelpers'\r\n\r\n// ABI\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport pancakeRabbitsAbi from 'config/abi/pancakeRabbits.json'\r\nimport bunnyFactoryAbi from 'config/abi/bunnyFactory.json'\r\nimport bunnySpecialAbi from 'config/abi/bunnySpecial.json'\r\nimport bep20Abi from 'config/abi/erc20.json'\r\nimport erc721Abi from 'config/abi/erc721.json'\r\nimport lpTokenAbi from 'config/abi/lpToken.json'\r\nimport cakeAbi from 'config/abi/cake.json'\r\nimport ifoV1Abi from 'config/abi/ifoV1.json'\r\nimport ifoV2Abi from 'config/abi/ifoV2.json'\r\nimport pointCenterIfo from 'config/abi/pointCenterIfo.json'\r\nimport lotteryV2Abi from 'config/abi/lotteryV2.json'\r\nimport masterChef from 'config/abi/masterchef.json'\r\nimport sousChef from 'config/abi/sousChef.json'\r\nimport sousChefV2 from 'config/abi/sousChefV2.json'\r\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\r\nimport claimRefundAbi from 'config/abi/claimRefund.json'\r\nimport tradingCompetitionAbi from 'config/abi/tradingCompetition.json'\r\nimport tradingCompetitionV2Abi from 'config/abi/tradingCompetitionV2.json'\r\nimport easterNftAbi from 'config/abi/easterNft.json'\r\nimport cakeVaultAbi from 'config/abi/cakeVault.json'\r\nimport ifoPoolAbi from 'config/abi/ifoPool.json'\r\nimport predictionsAbi from 'config/abi/predictions.json'\r\nimport chainlinkOracleAbi from 'config/abi/chainlinkOracle.json'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport bunnySpecialCakeVaultAbi from 'config/abi/bunnySpecialCakeVault.json'\r\nimport bunnySpecialPredictionAbi from 'config/abi/bunnySpecialPrediction.json'\r\nimport bunnySpecialLotteryAbi from 'config/abi/bunnySpecialLottery.json'\r\nimport bunnySpecialXmasAbi from 'config/abi/bunnySpecialXmas.json'\r\nimport farmAuctionAbi from 'config/abi/farmAuction.json'\r\nimport anniversaryAchievementAbi from 'config/abi/anniversaryAchievement.json'\r\nimport nftMarketAbi from 'config/abi/nftMarket.json'\r\nimport nftSaleAbi from 'config/abi/nftSale.json'\r\nimport pancakeSquadAbi from 'config/abi/pancakeSquad.json'\r\nimport erc721CollectionAbi from 'config/abi/erc721collection.json'\r\nimport presaleAbi from 'config/abi/presale.json'\r\nimport seraAbi from 'config/abi/sera.json'\r\nimport { ChainLinkOracleContract, FarmAuctionContract, PancakeProfileContract, PredictionsContract } from './types'\r\n\r\nconst getContract = (abi: any, address: string, signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  const signerOrProvider = signer ?? simpleRpcProvider\r\n  return new ethers.Contract(address, abi, signerOrProvider)\r\n}\r\n\r\nexport const getBep20Contract = (address: string, signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(bep20Abi, address, signer)\r\n}\r\nexport const getErc721Contract = (address: string, signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(erc721Abi, address, signer)\r\n}\r\nexport const getLpContract = (address: string, signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(lpTokenAbi, address, signer)\r\n}\r\nexport const getIfoV1Contract = (address: string, signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(ifoV1Abi, address, signer)\r\n}\r\nexport const getIfoV2Contract = (address: string, signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(ifoV2Abi, address, signer)\r\n}\r\nexport const getSouschefContract = (id: number, signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  const config = poolsConfig.find((pool) => pool.sousId === id)\r\n  const abi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\r\n  return getContract(abi, getAddress(config.contractAddress), signer)\r\n}\r\nexport const getSouschefV2Contract = (id: number, signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  const config = poolsConfig.find((pool) => pool.sousId === id)\r\n  return getContract(sousChefV2, getAddress(config.contractAddress), signer)\r\n}\r\nexport const getPointCenterIfoContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(pointCenterIfo, getPointCenterIfoAddress(), signer)\r\n}\r\nexport const getCakeContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(cakeAbi, tokens.cake.address, signer)\r\n}\r\nexport const getProfileContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(profileABI, getPancakeProfileAddress(), signer) as PancakeProfileContract\r\n}\r\nexport const getPancakeRabbitContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(pancakeRabbitsAbi, getPancakeRabbitsAddress(), signer)\r\n}\r\nexport const getBunnyFactoryContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(bunnyFactoryAbi, getBunnyFactoryAddress(), signer)\r\n}\r\nexport const getBunnySpecialContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(bunnySpecialAbi, getBunnySpecialAddress(), signer)\r\n}\r\nexport const getLotteryV2Contract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(lotteryV2Abi, getLotteryV2Address(), signer)\r\n}\r\nexport const getMasterchefContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(masterChef, getMasterChefAddress(), signer)\r\n}\r\nexport const getClaimRefundContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(claimRefundAbi, getClaimRefundAddress(), signer)\r\n}\r\nexport const getTradingCompetitionContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(tradingCompetitionAbi, getTradingCompetitionAddress(), signer)\r\n}\r\n\r\nexport const getTradingCompetitionContractV2 = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(tradingCompetitionV2Abi, getTradingCompetitionAddressV2(), signer)\r\n}\r\nexport const getEasterNftContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(easterNftAbi, getEasterNftAddress(), signer)\r\n}\r\nexport const getCakeVaultContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(cakeVaultAbi, getCakeVaultAddress(), signer)\r\n}\r\nexport const getIfoPoolContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(ifoPoolAbi, getIfoPoolAddress(), signer)\r\n}\r\n\r\nexport const getPredictionsContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(predictionsAbi, getPredictionsAddress(), signer) as PredictionsContract\r\n}\r\n\r\nexport const getChainlinkOracleContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(chainlinkOracleAbi, getChainlinkOracleAddress(), signer) as ChainLinkOracleContract\r\n}\r\nexport const getMulticallContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(MultiCallAbi, getMulticallAddress(), signer)\r\n}\r\nexport const getBunnySpecialCakeVaultContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(bunnySpecialCakeVaultAbi, getBunnySpecialCakeVaultAddress(), signer)\r\n}\r\nexport const getBunnySpecialPredictionContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(bunnySpecialPredictionAbi, getBunnySpecialPredictionAddress(), signer)\r\n}\r\nexport const getBunnySpecialLotteryContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(bunnySpecialLotteryAbi, getBunnySpecialLotteryAddress(), signer)\r\n}\r\nexport const getBunnySpecialXmasContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(bunnySpecialXmasAbi, getBunnySpecialXmasAddress(), signer)\r\n}\r\nexport const getFarmAuctionContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(farmAuctionAbi, getFarmAuctionAddress(), signer) as FarmAuctionContract\r\n}\r\nexport const getAnniversaryAchievementContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(anniversaryAchievementAbi, getAnniversaryAchievement(), signer)\r\n}\r\nexport const getNftMarketContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(nftMarketAbi, getNftMarketAddress(), signer)\r\n}\r\nexport const getNftSaleContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(nftSaleAbi, getNftSaleAddress(), signer)\r\n}\r\nexport const getPancakeSquadContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(pancakeSquadAbi, getPancakeSquadAddress(), signer)\r\n}\r\nexport const getErc721CollectionContract = (signer?: ethers.Signer | ethers.providers.Provider, address?: string) => {\r\n  return getContract(erc721CollectionAbi, address, signer)\r\n}\r\nexport const getPresaleContract = (signer?: ethers.Signer | ethers.providers.Provider, address?: string) => {\r\n  return getContract(presaleAbi, getPresaleAddress(), signer)\r\n}\r\nexport const getSeraContract = (signer?: ethers.Signer | ethers.providers.Provider) => {\r\n  return getContract(seraAbi, tokens.sera.address, signer)\r\n}","import { createAction } from '@reduxjs/toolkit'\r\nimport { SerializedToken } from 'config/constants/types'\r\n\r\nexport interface SerializedPair {\r\n  token0: SerializedToken\r\n  token1: SerializedToken\r\n}\r\n\r\nexport enum FarmStakedOnly {\r\n  ON_FINISHED = 'onFinished',\r\n  TRUE = 'true',\r\n  FALSE = 'false',\r\n}\r\n\r\nexport enum ViewMode {\r\n  TABLE = 'TABLE',\r\n  CARD = 'CARD',\r\n}\r\n\r\nexport enum ChartViewMode {\r\n  BASIC = 'BASIC',\r\n  TRADING_VIEW = 'TRADING_VIEW',\r\n}\r\n\r\nexport const updateUserExpertMode = createAction<{ userExpertMode: boolean }>('user/updateUserExpertMode')\r\nexport const updateUserSingleHopOnly = createAction<{ userSingleHopOnly: boolean }>('user/updateUserSingleHopOnly')\r\nexport const updateUserSlippageTolerance = createAction<{ userSlippageTolerance: number }>(\r\n  'user/updateUserSlippageTolerance',\r\n)\r\nexport const updateUserDeadline = createAction<{ userDeadline: number }>('user/updateUserDeadline')\r\nexport const addSerializedToken = createAction<{ serializedToken: SerializedToken }>('user/addSerializedToken')\r\nexport const removeSerializedToken = createAction<{ chainId: number; address: string }>('user/removeSerializedToken')\r\nexport const addSerializedPair = createAction<{ serializedPair: SerializedPair }>('user/addSerializedPair')\r\nexport const removeSerializedPair =\r\n  createAction<{ chainId: number; tokenAAddress: string; tokenBAddress: string }>('user/removeSerializedPair')\r\n\r\nexport const muteAudio = createAction<void>('user/muteAudio')\r\nexport const unmuteAudio = createAction<void>('user/unmuteAudio')\r\nexport const toggleTheme = createAction<void>('user/toggleTheme')\r\nexport const updateUserFarmStakedOnly = createAction<{ userFarmStakedOnly: FarmStakedOnly }>(\r\n  'user/updateUserFarmStakedOnly',\r\n)\r\nexport const updateUserPoolStakedOnly = createAction<{ userPoolStakedOnly: boolean }>('user/updateUserPoolStakedOnly')\r\nexport const updateUserPoolsViewMode = createAction<{ userPoolsViewMode: ViewMode }>('user/updateUserPoolsViewMode')\r\nexport const updateUserFarmsViewMode = createAction<{ userFarmsViewMode: ViewMode }>('user/updateUserFarmsViewMode')\r\nexport const updateUserPredictionAcceptedRisk = createAction<{ userAcceptedRisk: boolean }>(\r\n  'user/updateUserPredictionAcceptedRisk',\r\n)\r\nexport const updateUserPredictionChartDisclaimerShow = createAction<{ userShowDisclaimer: boolean }>(\r\n  'user/updateUserPredictionChartDisclaimerShow',\r\n)\r\nexport const updateUserExpertModeAcknowledgementShow = createAction<{ userExpertModeAcknowledgementShow: boolean }>(\r\n  'user/updateUserExpertModeAcknowledgementShow',\r\n)\r\nexport const updateUserUsernameVisibility = createAction<{ userUsernameVisibility: boolean }>(\r\n  'user/updateUserUsernameVisibility',\r\n)\r\nexport const updateGasPrice = createAction<{ gasPrice: string }>('user/updateGasPrice')\r\n\r\nexport const addWatchlistToken = createAction<{ address: string }>('user/addWatchlistToken')\r\nexport const addWatchlistPool = createAction<{ address: string }>('user/addWatchlistPool')\r\n\r\nexport const hidePhishingWarningBanner = createAction<void>('user/hidePhishingWarningBanner')\r\n\r\nexport const setIsExchangeChartDisplayed = createAction<boolean>('user/toggleIsExchangeChartDisplayed')\r\nexport const setChartViewMode = createAction<ChartViewMode>('user/setChartViewMode')\r\nexport const setSubgraphHealthIndicatorDisplayed = createAction<boolean>('user/setSubgraphHealthIndicatorDisplayed')\r\n","import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\n\r\nexport const BIG_ZERO = new BigNumber(0)\r\nexport const BIG_ONE = new BigNumber(1)\r\nexport const BIG_NINE = new BigNumber(9)\r\nexport const BIG_TEN = new BigNumber(10)\r\n\r\nexport const ethersToSerializedBigNumber = (ethersBn: ethers.BigNumber): SerializedBigNumber =>\r\n  ethersToBigNumber(ethersBn).toJSON()\r\n\r\nexport const ethersToBigNumber = (ethersBn: ethers.BigNumber): BigNumber => new BigNumber(ethersBn.toString())\r\n","import { ethers } from 'ethers'\r\nimport { getMulticallContract } from 'utils/contractHelpers'\r\nimport { MultiCallResponse } from './types'\r\n\r\nexport interface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (example: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\ninterface MulticallOptions {\r\n  requireSuccess?: boolean\r\n}\r\n\r\nconst multicall = async <T = any>(abi: any[], calls: Call[]): Promise<T> => {\r\n  try {\r\n    const multi = getMulticallContract()\r\n    const itf = new ethers.utils.Interface(abi)\r\n\r\n    const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n    const { returnData } = await multi.aggregate(calldata)\r\n\r\n    const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n    return res\r\n  } catch (error) {\r\n    throw new Error(error)\r\n  }\r\n}\r\n\r\n/**\r\n * Multicall V2 uses the new \"tryAggregate\" function. It is different in 2 ways\r\n *\r\n * 1. If \"requireSuccess\" is false multicall will not bail out if one of the calls fails\r\n * 2. The return includes a boolean whether the call was successful e.g. [wasSuccessful, callResult]\r\n */\r\nexport const multicallv2 = async <T = any>(\r\n  abi: any[],\r\n  calls: Call[],\r\n  options: MulticallOptions = { requireSuccess: true },\r\n): Promise<MultiCallResponse<T>> => {\r\n  const { requireSuccess } = options\r\n  const multi = getMulticallContract()\r\n  const itf = new ethers.utils.Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const returnData = await multi.tryAggregate(requireSuccess, calldata)\r\n  const res = returnData.map((call, i) => {\r\n    const [result, data] = call\r\n    return result ? itf.decodeFunctionResult(calls[i].name, data) : null\r\n  })\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","export const GRAPH_API_PROFILE = process.env.REACT_APP_GRAPH_API_PROFILE\r\nexport const GRAPH_API_PREDICTION = process.env.REACT_APP_GRAPH_API_PREDICTION\r\nexport const GRAPH_API_LOTTERY = process.env.REACT_APP_GRAPH_API_LOTTERY\r\nexport const SNAPSHOT_VOTING_API = process.env.REACT_APP_SNAPSHOT_VOTING_API\r\nexport const SNAPSHOT_BASE_URL = process.env.REACT_APP_SNAPSHOT_BASE_URL\r\nexport const API_PROFILE = process.env.REACT_APP_API_PROFILE\r\nexport const API_NFT = process.env.REACT_APP_API_NFT\r\nexport const SNAPSHOT_API = `${SNAPSHOT_BASE_URL}/graphql`\r\nexport const SNAPSHOT_HUB_API = `${SNAPSHOT_BASE_URL}/api/message`\r\n\r\n/**\r\n * V1 will be deprecated but is still used to claim old rounds\r\n */\r\nexport const GRAPH_API_PREDICTION_V1 = 'https://api.thegraph.com/subgraphs/name/pancakeswap/prediction'\r\n\r\nexport const INFO_CLIENT = 'https://bsc.streamingfast.io/subgraphs/name/pancakeswap/exchange-v2'\r\nexport const BLOCKS_CLIENT = 'https://api.thegraph.com/subgraphs/name/pancakeswap/blocks'\r\nexport const GRAPH_API_NFTMARKET = process.env.REACT_APP_GRAPH_API_NFT_MARKET\r\nexport const GRAPH_HEALTH = 'https://api.thegraph.com/index-node/graphql'\r\n","import { BigNumberish } from 'ethers'\r\n\r\n// Collections -> Nfts -> Transactions\r\n// Users -> Nft tokens IDs\r\n\r\n// TODO: Handle the error state on the UI\r\nexport enum NFTMarketInitializationState {\r\n  UNINITIALIZED = 'UNINITIALIZED',\r\n  INITIALIZED = 'INITIALIZED',\r\n  ERROR = 'ERROR',\r\n}\r\n\r\nexport enum UserNftInitializationState {\r\n  UNINITIALIZED = 'UNINITIALIZED',\r\n  INITIALIZING = 'INITIALIZING',\r\n  INITIALIZED = 'INITIALIZED',\r\n  ERROR = 'ERROR',\r\n}\r\n\r\nexport enum NftFilterLoadingState {\r\n  IDLE = 'IDLE',\r\n  LOADING = 'LOADING',\r\n}\r\n\r\nexport interface State {\r\n  initializationState: NFTMarketInitializationState\r\n  data: {\r\n    collections: Record<string, Collection> // string is the address\r\n    nfts: Record<string, NftToken[]> // string is the collection address\r\n    filters: Record<string, NftFilter> // string is the collection address\r\n    activityFilters: Record<string, NftActivityFilter> // string is the collection address\r\n    loadingState: {\r\n      isUpdatingPancakeBunnies: boolean\r\n      latestPancakeBunniesUpdateAt: number\r\n    }\r\n    users: Record<string, User> // string is the address\r\n    user: UserNftsState\r\n  }\r\n}\r\n\r\nexport interface UserNftsState {\r\n  userNftsInitializationState: UserNftInitializationState\r\n  nfts: NftToken[]\r\n  activity: UserActivity\r\n}\r\n\r\nexport interface Transaction {\r\n  id: string\r\n  block: string\r\n  timestamp: string\r\n  askPrice: string\r\n  netPrice: string\r\n  buyer: { id: string }\r\n  seller: { id: string }\r\n  withBNB: boolean\r\n  nft?: TokenMarketData\r\n}\r\n\r\nexport enum AskOrderType {\r\n  NEW = 'New',\r\n  MODIFY = 'Modify',\r\n  CANCEL = 'Cancel',\r\n}\r\n\r\nexport interface AskOrder {\r\n  id: string\r\n  block: string\r\n  timestamp: string\r\n  askPrice: string\r\n  orderType: AskOrderType\r\n  nft?: TokenMarketData\r\n  seller?: { id: string }\r\n}\r\n\r\nexport interface Image {\r\n  original: string\r\n  thumbnail: string\r\n  mp4?: string\r\n  webm?: string\r\n  gif?: string\r\n}\r\n\r\nexport enum NftLocation {\r\n  FORSALE = 'For Sale',\r\n  PROFILE = 'Profile Pic',\r\n  WALLET = 'In Wallet',\r\n}\r\n\r\n// Market data regarding specific token ID, acquired via subgraph\r\nexport interface TokenMarketData {\r\n  tokenId: string\r\n  metadataUrl: string\r\n  currentAskPrice: string\r\n  currentSeller: string\r\n  latestTradedPriceInBNB: string\r\n  tradeVolumeBNB: string\r\n  totalTrades: string\r\n  isTradable: boolean\r\n  otherId: string\r\n  collection?: {\r\n    id: string\r\n  }\r\n  updatedAt?: string\r\n  transactionHistory?: Transaction[]\r\n}\r\n\r\n// Represents single NFT token, either Squad-like NFT or single PancakeBunny.\r\nexport interface NftToken {\r\n  tokenId: string\r\n  name: string\r\n  description: string\r\n  collectionName: string\r\n  collectionAddress: string\r\n  image: Image\r\n  attributes?: NftAttribute[]\r\n  createdAt?: string // API createdAt\r\n  updatedAt?: string // API updatedAt\r\n  marketData?: TokenMarketData\r\n  location?: NftLocation\r\n  meta?: Record<string, string | number>\r\n}\r\n\r\nexport interface NftFilter {\r\n  loadingState: NftFilterLoadingState\r\n  activeFilters: Record<string, NftAttribute>\r\n  showOnlyOnSale: boolean\r\n  ordering: {\r\n    field: string\r\n    direction: 'asc' | 'desc'\r\n  }\r\n}\r\n\r\nexport interface NftActivityFilter {\r\n  typeFilters: MarketEvent[]\r\n}\r\n\r\nexport interface TokenIdWithCollectionAddress {\r\n  collectionAddress: string\r\n  tokenId: string\r\n  nftLocation?: NftLocation\r\n}\r\n\r\nexport interface NftAttribute {\r\n  traitType: string\r\n  value: string | number\r\n  displayType: string\r\n}\r\n\r\n// Internal type used to refer to a collection\r\n// Most fields are populated from API (via ApiCollection type)\r\nexport interface Collection {\r\n  id: string\r\n  address: string\r\n  name: string\r\n  description?: string\r\n  symbol: string\r\n  active: boolean\r\n  totalVolumeBNB: string\r\n  numberTokensListed: string\r\n  tradingFee: string\r\n  creatorFee: string\r\n  owner: string\r\n  totalSupply: string\r\n  verified: boolean\r\n  avatar: string\r\n  banner: {\r\n    large: string\r\n    small: string\r\n  }\r\n  attributes?: NftAttribute[]\r\n}\r\n\r\nexport interface ApiCollections {\r\n  [key: string]: Collection\r\n}\r\n\r\nexport interface User {\r\n  address: string\r\n  numberTokensListed: BigNumberish\r\n  numberTokensPurchased: BigNumberish\r\n  numberTokensSold: BigNumberish\r\n  nfts: Record<string, BigNumberish> // String is an address, BigNumberish is a tokenID\r\n}\r\n\r\n/**\r\n * API RESPONSES\r\n */\r\n\r\nexport interface ApiCollection {\r\n  address: string\r\n  owner: string\r\n  name: string\r\n  description: string\r\n  symbol: string\r\n  totalSupply: string\r\n  verified: boolean\r\n  createdAt: string\r\n  updatedAt: string\r\n  avatar: string\r\n  banner: {\r\n    large: string\r\n    small: string\r\n  }\r\n  attributes?: NftAttribute[] // returned for specific collection but not for all collections\r\n}\r\n\r\n// Get all collections\r\n// ${API_NFT}/collections/\r\nexport interface ApiCollectionsResponse {\r\n  total: number\r\n  data: ApiCollection[]\r\n}\r\n\r\n// Get single collection\r\n// ${API_NFT}/collections/${collectionAddress}\r\nexport interface ApiSingleCollectionResponse {\r\n  data: ApiCollection\r\n}\r\n\r\n// Get single collection\r\n// ${API_NFT}/collections/${collectionAddress}\r\nexport interface ApiTokenFilterResponse {\r\n  total: number\r\n  data: Record<string, ApiSingleTokenData>\r\n}\r\n\r\nexport interface ApiSingleTokenData {\r\n  name: string\r\n  description: string\r\n  image: Image\r\n  collection: {\r\n    name: string\r\n  }\r\n  attributes?: NftAttribute[]\r\n  tokenId?: string\r\n}\r\n\r\n// Get tokens within collection\r\n// ${API_NFT}/collections/${collectionAddress}/tokens\r\nexport interface ApiResponseCollectionTokens {\r\n  total: number\r\n  attributesDistribution: Record<string, number>\r\n  data: Record<string, ApiSingleTokenData>\r\n}\r\n\r\n// Get specific token data\r\n// ${API_NFT}/collections/${collectionAddress}/tokens/${tokenId}\r\nexport interface ApiResponseSpecificToken {\r\n  data: {\r\n    tokenId: string\r\n    name: string\r\n    description: string\r\n    image: Image\r\n    createdAt: string\r\n    updatedAt: string\r\n    attributes: NftAttribute[]\r\n    collection: {\r\n      name: string\r\n    }\r\n  }\r\n}\r\n\r\n// ${API_NFT}/collections/${collectionAddress}/distribution\r\nexport interface ApiCollectionDistribution {\r\n  total: number\r\n  data: Record<string, Record<string, number>>\r\n}\r\n\r\nexport interface ApiCollectionDistributionPB {\r\n  total: number\r\n  data: Record<string, number>\r\n}\r\n\r\nexport interface Activity {\r\n  marketEvent: MarketEvent\r\n  timestamp: string\r\n  tx: string\r\n  nft?: TokenMarketData\r\n  price?: string\r\n  otherParty?: string\r\n  buyer?: string\r\n  seller?: string\r\n}\r\n\r\nexport enum MarketEvent {\r\n  NEW = 'NEW',\r\n  CANCEL = 'CANCEL',\r\n  MODIFY = 'MODIFY',\r\n  BUY = 'BUY',\r\n  SELL = 'SELL',\r\n}\r\n\r\n/**\r\n * SUBGRAPH RESPONSES\r\n */\r\n\r\nexport interface CollectionMarketDataBaseFields {\r\n  id: string\r\n  name: string\r\n  symbol: string\r\n  active: boolean\r\n  totalTrades: string\r\n  totalVolumeBNB: string\r\n  numberTokensListed: string\r\n  creatorAddress: string\r\n  tradingFee: string\r\n  creatorFee: string\r\n  whitelistChecked: string\r\n}\r\n\r\nexport interface UserActivity {\r\n  askOrderHistory: AskOrder[]\r\n  buyTradeHistory: Transaction[]\r\n  sellTradeHistory: Transaction[]\r\n  initializationState: UserNftInitializationState\r\n}\r\n","import { gql, request } from 'graphql-request'\r\nimport { stringify } from 'qs'\r\nimport { API_NFT, GRAPH_API_NFTMARKET } from 'config/constants/endpoints'\r\nimport { getErc721Contract } from 'utils/contractHelpers'\r\nimport { ethers } from 'ethers'\r\nimport map from 'lodash/map'\r\nimport { uniq } from 'lodash'\r\nimport { pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport {\r\n  ApiCollection,\r\n  ApiCollections,\r\n  ApiResponseCollectionTokens,\r\n  ApiResponseSpecificToken,\r\n  AskOrderType,\r\n  Collection,\r\n  CollectionMarketDataBaseFields,\r\n  NftActivityFilter,\r\n  NftLocation,\r\n  NftToken,\r\n  TokenIdWithCollectionAddress,\r\n  TokenMarketData,\r\n  Transaction,\r\n  AskOrder,\r\n  ApiSingleTokenData,\r\n  NftAttribute,\r\n  ApiTokenFilterResponse,\r\n  ApiCollectionsResponse,\r\n  MarketEvent,\r\n} from './types'\r\nimport { getBaseNftFields, getBaseTransactionFields, getCollectionBaseFields } from './queries'\r\n\r\n/**\r\n * API HELPERS\r\n */\r\n\r\n/**\r\n * Fetch static data from all collections using the API\r\n * @returns\r\n */\r\nexport const getCollectionsApi = async (): Promise<ApiCollectionsResponse> => {\r\n  const res = await fetch(`${API_NFT}/collections`)\r\n  if (res.ok) {\r\n    const json = await res.json()\r\n    return json\r\n  }\r\n  console.error('Failed to fetch NFT collections', res.statusText)\r\n  return null\r\n}\r\n\r\n/**\r\n * Fetch static data from a collection using the API\r\n * @returns\r\n */\r\nexport const getCollectionApi = async (collectionAddress: string): Promise<ApiCollection> => {\r\n  const res = await fetch(`${API_NFT}/collections/${collectionAddress}`)\r\n  if (res.ok) {\r\n    const json = await res.json()\r\n    return json.data\r\n  }\r\n  console.error(`API: Failed to fetch NFT collection ${collectionAddress}`, res.statusText)\r\n  return null\r\n}\r\n\r\n/**\r\n * Fetch static data for all nfts in a collection using the API\r\n * @param collectionAddress\r\n * @param size\r\n * @param page\r\n * @returns\r\n */\r\nexport const getNftsFromCollectionApi = async (\r\n  collectionAddress: string,\r\n  size = 100,\r\n  page = 1,\r\n): Promise<ApiResponseCollectionTokens> => {\r\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n  const requestPath = `${API_NFT}/collections/${collectionAddress}/tokens${\r\n    !isPBCollection ? `?page=${page}&size=${size}` : ``\r\n  }`\r\n\r\n  const res = await fetch(requestPath)\r\n  if (res.ok) {\r\n    const data = await res.json()\r\n    return data\r\n  }\r\n  console.error(`API: Failed to fetch NFT tokens for ${collectionAddress} collection`, res.statusText)\r\n  return null\r\n}\r\n\r\n/**\r\n * Fetch a single NFT using the API\r\n * @param collectionAddress\r\n * @param tokenId\r\n * @returns NFT from API\r\n */\r\nexport const getNftApi = async (\r\n  collectionAddress: string,\r\n  tokenId: string,\r\n): Promise<ApiResponseSpecificToken['data']> => {\r\n  const res = await fetch(`${API_NFT}/collections/${collectionAddress}/tokens/${tokenId}`)\r\n  if (res.ok) {\r\n    const json = await res.json()\r\n    return json.data\r\n  }\r\n\r\n  console.error(`API: Can't fetch NFT token ${tokenId} in ${collectionAddress}`, res.status)\r\n  return null\r\n}\r\n\r\n/**\r\n * Fetch a list of NFT from different collections\r\n * @param from Array of { collectionAddress: string; tokenId: string }\r\n * @returns Array of NFT from API\r\n */\r\nexport const getNftsFromDifferentCollectionsApi = async (\r\n  from: { collectionAddress: string; tokenId: string }[],\r\n): Promise<NftToken[]> => {\r\n  const promises = from.map((nft) => getNftApi(nft.collectionAddress, nft.tokenId))\r\n  const responses = await Promise.all(promises)\r\n  // Sometimes API can't find some tokens (e.g. 404 response)\r\n  // at least return the ones that returned successfully\r\n  return responses\r\n    .filter((resp) => resp)\r\n    .map((res, index) => ({\r\n      tokenId: res.tokenId,\r\n      name: res.name,\r\n      collectionName: res.collection.name,\r\n      collectionAddress: from[index].collectionAddress,\r\n      description: res.description,\r\n      attributes: res.attributes,\r\n      createdAt: res.createdAt,\r\n      updatedAt: res.updatedAt,\r\n      image: res.image,\r\n    }))\r\n}\r\n\r\n/**\r\n * SUBGRAPH HELPERS\r\n */\r\n\r\n/**\r\n * Fetch market data from a collection using the Subgraph\r\n * @returns\r\n */\r\nexport const getCollectionSg = async (collectionAddress: string): Promise<CollectionMarketDataBaseFields> => {\r\n  try {\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getCollectionData($collectionAddress: String!) {\r\n          collection(id: $collectionAddress) {\r\n            ${getCollectionBaseFields()}\r\n          }\r\n        }\r\n      `,\r\n      { collectionAddress: collectionAddress.toLowerCase() },\r\n    )\r\n    return res.collection\r\n  } catch (error) {\r\n    console.error('Failed to fetch collection', error)\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch market data from all collections using the Subgraph\r\n * @returns\r\n */\r\nexport const getCollectionsSg = async (): Promise<CollectionMarketDataBaseFields[]> => {\r\n  try {\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        {\r\n          collections {\r\n            ${getCollectionBaseFields()}\r\n          }\r\n        }\r\n      `,\r\n    )\r\n    return res.collections\r\n  } catch (error) {\r\n    console.error('Failed to fetch NFT collections', error)\r\n    return []\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch market data for nfts in a collection using the Subgraph\r\n * @param collectionAddress\r\n * @param first\r\n * @param skip\r\n * @returns\r\n */\r\nexport const getNftsFromCollectionSg = async (\r\n  collectionAddress: string,\r\n  first = 1000,\r\n  skip = 0,\r\n): Promise<TokenMarketData[]> => {\r\n  // Squad to be sorted by tokenId as this matches the order of the paginated API return. For PBs - get the most recent,\r\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n\r\n  try {\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getNftCollectionMarketData($collectionAddress: String!) {\r\n          collection(id: $collectionAddress) {\r\n            id\r\n            nfts(orderBy:${isPBCollection ? 'updatedAt' : 'tokenId'}, skip: $skip, first: $first) {\r\n             ${getBaseNftFields()}\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { collectionAddress: collectionAddress.toLowerCase(), skip, first },\r\n    )\r\n    return res.collection.nfts\r\n  } catch (error) {\r\n    console.error('Failed to fetch NFTs from collection', error)\r\n    return []\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch market data for PancakeBunnies NFTs by bunny id using the Subgraph\r\n * @param bunnyId - bunny id to query\r\n * @param existingTokenIds - tokens that are already loaded into redux\r\n * @returns\r\n */\r\nexport const getNftsByBunnyIdSg = async (\r\n  bunnyId: string,\r\n  existingTokenIds: string[],\r\n  orderDirection: 'asc' | 'desc',\r\n): Promise<TokenMarketData[]> => {\r\n  try {\r\n    const where =\r\n      existingTokenIds.length > 0\r\n        ? { otherId: bunnyId, isTradable: true, tokenId_not_in: existingTokenIds }\r\n        : { otherId: bunnyId, isTradable: true }\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getNftsByBunnyIdSg($collectionAddress: String!, $where: NFT_filter, $orderDirection: String!) {\r\n          nfts(first: 30, where: $where, orderBy: currentAskPrice, orderDirection: $orderDirection) {\r\n            ${getBaseNftFields()}\r\n          }\r\n        }\r\n      `,\r\n      {\r\n        collectionAddress: pancakeBunniesAddress.toLowerCase(),\r\n        where,\r\n        orderDirection,\r\n      },\r\n    )\r\n    return res.nfts\r\n  } catch (error) {\r\n    console.error(`Failed to fetch collection NFTs for bunny id ${bunnyId}`, error)\r\n    return []\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch market data for PancakeBunnies NFTs by bunny id using the Subgraph\r\n * @param bunnyId - bunny id to query\r\n * @param existingTokenIds - tokens that are already loaded into redux\r\n * @returns\r\n */\r\nexport const getMarketDataForTokenIds = async (\r\n  collectionAddress: string,\r\n  existingTokenIds: string[],\r\n): Promise<TokenMarketData[]> => {\r\n  try {\r\n    if (existingTokenIds.length === 0) {\r\n      return []\r\n    }\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getMarketDataForTokenIds($collectionAddress: String!, $where: NFT_filter) {\r\n          collection(id: $collectionAddress) {\r\n            id\r\n            nfts(first: 1000, where: $where) {\r\n              ${getBaseNftFields()}\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      {\r\n        collectionAddress: collectionAddress.toLowerCase(),\r\n        where: { tokenId_in: existingTokenIds },\r\n      },\r\n    )\r\n    return res.collection.nfts\r\n  } catch (error) {\r\n    console.error(`Failed to fetch market data for NFTs stored tokens`, error)\r\n    return []\r\n  }\r\n}\r\n\r\nexport const getNftsMarketData = async (\r\n  where = {},\r\n  first = 1000,\r\n  orderBy = 'id',\r\n  orderDirection: 'asc' | 'desc' = 'desc',\r\n  skip = 0,\r\n): Promise<TokenMarketData[]> => {\r\n  try {\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getNftsMarketData($first: Int, $skip: Int!, $where: NFT_filter, $orderBy: NFT_orderBy, $orderDirection: OrderDirection) {\r\n          nfts(where: $where, first: $first, orderBy: $orderBy, orderDirection: $orderDirection, skip: $skip) {\r\n            ${getBaseNftFields()}\r\n            transactionHistory {\r\n              ${getBaseTransactionFields()}\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { where, first, skip, orderBy, orderDirection },\r\n    )\r\n\r\n    return res.nfts\r\n  } catch (error) {\r\n    console.error('Failed to fetch NFTs market data', error)\r\n    return []\r\n  }\r\n}\r\n\r\nexport const getAllPancakeBunniesLowestPrice = async (bunnyIds: string[]): Promise<Record<string, number>> => {\r\n  try {\r\n    const singlePancakeBunnySubQueries = bunnyIds.map(\r\n      (\r\n        bunnyId,\r\n      ) => `b${bunnyId}:nfts(first: 1, where: { otherId: ${bunnyId}, isTradable: true }, orderBy: currentAskPrice, orderDirection: asc) {\r\n        currentAskPrice\r\n      }\r\n    `,\r\n    )\r\n    const rawResponse: Record<string, { currentAskPrice: string }[]> = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getAllPancakeBunniesLowestPrice {\r\n          ${singlePancakeBunnySubQueries}\r\n        }\r\n      `,\r\n    )\r\n    return Object.keys(rawResponse).reduce((lowestPricesData, subQueryKey) => {\r\n      const bunnyId = subQueryKey.split('b')[1]\r\n      return {\r\n        ...lowestPricesData,\r\n        [bunnyId]:\r\n          rawResponse[subQueryKey].length > 0 ? parseFloat(rawResponse[subQueryKey][0].currentAskPrice) : Infinity,\r\n      }\r\n    }, {})\r\n  } catch (error) {\r\n    console.error('Failed to fetch PancakeBunnies lowest prices', error)\r\n    return {}\r\n  }\r\n}\r\n\r\nexport const getAllPancakeBunniesRecentUpdatedAt = async (bunnyIds: string[]): Promise<Record<string, number>> => {\r\n  try {\r\n    const singlePancakeBunnySubQueries = bunnyIds.map(\r\n      (\r\n        bunnyId,\r\n      ) => `b${bunnyId}:nfts(first: 1, where: { otherId: ${bunnyId}, isTradable: true }, orderBy: updatedAt, orderDirection: desc) {\r\n        updatedAt\r\n      }\r\n    `,\r\n    )\r\n    const rawResponse: Record<string, { updatedAt: string }[]> = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getAllPancakeBunniesLowestPrice {\r\n          ${singlePancakeBunnySubQueries}\r\n        }\r\n      `,\r\n    )\r\n    return Object.keys(rawResponse).reduce((updatedAtData, subQueryKey) => {\r\n      const bunnyId = subQueryKey.split('b')[1]\r\n      return {\r\n        ...updatedAtData,\r\n        [bunnyId]: rawResponse[subQueryKey].length > 0 ? Number(rawResponse[subQueryKey][0].updatedAt) : -Infinity,\r\n      }\r\n    }, {})\r\n  } catch (error) {\r\n    console.error('Failed to fetch PancakeBunnies latest market updates', error)\r\n    return {}\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the lowest price of any NFT in a collection\r\n */\r\nexport const getLowestPriceInCollection = async (collectionAddress: string) => {\r\n  try {\r\n    const response = await getNftsMarketData(\r\n      { collection: collectionAddress.toLowerCase(), isTradable: true },\r\n      1,\r\n      'currentAskPrice',\r\n      'asc',\r\n    )\r\n\r\n    if (response.length === 0) {\r\n      return 0\r\n    }\r\n\r\n    const [nftSg] = response\r\n    return parseFloat(nftSg.currentAskPrice)\r\n  } catch (error) {\r\n    console.error(`Failed to lowest price NFTs in collection ${collectionAddress}`, error)\r\n    return 0\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch user trading data for buyTradeHistory, sellTradeHistory and askOrderHistory from the Subgraph\r\n * @param where a User_filter where condition\r\n * @returns a UserActivity object\r\n */\r\nexport const getUserActivity = async (\r\n  address: string,\r\n): Promise<{ askOrderHistory: AskOrder[]; buyTradeHistory: Transaction[]; sellTradeHistory: Transaction[] }> => {\r\n  try {\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getUserActivity($address: String!) {\r\n          user(id: $address) {\r\n            buyTradeHistory(first: 250, orderBy: timestamp, orderDirection: desc) {\r\n              ${getBaseTransactionFields()}\r\n              nft {\r\n                ${getBaseNftFields()}\r\n              }\r\n            }\r\n            sellTradeHistory(first: 250, orderBy: timestamp, orderDirection: desc) {\r\n              ${getBaseTransactionFields()}\r\n              nft {\r\n                ${getBaseNftFields()}\r\n              }\r\n            }\r\n            askOrderHistory(first: 500, orderBy: timestamp, orderDirection: desc) {\r\n              id\r\n              block\r\n              timestamp\r\n              orderType\r\n              askPrice\r\n              nft {\r\n                ${getBaseNftFields()}\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { address },\r\n    )\r\n\r\n    return res.user || { askOrderHistory: [], buyTradeHistory: [], sellTradeHistory: [] }\r\n  } catch (error) {\r\n    console.error('Failed to fetch user Activity', error)\r\n    return {\r\n      askOrderHistory: [],\r\n      buyTradeHistory: [],\r\n      sellTradeHistory: [],\r\n    }\r\n  }\r\n}\r\n\r\nexport const getCollectionActivity = async (\r\n  address: string,\r\n  nftActivityFilter: NftActivityFilter,\r\n  itemPerQuery,\r\n): Promise<{ askOrders?: AskOrder[]; transactions?: Transaction[] }> => {\r\n  const getAskOrderEvent = (orderType: MarketEvent): AskOrderType => {\r\n    switch (orderType) {\r\n      case MarketEvent.CANCEL:\r\n        return AskOrderType.CANCEL\r\n      case MarketEvent.MODIFY:\r\n        return AskOrderType.MODIFY\r\n      case MarketEvent.NEW:\r\n        return AskOrderType.NEW\r\n      default:\r\n        return AskOrderType.MODIFY\r\n    }\r\n  }\r\n\r\n  const isFetchAllCollections = address === ''\r\n\r\n  const collectionFilterGql = !isFetchAllCollections ? `collection: ${JSON.stringify(address)}` : ``\r\n\r\n  const askOrderTypeFilter = nftActivityFilter.typeFilters\r\n    .filter((marketEvent) => marketEvent !== MarketEvent.SELL)\r\n    .map((marketEvent) => getAskOrderEvent(marketEvent))\r\n\r\n  const askOrderIncluded = nftActivityFilter.typeFilters.length === 0 || askOrderTypeFilter.length > 0\r\n\r\n  const askOrderTypeFilterGql =\r\n    askOrderTypeFilter.length > 0 ? `orderType_in: ${JSON.stringify(askOrderTypeFilter)}` : ``\r\n\r\n  const transactionIncluded =\r\n    nftActivityFilter.typeFilters.length === 0 ||\r\n    nftActivityFilter.typeFilters.some(\r\n      (marketEvent) => marketEvent === MarketEvent.BUY || marketEvent === MarketEvent.SELL,\r\n    )\r\n\r\n  let askOrderQueryItem = itemPerQuery / 2\r\n  let transactionQueryItem = itemPerQuery / 2\r\n\r\n  if (!askOrderIncluded || !transactionIncluded) {\r\n    askOrderQueryItem = !askOrderIncluded ? 0 : itemPerQuery\r\n    transactionQueryItem = !transactionIncluded ? 0 : itemPerQuery\r\n  }\r\n\r\n  const askOrderGql = askOrderIncluded\r\n    ? `askOrders(first: ${askOrderQueryItem}, orderBy: timestamp, orderDirection: desc, where:{\r\n            ${collectionFilterGql}, ${askOrderTypeFilterGql}\r\n          }) {\r\n              id\r\n              block\r\n              timestamp\r\n              orderType\r\n              askPrice\r\n              seller {\r\n                id\r\n              }\r\n              nft {\r\n                ${getBaseNftFields()}\r\n              }\r\n          }`\r\n    : ``\r\n\r\n  const transactionGql = transactionIncluded\r\n    ? `transactions(first: ${transactionQueryItem}, orderBy: timestamp, orderDirection: desc, where:{\r\n            ${collectionFilterGql}\r\n          }) {\r\n            ${getBaseTransactionFields()}\r\n              nft {\r\n                ${getBaseNftFields()}\r\n              }\r\n          }`\r\n    : ``\r\n\r\n  try {\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getCollectionActivity {\r\n          ${askOrderGql}\r\n          ${transactionGql}\r\n        }\r\n      `,\r\n    )\r\n\r\n    return res || { askOrders: [], transactions: [] }\r\n  } catch (error) {\r\n    console.error('Failed to fetch collection Activity', error)\r\n    return {\r\n      askOrders: [],\r\n      transactions: [],\r\n    }\r\n  }\r\n}\r\n\r\nexport const getTokenActivity = async (\r\n  tokenId: string,\r\n  collectionAddress: string,\r\n): Promise<{ askOrders: AskOrder[]; transactions: Transaction[] }> => {\r\n  try {\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getCollectionActivity($tokenId: BigInt!, $address: ID!) {\r\n          nfts(where:{tokenId: $tokenId, collection: $address}) {\r\n            transactionHistory(orderBy: timestamp, orderDirection: desc) {\r\n              ${getBaseTransactionFields()}\r\n                nft {\r\n                  ${getBaseNftFields()}\r\n                }\r\n            }\r\n            askHistory(orderBy: timestamp, orderDirection: desc) {\r\n                id\r\n                block\r\n                timestamp\r\n                orderType\r\n                askPrice\r\n                seller {\r\n                  id\r\n                }\r\n                nft {\r\n                  ${getBaseNftFields()}\r\n                }\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { tokenId, address: collectionAddress },\r\n    )\r\n\r\n    if (res.nfts.length > 0) {\r\n      return { askOrders: res.nfts[0].askHistory, transactions: res.nfts[0].transactionHistory }\r\n    }\r\n    return { askOrders: [], transactions: [] }\r\n  } catch (error) {\r\n    console.error('Failed to fetch token Activity', error)\r\n    return {\r\n      askOrders: [],\r\n      transactions: [],\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get the most recently listed NFTs\r\n * @param first Number of nfts to retrieve\r\n * @returns NftTokenSg[]\r\n */\r\nexport const getLatestListedNfts = async (first: number): Promise<TokenMarketData[]> => {\r\n  try {\r\n    const res = await request(\r\n      GRAPH_API_NFTMARKET,\r\n      gql`\r\n        query getLatestNftMarketData($first: Int) {\r\n          nfts(where: { isTradable: true }, orderBy: updatedAt , orderDirection: desc, first: $first) {\r\n            ${getBaseNftFields()}\r\n            collection {\r\n              id\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { first },\r\n    )\r\n\r\n    return res.nfts\r\n  } catch (error) {\r\n    console.error('Failed to fetch NFTs market data', error)\r\n    return []\r\n  }\r\n}\r\n\r\n/**\r\n * Filter NFTs from a collection\r\n * @param collectionAddress\r\n * @returns\r\n */\r\nexport const fetchNftsFiltered = async (\r\n  collectionAddress: string,\r\n  filters: Record<string, string | number>,\r\n): Promise<ApiTokenFilterResponse> => {\r\n  const res = await fetch(`${API_NFT}/collections/${collectionAddress}/filter?${stringify(filters)}`)\r\n\r\n  if (res.ok) {\r\n    const data = await res.json()\r\n    return data\r\n  }\r\n\r\n  console.error(`API: Failed to fetch NFT collection ${collectionAddress}`, res.statusText)\r\n  return null\r\n}\r\n\r\n/**\r\n * OTHER HELPERS\r\n */\r\n\r\nexport const getMetadataWithFallback = (apiMetadata: ApiResponseCollectionTokens['data'], bunnyId: string) => {\r\n  // The fallback is just for the testnet where some bunnies don't exist\r\n  return (\r\n    apiMetadata[bunnyId] ?? {\r\n      name: '',\r\n      description: '',\r\n      collection: { name: 'Pancake Bunnies' },\r\n      image: {\r\n        original: '',\r\n        thumbnail: '',\r\n      },\r\n    }\r\n  )\r\n}\r\n\r\nexport const getPancakeBunniesAttributesField = (bunnyId: string) => {\r\n  // Generating attributes field that is not returned by API\r\n  // but can be \"faked\" since objects are keyed with bunny id\r\n  return [\r\n    {\r\n      traitType: 'bunnyId',\r\n      value: bunnyId,\r\n      displayType: null,\r\n    },\r\n  ]\r\n}\r\n\r\nexport const combineApiAndSgResponseToNftToken = (\r\n  apiMetadata: ApiSingleTokenData,\r\n  marketData: TokenMarketData,\r\n  attributes: NftAttribute[],\r\n) => {\r\n  return {\r\n    tokenId: marketData.tokenId,\r\n    name: apiMetadata.name,\r\n    description: apiMetadata.description,\r\n    collectionName: apiMetadata.collection.name,\r\n    collectionAddress: pancakeBunniesAddress,\r\n    image: apiMetadata.image,\r\n    marketData,\r\n    attributes,\r\n  }\r\n}\r\n\r\nexport const fetchWalletTokenIdsForCollections = async (\r\n  account: string,\r\n  collections: ApiCollections,\r\n): Promise<TokenIdWithCollectionAddress[]> => {\r\n  const walletNftPromises = map(collections, async (collection): Promise<TokenIdWithCollectionAddress[]> => {\r\n    const { address: collectionAddress } = collection\r\n    const contract = getErc721Contract(collectionAddress)\r\n    let balanceOfResponse\r\n\r\n    try {\r\n      balanceOfResponse = await contract.balanceOf(account)\r\n    } catch (e) {\r\n      console.error(e)\r\n      return []\r\n    }\r\n\r\n    const balanceOf = balanceOfResponse.toNumber()\r\n\r\n    // User has no NFTs for this collection\r\n    if (balanceOfResponse.eq(0)) {\r\n      return []\r\n    }\r\n\r\n    const getTokenId = async (index: number) => {\r\n      try {\r\n        const tokenIdBn: ethers.BigNumber = await contract.tokenOfOwnerByIndex(account, index)\r\n        const tokenId = tokenIdBn.toString()\r\n        return tokenId\r\n      } catch (error) {\r\n        console.error('getTokenIdAndData', error)\r\n        return null\r\n      }\r\n    }\r\n\r\n    const tokenIdPromises = []\r\n\r\n    // For each index get the tokenId\r\n    for (let i = 0; i < balanceOf; i++) {\r\n      tokenIdPromises.push(getTokenId(i))\r\n    }\r\n\r\n    const tokenIds = await Promise.all(tokenIdPromises)\r\n    const nftLocation = NftLocation.WALLET\r\n    const tokensWithCollectionAddress = tokenIds.map((tokenId) => {\r\n      return { tokenId, collectionAddress, nftLocation }\r\n    })\r\n\r\n    return tokensWithCollectionAddress\r\n  })\r\n\r\n  const walletNfts = await Promise.all(walletNftPromises)\r\n  return walletNfts.flat()\r\n}\r\n\r\n/**\r\n * Helper to combine data from the collections' API and subgraph\r\n */\r\nexport const combineCollectionData = (\r\n  collectionApiData: ApiCollection[],\r\n  collectionSgData: CollectionMarketDataBaseFields[],\r\n): Record<string, Collection> => {\r\n  const collectionsMarketObj: Record<string, CollectionMarketDataBaseFields> = collectionSgData.reduce(\r\n    (prev, current) => ({ ...prev, [current.id]: { ...current } }),\r\n    {},\r\n  )\r\n\r\n  return collectionApiData.reduce((accum, current) => {\r\n    const collectionMarket = collectionsMarketObj[current.address.toLowerCase()]\r\n    const collection: Collection = {\r\n      ...current,\r\n      ...collectionMarket,\r\n    }\r\n\r\n    if (current.name) {\r\n      collection.name = current.name\r\n    }\r\n\r\n    return {\r\n      ...accum,\r\n      [current.address]: collection,\r\n    }\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Evaluate whether a market NFT is in a users wallet, their profile picture, or on sale\r\n * @param tokenId string\r\n * @param tokenIdsInWallet array of tokenIds in wallet\r\n * @param tokenIdsForSale array of tokenIds on sale\r\n * @param profileNftId Optional tokenId of users' profile picture\r\n * @returns NftLocation enum value\r\n */\r\nexport const getNftLocationForMarketNft = (\r\n  tokenId: string,\r\n  tokenIdsInWallet: string[],\r\n  tokenIdsForSale: string[],\r\n  profileNftId?: string,\r\n): NftLocation => {\r\n  if (tokenId === profileNftId) {\r\n    return NftLocation.PROFILE\r\n  }\r\n  if (tokenIdsForSale.includes(tokenId)) {\r\n    return NftLocation.FORSALE\r\n  }\r\n  if (tokenIdsInWallet.includes(tokenId)) {\r\n    return NftLocation.WALLET\r\n  }\r\n  console.error(`Cannot determine location for tokenID ${tokenId}, defaulting to NftLocation.WALLET`)\r\n  return NftLocation.WALLET\r\n}\r\n\r\n/**\r\n * Construct complete TokenMarketData entities with a users' wallet NFT ids and market data for their wallet NFTs\r\n * @param walletNfts TokenIdWithCollectionAddress\r\n * @param marketDataForWalletNfts TokenMarketData[]\r\n * @returns TokenMarketData[]\r\n */\r\nexport const attachMarketDataToWalletNfts = (\r\n  walletNfts: TokenIdWithCollectionAddress[],\r\n  marketDataForWalletNfts: TokenMarketData[],\r\n): TokenMarketData[] => {\r\n  const walletNftsWithMarketData = walletNfts.map((walletNft) => {\r\n    const marketData = marketDataForWalletNfts.find(\r\n      (marketNft) =>\r\n        marketNft.tokenId === walletNft.tokenId &&\r\n        marketNft.collection.id.toLowerCase() === walletNft.collectionAddress.toLowerCase(),\r\n    )\r\n    return (\r\n      marketData ?? {\r\n        tokenId: walletNft.tokenId,\r\n        collection: {\r\n          id: walletNft.collectionAddress.toLowerCase(),\r\n        },\r\n        nftLocation: walletNft.nftLocation,\r\n        metadataUrl: null,\r\n        transactionHistory: null,\r\n        currentSeller: null,\r\n        isTradable: null,\r\n        currentAskPrice: null,\r\n        latestTradedPriceInBNB: null,\r\n        tradeVolumeBNB: null,\r\n        totalTrades: null,\r\n        otherId: null,\r\n      }\r\n    )\r\n  })\r\n  return walletNftsWithMarketData\r\n}\r\n\r\n/**\r\n * Attach TokenMarketData and location to NftToken\r\n * @param nftsWithMetadata NftToken[] with API metadata\r\n * @param nftsForSale  market data for nfts that are on sale (i.e. not in a user's wallet)\r\n * @param walletNfts market data for nfts in a user's wallet\r\n * @param tokenIdsInWallet array of token ids in user's wallet\r\n * @param tokenIdsForSale array of token ids of nfts that are on sale\r\n * @param profileNftId profile picture token id\r\n * @returns NFT[]\r\n */\r\nexport const combineNftMarketAndMetadata = (\r\n  nftsWithMetadata: NftToken[],\r\n  nftsForSale: TokenMarketData[],\r\n  walletNfts: TokenMarketData[],\r\n  tokenIdsInWallet: string[],\r\n  tokenIdsForSale: string[],\r\n  profileNftId?: string,\r\n): NftToken[] => {\r\n  const completeNftData = nftsWithMetadata.map<NftToken>((nft) => {\r\n    // Get metadata object\r\n    const isOnSale = nftsForSale.filter((forSaleNft) => forSaleNft.tokenId === nft.tokenId).length > 0\r\n    let marketData\r\n    if (isOnSale) {\r\n      marketData = nftsForSale.find((marketNft) => marketNft.tokenId === nft.tokenId)\r\n    } else {\r\n      marketData = walletNfts.find((marketNft) => marketNft.tokenId === nft.tokenId)\r\n    }\r\n    const location = getNftLocationForMarketNft(nft.tokenId, tokenIdsInWallet, tokenIdsForSale, profileNftId)\r\n    return { ...nft, marketData, location }\r\n  })\r\n  return completeNftData\r\n}\r\n\r\n/**\r\n * Get in-wallet, on-sale & profile pic NFT metadata, complete with market data for a given account\r\n * @param account\r\n * @param collections\r\n * @param profileNftWithCollectionAddress\r\n * @returns Promise<NftToken[]>\r\n */\r\nexport const getCompleteAccountNftData = async (\r\n  account: string,\r\n  collections: ApiCollections,\r\n  profileNftWithCollectionAddress?: TokenIdWithCollectionAddress,\r\n): Promise<NftToken[]> => {\r\n  const walletNftIdsWithCollectionAddress = await fetchWalletTokenIdsForCollections(account, collections)\r\n  if (profileNftWithCollectionAddress?.tokenId) {\r\n    walletNftIdsWithCollectionAddress.unshift(profileNftWithCollectionAddress)\r\n  }\r\n\r\n  const uniqueCollectionAddresses = uniq(\r\n    walletNftIdsWithCollectionAddress.map((walletNftId) => walletNftId.collectionAddress),\r\n  )\r\n\r\n  const walletNftsByCollection = uniqueCollectionAddresses.map((collectionAddress) => {\r\n    return {\r\n      collectionAddress,\r\n      idWithCollectionAddress: walletNftIdsWithCollectionAddress.filter(\r\n        (walletNft) => walletNft.collectionAddress === collectionAddress,\r\n      ),\r\n    }\r\n  })\r\n\r\n  const walletMarketDataRequests = walletNftsByCollection.map((walletNftByCollection) => {\r\n    const tokenIdIn = walletNftByCollection.idWithCollectionAddress.map((walletNft) => walletNft.tokenId)\r\n    return getNftsMarketData({\r\n      tokenId_in: tokenIdIn,\r\n      collection: walletNftByCollection.collectionAddress.toLowerCase(),\r\n    })\r\n  })\r\n\r\n  const walletMarketDataResponses = await Promise.all(walletMarketDataRequests)\r\n  const walletMarketData = walletMarketDataResponses.flat()\r\n\r\n  const walletNftsWithMarketData = attachMarketDataToWalletNfts(walletNftIdsWithCollectionAddress, walletMarketData)\r\n\r\n  const walletTokenIds = walletNftIdsWithCollectionAddress\r\n    .filter((walletNft) => {\r\n      // Profile Pic NFT is no longer wanted in this array, hence the filter\r\n      return profileNftWithCollectionAddress?.tokenId !== walletNft.tokenId\r\n    })\r\n    .map((nft) => nft.tokenId)\r\n\r\n  const marketDataForSaleNfts = await getNftsMarketData({ currentSeller: account.toLowerCase() })\r\n  const tokenIdsForSale = marketDataForSaleNfts.map((nft) => nft.tokenId)\r\n\r\n  const forSaleNftIds = marketDataForSaleNfts.map((nft) => {\r\n    return { collectionAddress: nft.collection.id, tokenId: nft.tokenId }\r\n  })\r\n\r\n  const metadataForAllNfts = await getNftsFromDifferentCollectionsApi([\r\n    ...forSaleNftIds,\r\n    ...walletNftIdsWithCollectionAddress,\r\n  ])\r\n\r\n  const completeNftData = combineNftMarketAndMetadata(\r\n    metadataForAllNfts,\r\n    marketDataForSaleNfts,\r\n    walletNftsWithMarketData,\r\n    walletTokenIds,\r\n    tokenIdsForSale,\r\n    profileNftWithCollectionAddress?.tokenId,\r\n  )\r\n\r\n  return completeNftData\r\n}\r\n\r\n/**\r\n * Fetch distribution information for a collection\r\n * @returns\r\n */\r\nexport const getCollectionDistributionApi = async <T>(collectionAddress: string): Promise<T> => {\r\n  const res = await fetch(`${API_NFT}/collections/${collectionAddress}/distribution`)\r\n  if (res.ok) {\r\n    const data = await res.json()\r\n    return data\r\n  }\r\n  console.error(`API: Failed to fetch NFT collection ${collectionAddress} distribution`, res.statusText)\r\n  return null\r\n}\r\n","export const getBaseNftFields = () => `\r\n  tokenId\r\n  metadataUrl\r\n  currentAskPrice\r\n  currentSeller\r\n  latestTradedPriceInBNB\r\n  tradeVolumeBNB\r\n  totalTrades\r\n  isTradable\r\n  updatedAt\r\n  otherId\r\n  collection {\r\n    id\r\n  }\r\n`\r\n\r\nexport const getBaseTransactionFields = () => `\r\n  id\r\n  block\r\n  timestamp\r\n  askPrice\r\n  netPrice\r\n  withBNB\r\n  buyer {\r\n    id\r\n  }\r\n  seller {\r\n    id\r\n  }\r\n`\r\n\r\nexport const getCollectionBaseFields = () => `\r\n  id\r\n  name\r\n  symbol\r\n  active\r\n  totalTrades\r\n  totalVolumeBNB\r\n  numberTokensListed\r\n  creatorAddress\r\n  tradingFee\r\n  creatorFee\r\n  whitelistChecker\r\n`\r\n","import { createAction } from '@reduxjs/toolkit'\r\nimport { DerivedPairDataNormalized, PairDataNormalized, PairDataTimeWindowEnum } from './types'\r\n\r\nexport enum Field {\r\n  INPUT = 'INPUT',\r\n  OUTPUT = 'OUTPUT',\r\n}\r\n\r\nexport const selectCurrency = createAction<{ field: Field; currencyId: string }>('swap/selectCurrency')\r\nexport const switchCurrencies = createAction<void>('swap/switchCurrencies')\r\nexport const typeInput = createAction<{ field: Field; typedValue: string }>('swap/typeInput')\r\nexport const replaceSwapState = createAction<{\r\n  field: Field\r\n  typedValue: string\r\n  inputCurrencyId?: string\r\n  outputCurrencyId?: string\r\n  recipient: string | null\r\n}>('swap/replaceSwapState')\r\nexport const setRecipient = createAction<{ recipient: string | null }>('swap/setRecipient')\r\nexport const updatePairData =\r\n  createAction<{ pairData: PairDataNormalized; pairId: string; timeWindow: PairDataTimeWindowEnum }>(\r\n    'swap/updatePairData',\r\n  )\r\nexport const updateDerivedPairData =\r\n  createAction<{ pairData: DerivedPairDataNormalized; pairId: string; timeWindow: PairDataTimeWindowEnum }>(\r\n    'swap/updateDerivedPairData',\r\n  )\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { Provider } from '@ethersproject/abstract-provider'\r\nimport { namehash } from 'ethers/lib/utils'\r\n\r\nconst REGISTRAR_ABI = [\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: 'node',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'resolver',\r\n    outputs: [\r\n      {\r\n        name: 'resolverAddress',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n]\r\nconst REGISTRAR_ADDRESS = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\r\n\r\nconst RESOLVER_ABI = [\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'node',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'contenthash',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: '',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n]\r\n\r\n// cache the resolver contracts since most of them are the public resolver\r\nfunction resolverContract(resolverAddress: string, provider: Provider): Contract {\r\n  return new Contract(resolverAddress, RESOLVER_ABI, provider)\r\n}\r\n\r\n/**\r\n * Fetches and decodes the result of an ENS contenthash lookup on mainnet to a URI\r\n * @param ensName to resolve\r\n * @param provider provider to use to fetch the data\r\n */\r\nexport default async function resolveENSContentHash(ensName: string, provider: Provider): Promise<string> {\r\n  const ensRegistrarContract = new Contract(REGISTRAR_ADDRESS, REGISTRAR_ABI, provider)\r\n  const hash = namehash(ensName)\r\n  const resolverAddress = await ensRegistrarContract.resolver(hash)\r\n  return resolverContract(resolverAddress, provider).contenthash(hash)\r\n}\r\n","import { nanoid } from '@reduxjs/toolkit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport { TokenList } from '@uniswap/token-lists'\r\nimport { useCallback } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { AppDispatch } from '../state'\r\nimport { fetchTokenList } from '../state/lists/actions'\r\nimport resolveENSContentHash from '../utils/ENS/resolveENSContentHash'\r\nimport useWeb3Provider from './useActiveWeb3React'\r\n\r\nfunction useFetchListCallback(): (listUrl: string, sendDispatch?: boolean) => Promise<TokenList> {\r\n  const { library } = useWeb3Provider()\r\n  const { chainId } = useActiveWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const ensResolver = useCallback(\r\n    (ensName: string) => {\r\n      if (chainId !== ChainId.MAINNET) {\r\n        throw new Error('Could not construct mainnet ENS resolver')\r\n      }\r\n      return resolveENSContentHash(ensName, library)\r\n    },\r\n    [chainId, library],\r\n  )\r\n\r\n  // note: prevent dispatch if using for list search or unsupported list\r\n  return useCallback(\r\n    async (listUrl: string, sendDispatch = true) => {\r\n      const requestId = nanoid()\r\n      if (sendDispatch) {\r\n        dispatch(fetchTokenList.pending({ requestId, url: listUrl }))\r\n      }\r\n      // lazy load avj and token list schema\r\n      const getTokenList = (await import('../utils/getTokenList')).default\r\n      return getTokenList(listUrl, ensResolver)\r\n        .then((tokenList) => {\r\n          if (sendDispatch) {\r\n            dispatch(fetchTokenList.fulfilled({ url: listUrl, tokenList, requestId }))\r\n          }\r\n          return tokenList\r\n        })\r\n        .catch((error) => {\r\n          console.error(`Failed to get list at url ${listUrl}`, error)\r\n          if (sendDispatch) {\r\n            dispatch(fetchTokenList.rejected({ url: listUrl, requestId, errorMessage: error.message }))\r\n          }\r\n          throw error\r\n        })\r\n    },\r\n    [dispatch, ensResolver],\r\n  )\r\n}\r\n\r\nexport default useFetchListCallback\r\n","import { useAllLists } from 'state/lists/hooks'\r\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\r\nimport { useCallback, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useAllInactiveTokens } from 'hooks/Tokens'\r\nimport { UNSUPPORTED_LIST_URLS } from 'config/constants/lists'\r\nimport useWeb3Provider from 'hooks/useActiveWeb3React'\r\nimport useFetchListCallback from 'hooks/useFetchListCallback'\r\nimport useInterval from 'hooks/useInterval'\r\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\r\nimport { AppDispatch } from '../index'\r\nimport { acceptListUpdate } from './actions'\r\nimport { useActiveListUrls } from './hooks'\r\n\r\nexport default function Updater(): null {\r\n  const { library } = useWeb3Provider()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const isWindowVisible = useIsWindowVisible()\r\n\r\n  // get all loaded lists, and the active urls\r\n  const lists = useAllLists()\r\n  const activeListUrls = useActiveListUrls()\r\n\r\n  // initiate loading\r\n  useAllInactiveTokens()\r\n\r\n  const fetchList = useFetchListCallback()\r\n  const fetchAllListsCallback = useCallback(() => {\r\n    if (!isWindowVisible) return\r\n    Object.keys(lists).forEach((url) =>\r\n      fetchList(url).catch((error) => console.debug('interval list fetching error', error)),\r\n    )\r\n  }, [fetchList, isWindowVisible, lists])\r\n\r\n  // fetch all lists every 10 minutes, but only after we initialize library\r\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null)\r\n\r\n  // whenever a list is not loaded and not loading, try again to load it\r\n  useEffect(() => {\r\n    Object.keys(lists).forEach((listUrl) => {\r\n      const list = lists[listUrl]\r\n      if (!list.current && !list.loadingRequestId && !list.error) {\r\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\r\n      }\r\n    })\r\n  }, [dispatch, fetchList, library, lists])\r\n\r\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\r\n  useEffect(() => {\r\n    Object.keys(UNSUPPORTED_LIST_URLS).forEach((listUrl) => {\r\n      const list = lists[listUrl]\r\n      if (!list || (!list.current && !list.loadingRequestId && !list.error)) {\r\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\r\n      }\r\n    })\r\n  }, [dispatch, fetchList, library, lists])\r\n\r\n  // automatically update lists if versions are minor/patch\r\n  useEffect(() => {\r\n    Object.keys(lists).forEach((listUrl) => {\r\n      const list = lists[listUrl]\r\n      if (list.current && list.pendingUpdate) {\r\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\r\n        // eslint-disable-next-line default-case\r\n        switch (bump) {\r\n          case VersionUpgrade.NONE:\r\n            throw new Error('unexpected no version bump')\r\n          // update any active or inactive lists\r\n          case VersionUpgrade.PATCH:\r\n          case VersionUpgrade.MINOR:\r\n          case VersionUpgrade.MAJOR:\r\n            dispatch(acceptListUpdate(listUrl))\r\n        }\r\n      }\r\n    })\r\n  }, [dispatch, lists, activeListUrls])\r\n\r\n  return null\r\n}\r\n","/* eslint-disable */\r\n\r\nfunction wait(ms: number): Promise<void> {\r\n  return new Promise((resolve) => setTimeout(resolve, ms))\r\n}\r\n\r\nfunction waitRandom(min: number, max: number): Promise<void> {\r\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)))\r\n}\r\n\r\n/**\r\n * This error is thrown if the function is cancelled before completing\r\n */\r\nexport class CancelledError extends Error {\r\n  constructor() {\r\n    super('Cancelled')\r\n  }\r\n}\r\n\r\n/**\r\n * Throw this error if the function should retry\r\n */\r\nexport class RetryableError extends Error {}\r\n\r\n/**\r\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\r\n * @param fn function to retry\r\n * @param n how many times to retry\r\n * @param minWait min wait between retries in ms\r\n * @param maxWait max wait between retries in ms\r\n */\r\nexport function retry<T>(\r\n  fn: () => Promise<T>,\r\n  { n, minWait, maxWait }: { n: number; minWait: number; maxWait: number },\r\n): { promise: Promise<T>; cancel: () => void } {\r\n  let completed = false\r\n  let rejectCancelled: (error: Error) => void\r\n  const promise = new Promise<T>(async (resolve, reject) => {\r\n    rejectCancelled = reject\r\n    while (true) {\r\n      let result: T\r\n      try {\r\n        result = await fn()\r\n        if (!completed) {\r\n          resolve(result)\r\n          completed = true\r\n        }\r\n        break\r\n      } catch (error) {\r\n        console.error(error)\r\n        if (completed) {\r\n          break\r\n        }\r\n        if (n <= 0 || !(error instanceof RetryableError)) {\r\n          reject(error)\r\n          completed = true\r\n          break\r\n        }\r\n        n--\r\n      }\r\n      await waitRandom(minWait, maxWait)\r\n    }\r\n  })\r\n  return {\r\n    promise,\r\n    cancel: () => {\r\n      if (completed) return\r\n      completed = true\r\n      rejectCancelled(new CancelledError())\r\n    },\r\n  }\r\n}\r\n\r\n/* eslint-enable */\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { useEffect, useMemo, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { useMulticallContract } from '../../hooks/useContract'\r\nimport useDebounce from '../../hooks/useDebounce'\r\nimport { CancelledError, retry, RetryableError } from './retry'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport {\r\n  Call,\r\n  errorFetchingMulticallResults,\r\n  fetchingMulticallResults,\r\n  parseCallKey,\r\n  updateMulticallResults,\r\n} from './actions'\r\nimport chunkArray from './chunkArray'\r\n\r\n// chunk calls so we do not exceed the gas limit\r\nconst CALL_CHUNK_SIZE = 500\r\n\r\n/**\r\n * Fetches a chunk of calls, enforcing a minimum block number constraint\r\n * @param multicallContract multicall contract to fetch against\r\n * @param chunk chunk of calls to make\r\n * @param minBlockNumber minimum block number of the result set\r\n */\r\nasync function fetchChunk(\r\n  multicallContract: Contract,\r\n  chunk: Call[],\r\n  minBlockNumber: number,\r\n): Promise<{ results: string[]; blockNumber: number }> {\r\n  console.debug('Fetching chunk', multicallContract, chunk, minBlockNumber)\r\n  let resultsBlockNumber\r\n  let returnData\r\n  try {\r\n    // prettier-ignore\r\n    [resultsBlockNumber, returnData] = await multicallContract.aggregate(\r\n      chunk.map((obj) => [obj.address, obj.callData]),\r\n      {\r\n        blockTag: minBlockNumber,\r\n      }\r\n    )\r\n  } catch (err) {\r\n    const error = err as any\r\n    if (\r\n      error.code === -32000 ||\r\n      (error?.data?.message && error?.data?.message?.indexOf('header not found') !== -1) ||\r\n      error.message?.indexOf('header not found') !== -1\r\n    ) {\r\n      throw new RetryableError(`header not found for block number ${minBlockNumber}`)\r\n    } else if (error.code === -32603 || error.message?.indexOf('execution ran out of gas') !== -1) {\r\n      if (chunk.length > 1) {\r\n        if (process.env.NODE_ENV === 'development') {\r\n          console.debug('Splitting a chunk in 2', chunk)\r\n        }\r\n        const half = Math.floor(chunk.length / 2)\r\n        const [c0, c1] = await Promise.all([\r\n          fetchChunk(multicallContract, chunk.slice(0, half), minBlockNumber),\r\n          fetchChunk(multicallContract, chunk.slice(half, chunk.length), minBlockNumber),\r\n        ])\r\n        return {\r\n          results: c0.results.concat(c1.results),\r\n          blockNumber: c1.blockNumber,\r\n        }\r\n      }\r\n    }\r\n    console.debug('Failed to fetch chunk inside retry', error)\r\n    throw error\r\n  }\r\n  if (resultsBlockNumber.toNumber() < minBlockNumber) {\r\n    console.debug(`Fetched results for old block number: ${resultsBlockNumber.toString()} vs. ${minBlockNumber}`)\r\n  }\r\n  return { results: returnData, blockNumber: resultsBlockNumber.toNumber() }\r\n}\r\n\r\n/**\r\n * From the current all listeners state, return each call key mapped to the\r\n * minimum number of blocks per fetch. This is how often each key must be fetched.\r\n * @param allListeners the all listeners state\r\n * @param chainId the current chain id\r\n */\r\nexport function activeListeningKeys(\r\n  allListeners: AppState['multicall']['callListeners'],\r\n  chainId?: number,\r\n): { [callKey: string]: number } {\r\n  if (!allListeners || !chainId) return {}\r\n  const listeners = allListeners[chainId]\r\n  if (!listeners) return {}\r\n\r\n  return Object.keys(listeners).reduce<{ [callKey: string]: number }>((memo, callKey) => {\r\n    const keyListeners = listeners[callKey]\r\n\r\n    memo[callKey] = Object.keys(keyListeners)\r\n      .filter((key) => {\r\n        const blocksPerFetch = parseInt(key)\r\n        if (blocksPerFetch <= 0) return false\r\n        return keyListeners[blocksPerFetch] > 0\r\n      })\r\n      .reduce((previousMin, current) => {\r\n        return Math.min(previousMin, parseInt(current))\r\n      }, Infinity)\r\n    return memo\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Return the keys that need to be refetched\r\n * @param callResults current call result state\r\n * @param listeningKeys each call key mapped to how old the data can be in blocks\r\n * @param chainId the current chain id\r\n * @param currentBlock the latest block number\r\n */\r\nexport function outdatedListeningKeys(\r\n  callResults: AppState['multicall']['callResults'],\r\n  listeningKeys: { [callKey: string]: number },\r\n  chainId: number | undefined,\r\n  currentBlock: number | undefined,\r\n): string[] {\r\n  if (!chainId || !currentBlock) return []\r\n  const results = callResults[chainId]\r\n  // no results at all, load everything\r\n  if (!results) return Object.keys(listeningKeys)\r\n\r\n  return Object.keys(listeningKeys).filter((callKey) => {\r\n    const blocksPerFetch = listeningKeys[callKey]\r\n\r\n    const data = callResults[chainId][callKey]\r\n    // no data, must fetch\r\n    if (!data) return true\r\n\r\n    const minDataBlockNumber = currentBlock - (blocksPerFetch - 1)\r\n\r\n    // already fetching it for a recent enough block, don't refetch it\r\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false\r\n\r\n    // if data is older than minDataBlockNumber, fetch it\r\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber\r\n  })\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const state = useSelector<AppState, AppState['multicall']>((s) => s.multicall)\r\n  // wait for listeners to settle before triggering updates\r\n  const debouncedListeners = useDebounce(state.callListeners, 100)\r\n  const { currentBlock } = useBlock()\r\n  const { chainId } = useActiveWeb3React()\r\n  const multicallContract = useMulticallContract()\r\n  const cancellations = useRef<{ blockNumber: number; cancellations: (() => void)[] }>()\r\n\r\n  const listeningKeys: { [callKey: string]: number } = useMemo(() => {\r\n    return activeListeningKeys(debouncedListeners, chainId)\r\n  }, [debouncedListeners, chainId])\r\n\r\n  const unserializedOutdatedCallKeys = useMemo(() => {\r\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, currentBlock)\r\n  }, [chainId, state.callResults, listeningKeys, currentBlock])\r\n\r\n  const serializedOutdatedCallKeys = useMemo(\r\n    () => JSON.stringify(unserializedOutdatedCallKeys.sort()),\r\n    [unserializedOutdatedCallKeys],\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!currentBlock || !chainId || !multicallContract) return\r\n\r\n    const outdatedCallKeys: string[] = JSON.parse(serializedOutdatedCallKeys)\r\n    if (outdatedCallKeys.length === 0) return\r\n    const calls = outdatedCallKeys.map((key) => parseCallKey(key))\r\n\r\n    const chunkedCalls = chunkArray(calls, CALL_CHUNK_SIZE)\r\n\r\n    if (cancellations.current?.blockNumber !== currentBlock) {\r\n      cancellations.current?.cancellations?.forEach((c) => c())\r\n    }\r\n\r\n    dispatch(\r\n      fetchingMulticallResults({\r\n        calls,\r\n        chainId,\r\n        fetchingBlockNumber: currentBlock,\r\n      }),\r\n    )\r\n\r\n    cancellations.current = {\r\n      blockNumber: currentBlock,\r\n      cancellations: chunkedCalls.map((chunk, index) => {\r\n        const { cancel, promise } = retry(() => fetchChunk(multicallContract, chunk, currentBlock), {\r\n          n: Infinity,\r\n          minWait: 2500,\r\n          maxWait: 3500,\r\n        })\r\n        promise\r\n          .then(({ results: returnData, blockNumber: fetchBlockNumber }) => {\r\n            cancellations.current = { cancellations: [], blockNumber: currentBlock }\r\n\r\n            // accumulates the length of all previous indices\r\n            const firstCallKeyIndex = chunkedCalls.slice(0, index).reduce<number>((memo, curr) => memo + curr.length, 0)\r\n            const lastCallKeyIndex = firstCallKeyIndex + returnData.length\r\n\r\n            dispatch(\r\n              updateMulticallResults({\r\n                chainId,\r\n                results: outdatedCallKeys\r\n                  .slice(firstCallKeyIndex, lastCallKeyIndex)\r\n                  .reduce<{ [callKey: string]: string | null }>((memo, callKey, i) => {\r\n                    memo[callKey] = returnData[i] ?? null\r\n                    return memo\r\n                  }, {}),\r\n                blockNumber: fetchBlockNumber,\r\n              }),\r\n            )\r\n          })\r\n          .catch((error: any) => {\r\n            if (error instanceof CancelledError) {\r\n              console.debug('Cancelled fetch for blockNumber', currentBlock)\r\n              return\r\n            }\r\n            console.error('Failed to fetch multicall chunk', chunk, chainId, error)\r\n            dispatch(\r\n              errorFetchingMulticallResults({\r\n                calls: chunk,\r\n                chainId,\r\n                fetchingBlockNumber: currentBlock,\r\n              }),\r\n            )\r\n          })\r\n        return cancel\r\n      }),\r\n    }\r\n  }, [chainId, multicallContract, dispatch, serializedOutdatedCallKeys, currentBlock])\r\n\r\n  return null\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\n// modified from https://usehooks.com/useDebounce/\r\nexport default function useDebounce<T>(value: T, delay: number): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\r\n\r\n  useEffect(() => {\r\n    // Update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value)\r\n    }, delay)\r\n\r\n    // Cancel the timeout if value changes (also on delay change or unmount)\r\n    // This is how we prevent debounced value from updating if value is changed ...\r\n    // .. within the delay period. Timeout gets cleared and restarted.\r\n    return () => {\r\n      clearTimeout(handler)\r\n    }\r\n  }, [value, delay])\r\n\r\n  return debouncedValue\r\n}\r\n","// chunks array into chunks of maximum size\r\n// evenly distributes items among the chunks\r\nexport default function chunkArray<T>(items: T[], maxChunkSize: number): T[][] {\r\n  if (maxChunkSize < 1) throw new Error('maxChunkSize must be gte 1')\r\n  if (items.length <= maxChunkSize) return [items]\r\n\r\n  const numChunks: number = Math.ceil(items.length / maxChunkSize)\r\n  const chunkSize = Math.ceil(items.length / numChunks)\r\n\r\n  return [...Array(numChunks).keys()].map((ix) => items.slice(ix * chunkSize, ix * chunkSize + chunkSize))\r\n}\r\n","import { ReactNode } from 'react'\r\n\r\nexport const types = {\r\n  SUCCESS: 'success',\r\n  DANGER: 'danger',\r\n  WARNING: 'warning',\r\n  INFO: 'info',\r\n}\r\n\r\nexport type Types = typeof types[keyof typeof types]\r\n\r\nexport interface Toast {\r\n  id: string\r\n  type: Types\r\n  title: string\r\n  description?: ReactNode\r\n}\r\n\r\nexport interface ToastContainerProps {\r\n  toasts: Toast[]\r\n  stackSpacing?: number\r\n  ttl?: number\r\n  onRemove: (id: string) => void\r\n}\r\n\r\nexport interface ToastProps {\r\n  toast: Toast\r\n  onRemove: ToastContainerProps['onRemove']\r\n  ttl: number\r\n  style: Partial<CSSStyleDeclaration>\r\n}\r\n","import React, { useCallback, useEffect, useRef } from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport styled from 'styled-components'\r\nimport { Alert, alertVariants } from '@pancakeswap/uikit'\r\nimport { ToastProps, types } from './types'\r\n\r\nconst alertTypeMap = {\r\n  [types.INFO]: alertVariants.INFO,\r\n  [types.SUCCESS]: alertVariants.SUCCESS,\r\n  [types.DANGER]: alertVariants.DANGER,\r\n  [types.WARNING]: alertVariants.WARNING,\r\n}\r\n\r\nconst StyledToast = styled.div`\r\n  right: 16px;\r\n  position: fixed;\r\n  max-width: calc(100% - 32px);\r\n  transition: all 250ms ease-in;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    max-width: 400px;\r\n  }\r\n`\r\n\r\nconst Toast: React.FC<ToastProps> = ({ toast, onRemove, style, ttl, ...props }) => {\r\n  const timer = useRef<number>()\r\n  const ref = useRef(null)\r\n  const removeHandler = useRef(onRemove)\r\n  const { id, title, description, type } = toast\r\n\r\n  const handleRemove = useCallback(() => removeHandler.current(id), [id, removeHandler])\r\n\r\n  const handleMouseEnter = () => {\r\n    clearTimeout(timer.current)\r\n  }\r\n\r\n  const handleMouseLeave = () => {\r\n    if (timer.current) {\r\n      clearTimeout(timer.current)\r\n    }\r\n\r\n    timer.current = window.setTimeout(() => {\r\n      handleRemove()\r\n    }, ttl)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (timer.current) {\r\n      clearTimeout(timer.current)\r\n    }\r\n\r\n    timer.current = window.setTimeout(() => {\r\n      handleRemove()\r\n    }, ttl)\r\n\r\n    return () => {\r\n      clearTimeout(timer.current)\r\n    }\r\n  }, [timer, ttl, handleRemove])\r\n\r\n  return (\r\n    <CSSTransition nodeRef={ref} timeout={250} style={style} {...props}>\r\n      <StyledToast ref={ref} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\r\n        <Alert title={title} variant={alertTypeMap[type]} onClick={handleRemove}>\r\n          {description}\r\n        </Alert>\r\n      </StyledToast>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nexport default Toast\r\n","import React from 'react'\r\nimport { TransitionGroup } from 'react-transition-group'\r\nimport styled from 'styled-components'\r\nimport Toast from './Toast'\r\nimport { ToastContainerProps } from './types'\r\n\r\nconst ZINDEX = 1000\r\nconst TOP_POSITION = 80 // Initial position from the top\r\n\r\nconst StyledToastContainer = styled.div`\r\n  .enter,\r\n  .appear {\r\n    opacity: 0.01;\r\n  }\r\n\r\n  .enter.enter-active,\r\n  .appear.appear-active {\r\n    opacity: 1;\r\n    transition: opacity 250ms ease-in;\r\n  }\r\n\r\n  .exit {\r\n    opacity: 1;\r\n  }\r\n\r\n  .exit.exit-active {\r\n    opacity: 0.01;\r\n    transition: opacity 250ms ease-out;\r\n  }\r\n`\r\n\r\nconst ToastContainer: React.FC<ToastContainerProps> = ({ toasts, onRemove, ttl = 6000, stackSpacing = 24 }) => {\r\n  return (\r\n    <StyledToastContainer>\r\n      <TransitionGroup>\r\n        {toasts.map((toast, index) => {\r\n          const zIndex = (ZINDEX - index).toString()\r\n          const top = TOP_POSITION + index * stackSpacing\r\n\r\n          return (\r\n            <Toast key={toast.id} toast={toast} onRemove={onRemove} ttl={ttl} style={{ top: `${top}px`, zIndex }} />\r\n          )\r\n        })}\r\n      </TransitionGroup>\r\n    </StyledToastContainer>\r\n  )\r\n}\r\n\r\nexport default ToastContainer\r\n","/**\r\n * Truncate a transaction or address hash\r\n */\r\nconst truncateHash = (address: string, startLength = 4, endLength = 4) => {\r\n  return `${address.substring(0, startLength)}...${address.substring(address.length - endLength)}`\r\n}\r\n\r\nexport default truncateHash\r\n","import React from 'react'\r\nimport { Link, Text } from '@pancakeswap/uikit'\r\nimport { getBscScanLink } from 'utils'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport truncateHash from 'utils/truncateHash'\r\n\r\ninterface DescriptionWithTxProps {\r\n  description?: string\r\n  txHash?: string\r\n}\r\n\r\nconst DescriptionWithTx: React.FC<DescriptionWithTxProps> = ({ txHash, children }) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <>\r\n      {typeof children === 'string' ? <Text as=\"p\">{children}</Text> : children}\r\n      {txHash && (\r\n        <Link external href={getBscScanLink(txHash, 'transaction', chainId)}>\r\n          {t('View on BscScan')}: {truncateHash(txHash, 8, 0)}\r\n        </Link>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DescriptionWithTx\r\n","import React, { createContext, useCallback, useState } from 'react'\r\nimport { kebabCase } from 'lodash'\r\nimport { Toast, toastTypes } from 'components/Toast'\r\nimport { ToastContextApi } from './types'\r\n\r\nexport const ToastsContext = createContext<ToastContextApi>(undefined)\r\n\r\nexport const ToastsProvider: React.FC = ({ children }) => {\r\n  const [toasts, setToasts] = useState<ToastContextApi['toasts']>([])\r\n\r\n  const toast = useCallback(\r\n    ({ title, description, type }: Omit<Toast, 'id'>) => {\r\n      setToasts((prevToasts) => {\r\n        const id = kebabCase(title)\r\n\r\n        // Remove any existing toasts with the same id\r\n        const currentToasts = prevToasts.filter((prevToast) => prevToast.id !== id)\r\n\r\n        return [\r\n          {\r\n            id,\r\n            title,\r\n            description,\r\n            type,\r\n          },\r\n          ...currentToasts,\r\n        ]\r\n      })\r\n    },\r\n    [setToasts],\r\n  )\r\n\r\n  const toastError = (title: Toast['title'], description?: Toast['description']) => {\r\n    return toast({ title, description, type: toastTypes.DANGER })\r\n  }\r\n  const toastInfo = (title: Toast['title'], description?: Toast['description']) => {\r\n    return toast({ title, description, type: toastTypes.INFO })\r\n  }\r\n  const toastSuccess = (title: Toast['title'], description?: Toast['description']) => {\r\n    return toast({ title, description, type: toastTypes.SUCCESS })\r\n  }\r\n  const toastWarning = (title: Toast['title'], description?: Toast['description']) => {\r\n    return toast({ title, description, type: toastTypes.WARNING })\r\n  }\r\n  const clear = () => setToasts([])\r\n  const remove = (id: string) => {\r\n    setToasts((prevToasts) => prevToasts.filter((prevToast) => prevToast.id !== id))\r\n  }\r\n\r\n  return (\r\n    <ToastsContext.Provider value={{ toasts, clear, remove, toastError, toastInfo, toastSuccess, toastWarning }}>\r\n      {children}\r\n    </ToastsContext.Provider>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ToastContainer } from 'components/Toast'\r\nimport useToast from 'hooks/useToast'\r\n\r\nconst ToastListener = () => {\r\n  const { toasts, remove } = useToast()\r\n\r\n  const handleRemove = (id: string) => remove(id)\r\n\r\n  return <ToastContainer toasts={toasts} onRemove={handleRemove} />\r\n}\r\n\r\nexport default ToastListener\r\n","import { useContext } from 'react'\r\nimport { ToastsContext } from 'contexts/ToastsContext'\r\n\r\nconst useToast = () => {\r\n  const toastContext = useContext(ToastsContext)\r\n\r\n  if (toastContext === undefined) {\r\n    throw new Error('Toasts context undefined')\r\n  }\r\n\r\n  return toastContext\r\n}\r\n\r\nexport default useToast\r\n","import React, { useEffect, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { useBlock } from 'state/block/hooks'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport useToast from 'hooks/useToast'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { checkedTransaction, finalizeTransaction } from './actions'\r\n\r\nexport function shouldCheck(\r\n  currentBlock: number,\r\n  tx: { addedTime: number; receipt?: any; lastCheckedBlockNumber?: number },\r\n): boolean {\r\n  if (tx.receipt) return false\r\n  if (!tx.lastCheckedBlockNumber) return true\r\n  const blocksSinceCheck = currentBlock - tx.lastCheckedBlockNumber\r\n  if (blocksSinceCheck < 1) return false\r\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60\r\n  if (minutesPending > 60) {\r\n    // every 10 blocks if pending for longer than an hour\r\n    return blocksSinceCheck > 9\r\n  }\r\n  if (minutesPending > 5) {\r\n    // every 3 blocks if pending more than 5 minutes\r\n    return blocksSinceCheck > 2\r\n  }\r\n  // otherwise every block\r\n  return true\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const { library, chainId } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n\r\n  const { currentBlock } = useBlock()\r\n\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const state = useSelector<AppState, AppState['transactions']>((s) => s.transactions)\r\n\r\n  const transactions = useMemo(() => (chainId ? state[chainId] ?? {} : {}), [chainId, state])\r\n\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  useEffect(() => {\r\n    if (!chainId || !library || !currentBlock) return\r\n\r\n    Object.keys(transactions)\r\n      .filter((hash) => shouldCheck(currentBlock, transactions[hash]))\r\n      .forEach((hash) => {\r\n        library\r\n          .getTransactionReceipt(hash)\r\n          .then((receipt) => {\r\n            if (receipt) {\r\n              dispatch(\r\n                finalizeTransaction({\r\n                  chainId,\r\n                  hash,\r\n                  receipt: {\r\n                    blockHash: receipt.blockHash,\r\n                    blockNumber: receipt.blockNumber,\r\n                    contractAddress: receipt.contractAddress,\r\n                    from: receipt.from,\r\n                    status: receipt.status,\r\n                    to: receipt.to,\r\n                    transactionHash: receipt.transactionHash,\r\n                    transactionIndex: receipt.transactionIndex,\r\n                  },\r\n                }),\r\n              )\r\n\r\n              const toast = receipt.status === 1 ? toastSuccess : toastError\r\n              toast(t('Transaction receipt'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n            } else {\r\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: currentBlock }))\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(`failed to check transaction hash: ${hash}`, error)\r\n          })\r\n      })\r\n  }, [chainId, library, transactions, currentBlock, dispatch, toastSuccess, toastError, t])\r\n\r\n  return null\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { GRAPH_HEALTH } from 'config/constants/endpoints'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport { useSlowFresh } from './useRefresh'\r\n\r\nexport enum SubgraphStatus {\r\n  OK,\r\n  WARNING,\r\n  NOT_OK,\r\n  UNKNOWN,\r\n}\r\n\r\nexport type SubgraphHealthState = {\r\n  status: SubgraphStatus\r\n  currentBlock: number\r\n  chainHeadBlock: number\r\n  latestBlock: number\r\n  blockDifference: number\r\n}\r\n\r\nconst NOT_OK_BLOCK_DIFFERENCE = 200 // ~15 minutes delay\r\nconst WARNING_BLOCK_DIFFERENCE = 50 // ~2.5 minute delay\r\n\r\nconst useSubgraphHealth = () => {\r\n  const [sgHealth, setSgHealth] = useState<SubgraphHealthState>({\r\n    status: SubgraphStatus.UNKNOWN,\r\n    currentBlock: 0,\r\n    chainHeadBlock: 0,\r\n    latestBlock: 0,\r\n    blockDifference: 0,\r\n  })\r\n\r\n  const slowRefresh = useSlowFresh()\r\n  useEffect(() => {\r\n    const getSubgraphHealth = async () => {\r\n      try {\r\n        const { indexingStatusForCurrentVersion } = await request(\r\n          GRAPH_HEALTH,\r\n          gql`\r\n            query getNftMarketSubgraphHealth {\r\n              indexingStatusForCurrentVersion(subgraphName: \"pancakeswap/nft-market\") {\r\n                synced\r\n                health\r\n                chains {\r\n                  chainHeadBlock {\r\n                    number\r\n                  }\r\n                  latestBlock {\r\n                    number\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          `,\r\n        )\r\n\r\n        const currentBlock = await simpleRpcProvider.getBlockNumber()\r\n\r\n        const isHealthy = indexingStatusForCurrentVersion.health === 'healthy'\r\n        const chainHeadBlock = parseInt(indexingStatusForCurrentVersion.chains[0].chainHeadBlock.number)\r\n        const latestBlock = parseInt(indexingStatusForCurrentVersion.chains[0].latestBlock.number)\r\n        const blockDifference = currentBlock - latestBlock\r\n        // Sometimes subgraph might report old block as chainHeadBlock, so its important to compare\r\n        // it with block retrieved from simpleRpcProvider.getBlockNumber()\r\n        const chainHeadBlockDifference = currentBlock - chainHeadBlock\r\n        if (\r\n          !isHealthy ||\r\n          blockDifference > NOT_OK_BLOCK_DIFFERENCE ||\r\n          chainHeadBlockDifference > NOT_OK_BLOCK_DIFFERENCE\r\n        ) {\r\n          setSgHealth({ status: SubgraphStatus.NOT_OK, currentBlock, chainHeadBlock, latestBlock, blockDifference })\r\n        } else if (blockDifference > WARNING_BLOCK_DIFFERENCE || chainHeadBlockDifference > WARNING_BLOCK_DIFFERENCE) {\r\n          setSgHealth({ status: SubgraphStatus.WARNING, currentBlock, chainHeadBlock, latestBlock, blockDifference })\r\n        } else {\r\n          setSgHealth({ status: SubgraphStatus.OK, currentBlock, chainHeadBlock, latestBlock, blockDifference })\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to perform health check for NFT Market subgraph', error)\r\n      }\r\n    }\r\n    getSubgraphHealth()\r\n  }, [slowRefresh])\r\n\r\n  return sgHealth\r\n}\r\n\r\nexport default useSubgraphHealth\r\n","import useInterval from 'hooks/useInterval'\r\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\r\nimport React, { useState } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst createRefreshContext = (interval: number) => {\r\n  const RefreshContext = React.createContext(0)\r\n  return {\r\n    Context: RefreshContext,\r\n    Provider: ({ children }) => {\r\n      const [count, setCount] = useState(0)\r\n\r\n      useInterval(\r\n        () => {\r\n          setCount((c) => c + 1)\r\n        },\r\n        useIsWindowVisible ? interval : null,\r\n        false,\r\n      )\r\n\r\n      return <RefreshContext.Provider value={count}>{children}</RefreshContext.Provider>\r\n    },\r\n  }\r\n}\r\n\r\nexport const SlowRefresh = createRefreshContext(SLOW_INTERVAL)\r\nexport const FastRefresh = createRefreshContext(FAST_INTERVAL)\r\n\r\nconst RefreshContextProvider = ({ children }) => {\r\n  return (\r\n    <SlowRefresh.Provider>\r\n      <FastRefresh.Provider>{children}</FastRefresh.Provider>\r\n    </SlowRefresh.Provider>\r\n  )\r\n}\r\n\r\nexport { RefreshContextProvider }\r\n","import { useContext } from 'react'\r\nimport { FastRefresh, SlowRefresh } from 'contexts/RefreshContext'\r\n\r\nexport const useFastFresh = () => {\r\n  return useContext(FastRefresh.Context)\r\n}\r\nexport const useSlowFresh = () => {\r\n  return useContext(SlowRefresh.Context)\r\n}\r\n","import { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport tokens from 'config/constants/tokens'\r\nimport { ethers } from 'ethers'\r\nimport { useEffect, useState } from 'react'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport useLastUpdated from './useLastUpdated'\r\nimport { useFastFresh, useSlowFresh } from './useRefresh'\r\n\r\ntype UseTokenBalanceState = {\r\n  balance: BigNumber\r\n  fetchStatus: FetchStatus\r\n}\r\n\r\nexport enum FetchStatus {\r\n  NOT_FETCHED = 'not-fetched',\r\n  SUCCESS = 'success',\r\n  FAILED = 'failed',\r\n}\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\r\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\r\n    balance: BIG_ZERO,\r\n    fetchStatus: NOT_FETCHED,\r\n  })\r\n  const { account } = useWeb3React()\r\n  const fastRefresh = useFastFresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      try {\r\n        const res = await contract.balanceOf(account)\r\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\r\n      } catch (e) {\r\n        console.error(e)\r\n        setBalanceState((prev) => ({\r\n          ...prev,\r\n          fetchStatus: FAILED,\r\n        }))\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\r\n\r\n  return balanceState\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const slowRefresh = useSlowFresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.totalSupply()\r\n      setTotalSupply(new BigNumber(supply.toString()))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(BIG_ZERO)\r\n  const slowRefresh = useSlowFresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress)\r\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\r\n      setBalance(new BigNumber(res.toString()))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useGetBnbBalance = () => {\r\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.NOT_FETCHED)\r\n  const [balance, setBalance] = useState(ethers.BigNumber.from(0))\r\n  const { account } = useWeb3React()\r\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      try {\r\n        const walletBalance = await simpleRpcProvider.getBalance(account)\r\n        setBalance(walletBalance)\r\n        setFetchStatus(FetchStatus.SUCCESS)\r\n      } catch {\r\n        setFetchStatus(FetchStatus.FAILED)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, lastUpdated, setBalance, setFetchStatus])\r\n\r\n  return { balance, fetchStatus, refresh: setLastUpdated }\r\n}\r\n\r\nexport const useGetCakeBalance = () => {\r\n  const { balance, fetchStatus } = useTokenBalance(tokens.cake.address)\r\n\r\n  // TODO: Remove ethers conversion once useTokenBalance is converted to ethers.BigNumber\r\n  return { balance: ethers.BigNumber.from(balance.toString()), fetchStatus }\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { BSC_BLOCK_TIME } from 'config'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Translate } from 'contexts/Localization/types'\r\nimport React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, Box, InfoIcon, Text, useTooltip } from '@pancakeswap/uikit'\r\nimport { useSubgraphHealthIndicatorManager } from 'state/user/hooks'\r\nimport useSubgraphHealth, { SubgraphStatus } from 'hooks/useSubgraphHealth'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nconst StyledCard = styled(Card)`\r\n  border-radius: 8px;\r\n  > div {\r\n    border-radius: 8px;\r\n  }\r\n`\r\n\r\nconst IndicatorWrapper = styled(Box)`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 7px;\r\n`\r\n\r\nconst Dot = styled(Box)<{ $color: string }>`\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  background: ${({ $color, theme }) => theme.colors[$color]};\r\n`\r\n\r\nconst indicator = (t: Translate) =>\r\n  ({\r\n    delayed: {\r\n      label: t('Delayed'),\r\n      color: 'failure',\r\n      description: t(\r\n        'Subgraph is currently experiencing delays due to BSC issues. Performance may suffer until subgraph is restored.',\r\n      ),\r\n    },\r\n    slow: {\r\n      label: t('Slight delay'),\r\n      color: 'warning',\r\n      description: t(\r\n        'Subgraph is currently experiencing delays due to BSC issues. Performance may suffer until subgraph is restored.',\r\n      ),\r\n    },\r\n    healthy: {\r\n      label: t('Fast'),\r\n      color: 'success',\r\n      description: t('No issues with the subgraph.'),\r\n    },\r\n  } as const)\r\n\r\ntype Indicator = keyof ReturnType<typeof indicator>\r\n\r\nconst getIndicator = (sgStatus: SubgraphStatus): Indicator => {\r\n  if (sgStatus === SubgraphStatus.NOT_OK) {\r\n    return 'delayed'\r\n  }\r\n\r\n  if (sgStatus === SubgraphStatus.WARNING) {\r\n    return 'slow'\r\n  }\r\n\r\n  return 'healthy'\r\n}\r\n\r\nexport interface BlockResponse {\r\n  blocks: {\r\n    number: string\r\n  }[]\r\n}\r\n\r\nconst SubgraphHealthIndicator = () => {\r\n  const { pathname } = useLocation()\r\n  const isOnNftPages = pathname.includes('nfts')\r\n  return isOnNftPages ? <SubgraphHealth /> : null\r\n}\r\n\r\nconst SubgraphHealth = () => {\r\n  const { t } = useTranslation()\r\n  const { status, currentBlock, blockDifference, latestBlock } = useSubgraphHealth()\r\n  const [alwaysShowIndicator] = useSubgraphHealthIndicatorManager()\r\n  const forceIndicatorDisplay = status === SubgraphStatus.WARNING || status === SubgraphStatus.NOT_OK\r\n  const showIndicator = alwaysShowIndicator || forceIndicatorDisplay\r\n\r\n  const indicatorProps = indicator(t)\r\n\r\n  const secondRemainingBlockSync = blockDifference * BSC_BLOCK_TIME\r\n\r\n  const indicatorValue = getIndicator(status)\r\n\r\n  const current = indicatorProps[indicatorValue]\r\n\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <TooltipContent\r\n      currentBlock={currentBlock}\r\n      secondRemainingBlockSync={secondRemainingBlockSync}\r\n      blockNumberFromSubgraph={latestBlock}\r\n      {...current}\r\n    />,\r\n    {\r\n      placement: 'top',\r\n    },\r\n  )\r\n\r\n  if (!latestBlock || !currentBlock || !showIndicator) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Box position=\"fixed\" bottom=\"55px\" right=\"5%\" ref={targetRef}>\r\n      {tooltipVisible && tooltip}\r\n      <StyledCard>\r\n        <IndicatorWrapper p=\"10px\">\r\n          <Dot $color={current.color} />\r\n          <Text>{current.label}</Text>\r\n          <InfoIcon />\r\n        </IndicatorWrapper>\r\n      </StyledCard>\r\n    </Box>\r\n  )\r\n}\r\n\r\nconst TooltipContent = ({\r\n  color,\r\n  label,\r\n  description,\r\n  currentBlock,\r\n  secondRemainingBlockSync,\r\n  blockNumberFromSubgraph,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Box>\r\n      <IndicatorWrapper pb=\"10px\">\r\n        <Dot $color={color} />\r\n        <Text>{label}</Text>\r\n      </IndicatorWrapper>\r\n      <Text pb=\"24px\">{description}</Text>\r\n      <Text>\r\n        <strong>{t('Chain Head Block')}:</strong> {currentBlock}\r\n      </Text>\r\n      <Text>\r\n        <strong>{t('Latest Subgraph Block')}:</strong> {blockNumberFromSubgraph}\r\n      </Text>\r\n      <Text>\r\n        <strong>{t('Delay')}:</strong> {currentBlock - blockNumberFromSubgraph} ({secondRemainingBlockSync}s)\r\n      </Text>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default SubgraphHealthIndicator\r\n","import { InjectedConnector } from '@web3-react/injected-connector'\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\nimport { BscConnector } from '@binance-chain/bsc-connector'\r\nimport { ConnectorNames } from '@pancakeswap/uikit'\r\nimport { ethers } from 'ethers'\r\nimport getNodeUrl from './getRpcUrl'\r\n\r\nconst POLLING_INTERVAL = 12000\r\nconst rpcUrl = getNodeUrl()\r\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\r\n\r\nconst injected = new InjectedConnector({ supportedChainIds: [chainId] })\r\n\r\nconst walletconnect = new WalletConnectConnector({\r\n  rpc: { [chainId]: rpcUrl },\r\n  qrcode: true,\r\n  pollingInterval: POLLING_INTERVAL,\r\n})\r\n\r\nconst bscConnector = new BscConnector({ supportedChainIds: [chainId] })\r\n\r\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\r\n  [ConnectorNames.Injected]: injected,\r\n  [ConnectorNames.WalletConnect]: walletconnect,\r\n  [ConnectorNames.BSC]: bscConnector,\r\n}\r\n\r\nexport const getLibrary = (provider): ethers.providers.Web3Provider => {\r\n  const library = new ethers.providers.Web3Provider(provider)\r\n  library.pollingInterval = POLLING_INTERVAL\r\n  return library\r\n}\r\n\r\n/**\r\n * BSC Wallet requires a different sign method\r\n * @see https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\r\n */\r\nexport const signMessage = async (\r\n  connector: AbstractConnector,\r\n  provider: any,\r\n  account: string,\r\n  message: string,\r\n): Promise<string> => {\r\n  if (window.BinanceChain && connector instanceof BscConnector) {\r\n    const { signature } = await window.BinanceChain.bnbSign(account, message)\r\n    return signature\r\n  }\r\n\r\n  /**\r\n   * Wallet Connect does not sign the message correctly unless you use their method\r\n   * @see https://github.com/WalletConnect/walletconnect-monorepo/issues/462\r\n   */\r\n  if (provider.provider?.wc) {\r\n    const wcMessage = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message))\r\n    const signature = await provider.provider?.wc.signPersonalMessage([wcMessage, account])\r\n    return signature\r\n  }\r\n\r\n  return provider.getSigner(account).signMessage(message)\r\n}\r\n","// Set of helper functions to facilitate wallet setup\r\n\r\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\r\nimport { nodes } from './getRpcUrl'\r\n\r\n/**\r\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\r\n * @returns {boolean} true if the setup succeeded, false otherwise\r\n */\r\nexport const setupNetwork = async () => {\r\n  const provider = window.ethereum\r\n  if (provider) {\r\n    const chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\r\n    try {\r\n      await provider.request({\r\n        method: 'wallet_addEthereumChain',\r\n        params: [\r\n          {\r\n            chainId: `0x${chainId.toString(16)}`,\r\n            chainName: 'Binance Smart Chain Mainnet',\r\n            nativeCurrency: {\r\n              name: 'BNB',\r\n              symbol: 'bnb',\r\n              decimals: 18,\r\n            },\r\n            rpcUrls: nodes,\r\n            blockExplorerUrls: [`${BASE_BSC_SCAN_URL}/`],\r\n          },\r\n        ],\r\n      })\r\n      return true\r\n    } catch (error) {\r\n      console.error('Failed to setup the network in Metamask:', error)\r\n      return false\r\n    }\r\n  } else {\r\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\")\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Prompt the user to add a custom token to metamask\r\n * @param tokenAddress\r\n * @param tokenSymbol\r\n * @param tokenDecimals\r\n * @returns {boolean} true if the token has been added, false otherwise\r\n */\r\nexport const registerToken = async (tokenAddress: string, tokenSymbol: string, tokenDecimals: number) => {\r\n  const tokenAdded = await window.ethereum.request({\r\n    method: 'wallet_watchAsset',\r\n    params: {\r\n      type: 'ERC20',\r\n      options: {\r\n        address: tokenAddress,\r\n        symbol: tokenSymbol,\r\n        decimals: tokenDecimals,\r\n        image: `${BASE_URL}/images/tokens/${tokenAddress}.png`,\r\n      },\r\n    },\r\n  })\r\n\r\n  return tokenAdded\r\n}\r\n","import { useCallback } from 'react'\r\nimport { UnsupportedChainIdError, useWeb3React } from '@web3-react/core'\r\nimport { NoBscProviderError } from '@binance-chain/bsc-connector'\r\nimport {\r\n  NoEthereumProviderError,\r\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\r\n} from '@web3-react/injected-connector'\r\nimport {\r\n  UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\r\n  WalletConnectConnector,\r\n} from '@web3-react/walletconnect-connector'\r\nimport { ConnectorNames, connectorLocalStorageKey } from '@pancakeswap/uikit'\r\nimport { connectorsByName } from 'utils/web3React'\r\nimport { setupNetwork } from 'utils/wallet'\r\nimport useToast from 'hooks/useToast'\r\nimport { useAppDispatch } from 'state'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { clearUserStates } from '../utils/clearUserStates'\r\n\r\nconst useAuth = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { chainId, activate, deactivate } = useWeb3React()\r\n  const { toastError } = useToast()\r\n\r\n  const login = useCallback(\r\n    (connectorID: ConnectorNames) => {\r\n      const connector = connectorsByName[connectorID]\r\n      if (connector) {\r\n        activate(connector, async (error: Error) => {\r\n          if (error instanceof UnsupportedChainIdError) {\r\n            const hasSetup = await setupNetwork()\r\n            if (hasSetup) {\r\n              activate(connector)\r\n            }\r\n          } else {\r\n            window.localStorage.removeItem(connectorLocalStorageKey)\r\n            if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\r\n              toastError(t('Provider Error'), t('No provider was found'))\r\n            } else if (\r\n              error instanceof UserRejectedRequestErrorInjected ||\r\n              error instanceof UserRejectedRequestErrorWalletConnect\r\n            ) {\r\n              if (connector instanceof WalletConnectConnector) {\r\n                const walletConnector = connector as WalletConnectConnector\r\n                walletConnector.walletConnectProvider = null\r\n              }\r\n              toastError(t('Authorization Error'), t('Please authorize to access your account'))\r\n            } else {\r\n              toastError(error.name, error.message)\r\n            }\r\n          }\r\n        })\r\n      } else {\r\n        toastError(t('Unable to find connector'), t('The connector config is wrong'))\r\n      }\r\n    },\r\n    [t, activate, toastError],\r\n  )\r\n\r\n  const logout = useCallback(() => {\r\n    deactivate()\r\n    clearUserStates(dispatch, chainId)\r\n  }, [deactivate, dispatch, chainId])\r\n\r\n  return { login, logout }\r\n}\r\n\r\nexport default useAuth\r\n","import * as Sentry from '@sentry/react'\r\nimport { Dispatch } from '@reduxjs/toolkit'\r\nimport { connectorLocalStorageKey } from '@pancakeswap/uikit'\r\nimport { profileClear } from '../state/profile'\r\nimport { resetUserNftState } from '../state/nftMarket/reducer'\r\nimport { connectorsByName } from './web3React'\r\nimport { clearAllTransactions } from '../state/transactions/actions'\r\n\r\nexport const clearUserStates = (dispatch: Dispatch<any>, chainId: number) => {\r\n  dispatch(profileClear())\r\n  dispatch(resetUserNftState())\r\n  Sentry.configureScope((scope) => scope.setUser(null))\r\n  // This localStorage key is set by @web3-react/walletconnect-connector\r\n  if (window.localStorage.getItem('walletconnect')) {\r\n    connectorsByName.walletconnect.close()\r\n    connectorsByName.walletconnect.walletConnectProvider = null\r\n  }\r\n  window.localStorage.removeItem(connectorLocalStorageKey)\r\n  if (chainId) {\r\n    dispatch(clearAllTransactions({ chainId }))\r\n  }\r\n}\r\n","import { useEffect, useRef } from 'react'\r\n\r\n/**\r\n * Returns the previous value of the given value\r\n *\r\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\r\n */\r\nconst usePreviousValue = (value: any) => {\r\n  const ref = useRef()\r\n\r\n  useEffect(() => {\r\n    ref.current = value\r\n  }, [value])\r\n\r\n  return ref.current\r\n}\r\n\r\nexport default usePreviousValue\r\n","import { useCallback, useState } from 'react'\r\nimport usePreviousValue from './usePreviousValue'\r\n\r\n/**\r\n * A helper hook to keep track of the time between events\r\n * Can also be used to force an effect to re-run\r\n */\r\nconst useLastUpdated = () => {\r\n  const [lastUpdated, setStateLastUpdated] = useState(Date.now())\r\n  const previousLastUpdated = usePreviousValue(lastUpdated)\r\n\r\n  const setLastUpdated = useCallback(() => {\r\n    setStateLastUpdated(Date.now())\r\n  }, [setStateLastUpdated])\r\n\r\n  return { lastUpdated, previousLastUpdated, setLastUpdated }\r\n}\r\n\r\nexport default useLastUpdated\r\n","import React, { useState } from 'react'\r\nimport { Box, CopyIcon, Flex, FlexProps, IconButton } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface CopyAddressProps extends FlexProps {\r\n  account: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  border-radius: 16px;\r\n  position: relative;\r\n`\r\n\r\nconst Address = styled.div`\r\n  flex: 1;\r\n  position: relative;\r\n  padding-left: 16px;\r\n\r\n  & > input {\r\n    background: transparent;\r\n    border: 0;\r\n    color: ${({ theme }) => theme.colors.text};\r\n    display: block;\r\n    font-weight: 600;\r\n    font-size: 16px;\r\n    padding: 0;\r\n    width: 100%;\r\n\r\n    &:focus {\r\n      outline: 0;\r\n    }\r\n  }\r\n\r\n  &:after {\r\n    background: linear-gradient(\r\n      to right,\r\n      ${({ theme }) => theme.colors.background}00,\r\n      ${({ theme }) => theme.colors.background}E6\r\n    );\r\n    content: '';\r\n    height: 100%;\r\n    pointer-events: none;\r\n    position: absolute;\r\n    right: 0;\r\n    top: 0;\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Tooltip = styled.div<{ isTooltipDisplayed: boolean }>`\r\n  display: ${({ isTooltipDisplayed }) => (isTooltipDisplayed ? 'inline-block' : 'none')};\r\n  position: absolute;\r\n  padding: 8px;\r\n  top: -38px;\r\n  right: 0;\r\n  text-align: center;\r\n  background-color: ${({ theme }) => theme.colors.contrast};\r\n  color: ${({ theme }) => theme.colors.invertedContrast};\r\n  border-radius: 16px;\r\n  opacity: 0.7;\r\n  width: 100px;\r\n`\r\n\r\nconst CopyAddress: React.FC<CopyAddressProps> = ({ account, ...props }) => {\r\n  const [isTooltipDisplayed, setIsTooltipDisplayed] = useState(false)\r\n  const { t } = useTranslation()\r\n\r\n  const copyAddress = () => {\r\n    if (navigator.clipboard && navigator.permissions) {\r\n      navigator.clipboard.writeText(account).then(() => displayTooltip())\r\n    } else if (document.queryCommandSupported('copy')) {\r\n      const ele = document.createElement('textarea')\r\n      ele.value = account\r\n      document.body.appendChild(ele)\r\n      ele.select()\r\n      document.execCommand('copy')\r\n      document.body.removeChild(ele)\r\n      displayTooltip()\r\n    }\r\n  }\r\n\r\n  function displayTooltip() {\r\n    setIsTooltipDisplayed(true)\r\n    setTimeout(() => {\r\n      setIsTooltipDisplayed(false)\r\n    }, 1000)\r\n  }\r\n\r\n  return (\r\n    <Box position=\"relative\" {...props}>\r\n      <Wrapper>\r\n        <Address title={account}>\r\n          <input type=\"text\" readOnly value={account} />\r\n        </Address>\r\n        <IconButton variant=\"text\" onClick={copyAddress}>\r\n          <CopyIcon color=\"primary\" width=\"24px\" />\r\n        </IconButton>\r\n      </Wrapper>\r\n      <Tooltip isTooltipDisplayed={isTooltipDisplayed}>{t('Copied')}</Tooltip>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default CopyAddress\r\n","import React from 'react'\r\nimport { Box, Button, Flex, InjectedModalProps, LinkExternal, Message, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTokenBalance, { FetchStatus, useGetBnbBalance } from 'hooks/useTokenBalance'\r\nimport useAuth from 'hooks/useAuth'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport { getFullDisplayBalance, formatBigNumber } from 'utils/formatBalance'\r\nimport tokens from 'config/constants/tokens'\r\nimport CopyAddress from './CopyAddress'\r\n\r\ninterface WalletInfoProps {\r\n  hasLowBnbBalance: boolean\r\n  onDismiss: InjectedModalProps['onDismiss']\r\n}\r\n\r\nconst WalletInfo: React.FC<WalletInfoProps> = ({ hasLowBnbBalance, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { balance, fetchStatus } = useGetBnbBalance()\r\n  const { balance: cakeBalance, fetchStatus: cakeFetchStatus } = useTokenBalance(tokens.cake.address)\r\n  const { logout } = useAuth()\r\n\r\n  const handleLogout = () => {\r\n    onDismiss()\r\n    logout()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Text color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\" fontWeight=\"bold\" mb=\"8px\">\r\n        {t('Your Address')}\r\n      </Text>\r\n      <CopyAddress account={account} mb=\"24px\" />\r\n      {hasLowBnbBalance && (\r\n        <Message variant=\"warning\" mb=\"24px\">\r\n          <Box>\r\n            <Text fontWeight=\"bold\">{t('BNB Balance Low')}</Text>\r\n            <Text as=\"p\">{t('You need BNB for transaction fees.')}</Text>\r\n          </Box>\r\n        </Message>\r\n      )}\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text color=\"textSubtle\">{t('BNB Balance')}</Text>\r\n        {fetchStatus !== FetchStatus.SUCCESS ? (\r\n          <Skeleton height=\"22px\" width=\"60px\" />\r\n        ) : (\r\n          <Text>{formatBigNumber(balance, 6)}</Text>\r\n        )}\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n        <Text color=\"textSubtle\">{t('CAKE Balance')}</Text>\r\n        {cakeFetchStatus !== FetchStatus.SUCCESS ? (\r\n          <Skeleton height=\"22px\" width=\"60px\" />\r\n        ) : (\r\n          <Text>{getFullDisplayBalance(cakeBalance, 18, 3)}</Text>\r\n        )}\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"end\" mb=\"24px\">\r\n        <LinkExternal href={getBscScanLink(account, 'address')}>{t('View on BscScan')}</LinkExternal>\r\n      </Flex>\r\n      <Button variant=\"secondary\" width=\"100%\" onClick={handleLogout}>\r\n        {t('Disconnect Wallet')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WalletInfo\r\n","import { TransactionResponse } from '@ethersproject/providers'\r\nimport { useCallback, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { addTransaction } from './actions'\r\nimport { TransactionDetails } from './reducer'\r\n\r\n// helper that can take a ethers library transaction response and add it to the list of transactions\r\nexport function useTransactionAdder(): (\r\n  response: TransactionResponse,\r\n  customData?: {\r\n    summary?: string\r\n    approval?: { tokenAddress: string; spender: string }\r\n    claim?: { recipient: string }\r\n  },\r\n) => void {\r\n  const { chainId, account } = useActiveWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  return useCallback(\r\n    (\r\n      response: TransactionResponse,\r\n      {\r\n        summary,\r\n        approval,\r\n        claim,\r\n      }: { summary?: string; claim?: { recipient: string }; approval?: { tokenAddress: string; spender: string } } = {},\r\n    ) => {\r\n      if (!account) return\r\n      if (!chainId) return\r\n\r\n      const { hash } = response\r\n      if (!hash) {\r\n        throw Error('No transaction hash found.')\r\n      }\r\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary, claim }))\r\n    },\r\n    [dispatch, chainId, account],\r\n  )\r\n}\r\n\r\n// returns all the transactions for the current chain\r\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\r\n  const { chainId } = useActiveWeb3React()\r\n\r\n  const state = useSelector<AppState, AppState['transactions']>((s) => s.transactions)\r\n\r\n  return chainId ? state[chainId] ?? {} : {}\r\n}\r\n\r\nexport function useIsTransactionPending(transactionHash?: string): boolean {\r\n  const transactions = useAllTransactions()\r\n\r\n  if (!transactionHash || !transactions[transactionHash]) return false\r\n\r\n  return !transactions[transactionHash].receipt\r\n}\r\n\r\n/**\r\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\r\n * @param tx to check for recency\r\n */\r\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\r\n  return new Date().getTime() - tx.addedTime < 86_400_000\r\n}\r\n\r\n// returns whether a token has a pending approval transaction\r\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\r\n  const allTransactions = useAllTransactions()\r\n  return useMemo(\r\n    () =>\r\n      typeof tokenAddress === 'string' &&\r\n      typeof spender === 'string' &&\r\n      Object.keys(allTransactions).some((hash) => {\r\n        const tx = allTransactions[hash]\r\n        if (!tx) return false\r\n        if (tx.receipt) {\r\n          return false\r\n        }\r\n        const { approval } = tx\r\n        if (!approval) return false\r\n        return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx)\r\n      }),\r\n    [allTransactions, spender, tokenAddress],\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { BlockIcon, CheckmarkCircleIcon, Flex, Link, OpenNewIcon, RefreshIcon } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { TransactionDetails } from 'state/transactions/reducer'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { getBscScanLink } from 'utils'\r\n\r\ninterface TransactionRowProps {\r\n  txn: TransactionDetails\r\n}\r\n\r\nconst TxnIcon = styled(Flex)`\r\n  align-items: center;\r\n  flex: none;\r\n  width: 24px;\r\n`\r\n\r\nconst Summary = styled.div`\r\n  flex: 1;\r\n  padding: 0 8px;\r\n`\r\n\r\nconst TxnLink = styled(Link)`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  margin-bottom: 16px;\r\n  width: 100%;\r\n\r\n  &:hover {\r\n    text-decoration: none;\r\n  }\r\n`\r\n\r\nconst renderIcon = (txn: TransactionDetails) => {\r\n  if (!txn.receipt) {\r\n    return <RefreshIcon spin width=\"24px\" />\r\n  }\r\n\r\n  return txn.receipt?.status === 1 || typeof txn.receipt?.status === 'undefined' ? (\r\n    <CheckmarkCircleIcon color=\"success\" width=\"24px\" />\r\n  ) : (\r\n    <BlockIcon color=\"failure\" width=\"24px\" />\r\n  )\r\n}\r\n\r\nconst TransactionRow: React.FC<TransactionRowProps> = ({ txn }) => {\r\n  const { chainId } = useActiveWeb3React()\r\n\r\n  if (!txn) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <TxnLink href={getBscScanLink(txn.hash, 'transaction', chainId)} external>\r\n      <TxnIcon>{renderIcon(txn)}</TxnIcon>\r\n      <Summary>{txn.summary ?? txn.hash}</Summary>\r\n      <TxnIcon>\r\n        <OpenNewIcon width=\"24px\" color=\"primary\" />\r\n      </TxnIcon>\r\n    </TxnLink>\r\n  )\r\n}\r\n\r\nexport default TransactionRow\r\n","import React, { useState } from 'react'\r\nimport {\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  CloseIcon,\r\n  Heading,\r\n  IconButton,\r\n  InjectedModalProps,\r\n  ModalBody,\r\n  ModalContainer,\r\n  ModalHeader as UIKitModalHeader,\r\n  ModalTitle,\r\n} from '@pancakeswap/uikit'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { FetchStatus, useGetBnbBalance } from 'hooks/useTokenBalance'\r\nimport WalletInfo from './WalletInfo'\r\nimport WalletTransactions from './WalletTransactions'\r\n\r\nexport enum WalletView {\r\n  WALLET_INFO,\r\n  TRANSACTIONS,\r\n}\r\n\r\ninterface WalletModalProps extends InjectedModalProps {\r\n  initialView?: WalletView\r\n}\r\n\r\nexport const LOW_BNB_BALANCE = parseUnits('2', 'gwei')\r\n\r\nconst ModalHeader = styled(UIKitModalHeader)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst Tabs = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  padding: 16px 24px;\r\n`\r\n\r\nconst WalletModal: React.FC<WalletModalProps> = ({ initialView = WalletView.WALLET_INFO, onDismiss }) => {\r\n  const [view, setView] = useState(initialView)\r\n  const { t } = useTranslation()\r\n  const { balance, fetchStatus } = useGetBnbBalance()\r\n  const hasLowBnbBalance = fetchStatus === FetchStatus.SUCCESS && balance.lte(LOW_BNB_BALANCE)\r\n\r\n  const handleClick = (newIndex: number) => {\r\n    setView(newIndex)\r\n  }\r\n\r\n  return (\r\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\r\n      <ModalHeader>\r\n        <ModalTitle>\r\n          <Heading>{t('Your Wallet')}</Heading>\r\n        </ModalTitle>\r\n        <IconButton variant=\"text\" onClick={onDismiss}>\r\n          <CloseIcon width=\"24px\" color=\"text\" />\r\n        </IconButton>\r\n      </ModalHeader>\r\n      <Tabs>\r\n        <ButtonMenu scale=\"sm\" variant=\"subtle\" onItemClick={handleClick} activeIndex={view} fullWidth>\r\n          <ButtonMenuItem>{t('Wallet')}</ButtonMenuItem>\r\n          <ButtonMenuItem>{t('Transactions')}</ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </Tabs>\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\" width=\"100%\">\r\n        {view === WalletView.WALLET_INFO && <WalletInfo hasLowBnbBalance={hasLowBnbBalance} onDismiss={onDismiss} />}\r\n        {view === WalletView.TRANSACTIONS && <WalletTransactions />}\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default WalletModal\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { Box, Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { AppDispatch } from 'state'\r\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { clearAllTransactions } from 'state/transactions/actions'\r\nimport { orderBy } from 'lodash'\r\nimport TransactionRow from './TransactionRow'\r\n\r\nconst WalletTransactions: React.FC = () => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const { t } = useTranslation()\r\n  const allTransactions = useAllTransactions()\r\n  const sortedTransactions = orderBy(Object.values(allTransactions).filter(isTransactionRecent), 'addedTime', 'desc')\r\n\r\n  const handleClearAll = () => {\r\n    if (chainId) {\r\n      dispatch(clearAllTransactions({ chainId }))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Box minHeight=\"120px\">\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n        <Text color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\" fontWeight=\"bold\">\r\n          {t('Recent Transactions')}\r\n        </Text>\r\n        {sortedTransactions.length > 0 && (\r\n          <Button scale=\"sm\" onClick={handleClearAll} variant=\"text\" px=\"0\">\r\n            {t('Clear all')}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n      {sortedTransactions.length > 0 ? (\r\n        sortedTransactions.map((txn) => <TransactionRow key={txn.hash} txn={txn} />)\r\n      ) : (\r\n        <Text textAlign=\"center\">{t('No recent transactions')}</Text>\r\n      )}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default WalletTransactions\r\n","const config = [\r\n  {\r\n    label: 'Dashboard',\r\n    icon: 'dashboard',\r\n    href: '/',\r\n  },\r\n  {\r\n    label: 'Invest',\r\n    icon: 'invest',\r\n    href: '/invest',\r\n  },\r\n  {\r\n    label: 'Exchange',\r\n    icon: 'exchange',\r\n    href: '/swap',\r\n  },\r\n]\r\n\r\nexport default config","import React, { useState } from 'react'\r\nimport styled from \"styled-components\"\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { Button, Flex, Heading, Text, Link, useModal, useWalletModal } from '@pancakeswap/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport WalletModal, { WalletView, LOW_BNB_BALANCE } from 'components/Menu/UserMenu/WalletModal'\r\nimport { HEADER_HEIGHT } from 'config'\r\nimport config from './config'\r\n\r\nconst StyledHeaderContainer = styled(Flex)`\r\n  height: ${HEADER_HEIGHT}px;\r\n  background: #0112E5;\r\n  color: #FFFFFF;\r\n  align-items: center;\r\n  width: 100%;\r\n  border-bottom: solid 1px #00000020;\r\n  justify-content: center;\r\n`\r\n\r\nconst Wrapper = styled(Flex)`\r\n  width: 100%;\r\n  max-width: 1400px;\r\n  margin: 0 60px;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n\r\nconst WalletButton = styled.div`\r\n  line-height: 1.5;\r\n  cursor: pointer;\r\n`\r\n\r\nconst StyledLogo = styled.img`\r\n  height: 66px;\r\n`\r\n\r\nconst Header = () => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [star, setStar] = useState(true)\r\n  const { login, logout } = useAuth()\r\n  const { pathname } = useLocation()\r\n\r\n  console.log(\"pooh, pathname = \", pathname)\r\n\r\n  const accountEllipsis = account ? `${account.substring(0, 6)} ... ${account.substring(account.length - 4)}` : null;\r\n\r\n  const { onPresentConnectModal } = useWalletModal(login, logout, t)\r\n\r\n  const [onPresentWalletModal] = useModal(<WalletModal initialView={WalletView.WALLET_INFO} />)\r\n\r\n  return (\r\n    <header>\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\" aria-label=\"Ninth navbar example\">\r\n        <div className=\"container-xl\">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            <img src=\"images/logo.png\" alt=\"logo\"/>\r\n          </a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarsExample07XL\" aria-controls=\"navbarsExample07XL\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarsExample07XL\">\r\n            <ul className=\"navbar-nav  mb-2 mb-lg-0\">\r\n              {config.map((item) => {\r\n                const status = pathname === item.href ? 'active' : ''\r\n                return (\r\n                  <li>\r\n                    <a className={`nav-link ${status}`} aria-current=\"page\" href={item.href}>\r\n                      <Flex alignItems=\"center\">\r\n                        <img src={`images/${item.icon}.png`} alt={`${item.icon}`}/>\r\n                        <div>{item.label}</div>\r\n                      </Flex>\r\n                    </a>\r\n                  </li>\r\n                )\r\n              })}\r\n            </ul>\r\n            <ul className=\"navbar-nav ms-auto mb-2 mb-lg-0\">\r\n              <li>\r\n                <span className=\"bg-tuscany nav-link\" data-bs-toggle=\"modal\" data-bs-target=\"#wallet\">\r\n                  { account ? \r\n                    <WalletButton onClick={onPresentWalletModal}>\r\n                      {accountEllipsis}\r\n                    </WalletButton>\r\n                    :\r\n                    <WalletButton onClick={onPresentConnectModal}>\r\n                      {t('Connect Wallet')}\r\n                    </WalletButton>\r\n                  }                  \r\n                </span>\r\n              </li>\r\n              <li className=\"nav-item con_sett\">\r\n                <a className=\"nav-link\" href=\"/\">\r\n                  <img src=\"images/settings.png\" alt=\"settings\"/>\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState } from 'react'\r\nimport styled from \"styled-components\"\r\nimport { Button, Flex, Heading, Link, Text, TwitterIcon, TelegramIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { HEADER_HEIGHT } from 'config'\r\n\r\nconst Header = () => {\r\n  const { t } = useTranslation()\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  return (\r\n    <footer>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-7\">\r\n            <div className=\"d-flex align-items-center\">\r\n              <img src=\"images/logo.png\" className=\"logo\" alt=\"\" />\r\n              <p>Copyright @ qtpie</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-2\">\r\n            <div className=\"socialblk\">\r\n              <ul className=\"list-inline\">\r\n                <li className=\"list-inline-item\"><Link href=\"/\"><img src=\"images/medium.png\" alt=\"\" /></Link></li>\r\n                <li className=\"list-inline-item\"><Link href=\"/\"><img src=\"images/telegram.png\" alt=\"\" /></Link></li>\r\n                <li className=\"list-inline-item\"><Link href=\"/\"><img src=\"images/twitter.png\" alt=\"\" /></Link></li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <div className=\"btm-lk\">\r\n              <ul>\r\n                <li><a href=\"/\">Docs</a></li>\r\n                <li><a href=\"/\">Supported Platforms</a></li>\r\n                <li><a href=\"/\">Audit</a></li>\r\n                <li><a href=\"/\">More</a></li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { PancakeTheme } from '@pancakeswap/uikit/dist/theme'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends PancakeTheme {}\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-family: 'Poppins', sans-serif;\r\n  }\r\n\r\n  body {\r\n    background:#e6ba7a;\r\n    padding: 0;\r\n    font-size: 14px;\r\n    color: #000;\r\n  }\r\n\r\n  footer {\r\n    background: #e6ba7a;\r\n    padding: 30px 0;\r\n  }\r\n\r\n  footer .logo {\r\n    width: 60px;\r\n    height: 60px;\r\n    margin-right: 20px;\r\n  }\r\n\r\n  footer p {\r\n    font-size: 16px;\r\n    margin-bottom: 0;\r\n  }\r\n\r\n`\r\n\r\nexport default GlobalStyle\r\n","import React, { Suspense, SuspenseProps } from 'react'\r\n\r\ninterface State {\r\n  hasError: boolean\r\n}\r\n\r\nclass SuspenseWithChunkError extends React.Component<SuspenseProps, State> {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  static getDerivedStateFromError() {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true }\r\n  }\r\n\r\n  componentDidCatch(error) {\r\n    const isJsChunkLoadError = error.name === 'ChunkLoadError'\r\n    const isCssChunkLoadError = error.code === 'CSS_CHUNK_LOAD_FAILED'\r\n    const isChunkLoadError = isJsChunkLoadError || isCssChunkLoadError\r\n\r\n    // Save a flag on the window object indicating that we have already had a chunk error.\r\n    // This prevents infinite reloads\r\n    const isRecoveringFromChunkError = !!window.history.state?.isRecoveringFromChunkError\r\n\r\n    // If was a chunk load error, refresh the page\r\n    if (isChunkLoadError && !isRecoveringFromChunkError) {\r\n      const nextState = { ...window.history.state, isRecoveringFromChunkError: true }\r\n      window.history.replaceState(nextState, '')\r\n      window.location.reload()\r\n      return\r\n    }\r\n\r\n    throw error\r\n  }\r\n\r\n  render() {\r\n    const { hasError } = this.state\r\n    const { fallback } = this.props\r\n\r\n    if (hasError) {\r\n      return fallback\r\n    }\r\n\r\n    return <Suspense {...this.props} />\r\n  }\r\n}\r\n\r\nexport default SuspenseWithChunkError\r\n","import styled from 'styled-components'\r\n\r\nconst Dots = styled.span`\r\n  &::after {\r\n    display: inline-block;\r\n    animation: ellipsis 1.25s infinite;\r\n    content: '.';\r\n    width: 1em;\r\n    text-align: left;\r\n  }\r\n  @keyframes ellipsis {\r\n    0% {\r\n      content: '.';\r\n    }\r\n    33% {\r\n      content: '..';\r\n    }\r\n    66% {\r\n      content: '...';\r\n    }\r\n  }\r\n`\r\n\r\nexport default Dots\r\n","import React, { useState, useCallback } from 'react'\r\nimport { FallingBunnies, FallingBunniesProps, useKonamiCheatCode } from '@pancakeswap/uikit'\r\n\r\nconst EasterEgg: React.FC<FallingBunniesProps> = (props) => {\r\n  const [show, setShow] = useState(false)\r\n  const startFalling = useCallback(() => setShow(true), [setShow])\r\n  useKonamiCheatCode(startFalling)\r\n\r\n  if (show) {\r\n    return (\r\n      <div onAnimationEnd={() => setShow(false)}>\r\n        <FallingBunnies {...props} />\r\n      </div>\r\n    )\r\n  }\r\n  return null\r\n}\r\n\r\nexport default React.memo(EasterEgg)\r\n","import { createBrowserHistory } from 'history'\r\n\r\n// Manually create the history object so we can access outside the Router e.g. in modals\r\nconst history = createBrowserHistory()\r\n\r\nexport default history\r\n","import React, { lazy } from 'react'\r\nimport { Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { ResetCSS } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport useEagerConnect from 'hooks/useEagerConnect'\r\nimport useUserAgent from 'hooks/useUserAgent'\r\nimport useScrollOnRouteChange from 'hooks/useScrollOnRouteChange'\r\nimport { usePollBlockNumber } from 'state/block/hooks'\r\nimport { usePollCoreFarmData } from 'state/farms/hooks'\r\nimport { useFetchProfile } from 'state/profile/hooks'\r\nimport SubgraphHealthIndicator from 'components/SubgraphHealthIndicator'\r\nimport { Header } from 'components/Header'\r\nimport { Footer } from 'components/Footer'\r\nimport GlobalStyle from './style/Global'\r\nimport SuspenseWithChunkError from './components/SuspenseWithChunkError'\r\nimport { ToastListener } from './contexts/ToastsContext'\r\nimport Dots from './components/Loader/Dots'\r\nimport EasterEgg from './components/EasterEgg'\r\nimport GlobalCheckClaimStatus from './components/GlobalCheckClaimStatus'\r\nimport history from './routerHistory'\r\n// Views included in the main bundle\r\nimport { useInactiveListener } from './hooks/useInactiveListener'\r\nimport useSentryUser from './hooks/useSentryUser'\r\nimport useNftClaimStatusCheck from './hooks/useNftClaimStatusCheck'\r\nimport 'rsuite/dist/rsuite.min.css'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page\r\nconst Dashboard = lazy(() => import('./views/Dashboard'))\r\nconst Invest = lazy(() => import('./views/Invest'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n\r\n// This config is required for number formatting\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <Router history={history}>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Header />\r\n      <SuspenseWithChunkError fallback={<Dots />}>\r\n        <Switch>\r\n          <Route path=\"/\" exact>\r\n            <Dashboard />\r\n          </Route>\r\n          <Route path=\"/invest\" exact>\r\n            <Invest />\r\n          </Route>\r\n          {/* 404 */}\r\n          <Route component={NotFound} />\r\n        </Switch>\r\n      </SuspenseWithChunkError>\r\n      <Footer />\r\n      <EasterEgg iterations={2} />\r\n      <ToastListener />\r\n      <SubgraphHealthIndicator />\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import React from 'react'\r\nimport { ModalProvider, light, dark } from '@pancakeswap/uikit'\r\nimport { Web3ReactProvider } from '@web3-react/core'\r\nimport { HelmetProvider } from 'react-helmet-async'\r\nimport { Provider } from 'react-redux'\r\nimport { ThemeProvider } from 'styled-components'\r\nimport { useThemeManager } from 'state/user/hooks'\r\nimport { getLibrary } from 'utils/web3React'\r\nimport { LanguageProvider } from 'contexts/Localization'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport { ToastsProvider } from 'contexts/ToastsContext'\r\nimport store from 'state'\r\n\r\nconst ThemeProviderWrapper = (props) => {\r\n  const [isDark] = useThemeManager()\r\n  return <ThemeProvider theme={dark} {...props} />\r\n}\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  return (\r\n    <Web3ReactProvider getLibrary={getLibrary}>\r\n      <Provider store={store}>\r\n        <ToastsProvider>\r\n          <HelmetProvider>\r\n            <ThemeProviderWrapper>\r\n              <LanguageProvider>\r\n                <RefreshContextProvider>\r\n                  <ModalProvider>{children}</ModalProvider>\r\n                </RefreshContextProvider>\r\n              </LanguageProvider>\r\n            </ThemeProviderWrapper>\r\n          </HelmetProvider>\r\n        </ToastsProvider>\r\n      </Provider>\r\n    </Web3ReactProvider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React, { useMemo, ReactNode } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport * as Sentry from '@sentry/react'\r\nimport { Integrations } from '@sentry/tracing'\r\nimport { isUserRejected } from 'utils/sentry'\r\nimport useActiveWeb3React from './hooks/useActiveWeb3React'\r\nimport { BLOCKED_ADDRESSES } from './config/constants'\r\nimport ListsUpdater from './state/lists/updater'\r\nimport MulticallUpdater from './state/multicall/updater'\r\nimport TransactionUpdater from './state/transactions/updater'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nfunction Updaters() {\r\n  return (\r\n    <>\r\n      <ListsUpdater />\r\n      <TransactionUpdater />\r\n      <MulticallUpdater />\r\n    </>\r\n  )\r\n}\r\n\r\nfunction Blocklist({ children }: { children: ReactNode }) {\r\n  const { account } = useActiveWeb3React()\r\n  const blocked: boolean = useMemo(() => Boolean(account && BLOCKED_ADDRESSES.indexOf(account) !== -1), [account])\r\n  if (blocked) {\r\n    return <div>Blocked address</div>\r\n  }\r\n  return <>{children}</>\r\n}\r\n\r\nSentry.init({\r\n  dsn: 'https://ed98e16b9d704c22bef92d24bdd5f3b7@o1092725.ingest.sentry.io/6111410',\r\n  integrations: [\r\n    new Integrations.BrowserTracing(),\r\n    new Sentry.Integrations.Breadcrumbs({\r\n      console: process.env.NODE_ENV === 'production',\r\n    }),\r\n  ],\r\n  environment: process.env.NODE_ENV,\r\n  // Set tracesSampleRate to 1.0 to capture 100%\r\n  // of transactions for performance monitoring.\r\n  // We recommend adjusting this value in production\r\n  tracesSampleRate: 0.1,\r\n  beforeSend(event, hint) {\r\n    const error = hint?.originalException\r\n    if (error && isUserRejected(error)) {\r\n      return null\r\n    }\r\n    return event\r\n  },\r\n  ignoreErrors: [\r\n    'User denied transaction signature',\r\n    'Non-Error promise rejection captured',\r\n    'User rejected the transaction',\r\n    'cancelled',\r\n  ],\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Blocklist>\r\n      <Providers>\r\n        <Updaters />\r\n        <App />\r\n      </Providers>\r\n    </Blocklist>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n","import * as Sentry from '@sentry/react'\r\n\r\nconst assignError = (maybeError: any) => {\r\n  if (typeof maybeError === 'string') {\r\n    return new Error(maybeError)\r\n  }\r\n  if (typeof maybeError === 'object') {\r\n    const error = new Error(maybeError?.message ?? String(maybeError))\r\n    if (maybeError?.stack) {\r\n      error.stack = maybeError.stack\r\n    }\r\n    if (maybeError?.code) {\r\n      error.name = maybeError.code\r\n    }\r\n    return error\r\n  }\r\n  return maybeError\r\n}\r\n\r\nexport const isUserRejected = (err) => {\r\n  // provider user rejected error code\r\n  return typeof err === 'object' && 'code' in err && err.code === 4001\r\n}\r\n\r\nexport const logError = (error: Error | unknown) => {\r\n  if (error instanceof Error) {\r\n    Sentry.captureException(error)\r\n  } else {\r\n    Sentry.captureException(assignError(error), error)\r\n  }\r\n  console.error(error)\r\n}\r\n","import React, { createContext, useCallback, useEffect, useState } from 'react'\r\nimport { Language } from '@pancakeswap/uikit'\r\nimport { EN, languages } from 'config/localization/languages'\r\nimport translations from 'config/localization/translations.json'\r\nimport { ContextApi, ContextData, ProviderState } from './types'\r\nimport { LS_KEY, fetchLocale, getLanguageCodeFromLS } from './helpers'\r\n\r\nconst initialState: ProviderState = {\r\n  isFetching: true,\r\n  currentLanguage: EN,\r\n}\r\n\r\n// Export the translations directly\r\nexport const languageMap = new Map<Language['locale'], Record<string, string>>()\r\nlanguageMap.set(EN.locale, translations)\r\n\r\nexport const LanguageContext = createContext<ContextApi>(undefined)\r\n\r\nexport const LanguageProvider: React.FC = ({ children }) => {\r\n  const [state, setState] = useState<ProviderState>(() => {\r\n    const codeFromStorage = getLanguageCodeFromLS()\r\n\r\n    return {\r\n      ...initialState,\r\n      currentLanguage: languages[codeFromStorage],\r\n    }\r\n  })\r\n  const { currentLanguage } = state\r\n\r\n  useEffect(() => {\r\n    const fetchInitialLocales = async () => {\r\n      const codeFromStorage = getLanguageCodeFromLS()\r\n\r\n      if (codeFromStorage !== EN.locale) {\r\n        const enLocale = languageMap.get(EN.locale)\r\n        const currentLocale = await fetchLocale(codeFromStorage)\r\n        languageMap.set(codeFromStorage, { ...enLocale, ...currentLocale })\r\n      }\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isFetching: false,\r\n      }))\r\n    }\r\n\r\n    fetchInitialLocales()\r\n  }, [setState])\r\n\r\n  const setLanguage = async (language: Language) => {\r\n    if (!languageMap.has(language.locale)) {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isFetching: true,\r\n      }))\r\n\r\n      const locale = await fetchLocale(language.locale)\r\n      const enLocale = languageMap.get(EN.locale)\r\n\r\n      // Merge the EN locale to ensure that any locale fetched has all the keys\r\n      languageMap.set(language.locale, { ...enLocale, ...locale })\r\n      localStorage.setItem(LS_KEY, language.locale)\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isFetching: false,\r\n        currentLanguage: language,\r\n      }))\r\n    } else {\r\n      localStorage.setItem(LS_KEY, language.locale)\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        isFetching: false,\r\n        currentLanguage: language,\r\n      }))\r\n    }\r\n  }\r\n\r\n  const translate = useCallback(\r\n    (key: string, data?: ContextData) => {\r\n      const translationSet = languageMap.has(currentLanguage.locale)\r\n        ? languageMap.get(currentLanguage.locale)\r\n        : languageMap.get(EN.locale)\r\n      const translatedText = translationSet[key] || key\r\n\r\n      // Check the existence of at least one combination of %%, separated by 1 or more non space characters\r\n      const includesVariable = translatedText.match(/%\\S+?%/gm)\r\n\r\n      if (includesVariable && data) {\r\n        let interpolatedText = translatedText\r\n        Object.keys(data).forEach((dataKey) => {\r\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\r\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey].toString())\r\n        })\r\n\r\n        return interpolatedText\r\n      }\r\n\r\n      return translatedText\r\n    },\r\n    [currentLanguage],\r\n  )\r\n\r\n  return <LanguageContext.Provider value={{ ...state, setLanguage, t: translate }}>{children}</LanguageContext.Provider>\r\n}\r\n","import { useContext } from 'react'\r\nimport { LanguageContext } from './Provider'\r\n\r\nconst useTranslation = () => {\r\n  const languageContext = useContext(LanguageContext)\r\n\r\n  if (languageContext === undefined) {\r\n    throw new Error('Language context is undefined')\r\n  }\r\n\r\n  return languageContext\r\n}\r\n\r\nexport default useTranslation\r\n","const PANCAKE_EXTENDED = 'https://tokens.pancakeswap.finance/pancakeswap-extended.json'\r\nconst PANCAKE_TOP100 = 'https://tokens.pancakeswap.finance/pancakeswap-top-100.json'\r\n\r\nexport const UNSUPPORTED_LIST_URLS: string[] = []\r\n\r\n// lower index == higher priority for token import\r\nexport const DEFAULT_LIST_OF_LISTS: string[] = [\r\n  PANCAKE_TOP100,\r\n  PANCAKE_EXTENDED,\r\n  ...UNSUPPORTED_LIST_URLS, // need to load unsupported tokens as well\r\n]\r\n\r\n// default lists to be 'active' aka searched across\r\nexport const DEFAULT_ACTIVE_LIST_URLS: string[] = []\r\n","import { ChainId } from '@pancakeswap/sdk'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nexport const BSC_BLOCK_TIME = 3\r\n\r\nexport const BASE_BSC_SCAN_URLS = {\r\n  [ChainId.MAINNET]: 'https://bscscan.com',\r\n  [ChainId.TESTNET]: 'https://testnet.bscscan.com',\r\n}\r\n\r\n// CAKE_PER_BLOCK details\r\n// 40 CAKE is minted per block\r\n// 20 CAKE per block is sent to Burn pool (A farm just for burning cake)\r\n// 10 CAKE per block goes to CAKE syrup pool\r\n// 9 CAKE per block goes to Yield farms and lottery\r\n// CAKE_PER_BLOCK in config/index.ts = 40 as we only change the amount sent to the burn pool which is effectively a farm.\r\n// CAKE/Block in src/views/Home/components/CakeDataRow.tsx = 15 (40 - Amount sent to burn pool)\r\nexport const CAKE_PER_BLOCK = 40\r\nexport const BLOCKS_PER_YEAR = (60 / BSC_BLOCK_TIME) * 60 * 24 * 365 // 10512000\r\nexport const CAKE_PER_YEAR = CAKE_PER_BLOCK * BLOCKS_PER_YEAR\r\nexport const BASE_URL = 'https://pancakeswap.finance'\r\nexport const BASE_ADD_LIQUIDITY_URL = `${BASE_URL}/add`\r\nexport const BASE_BSC_SCAN_URL = BASE_BSC_SCAN_URLS[ChainId.MAINNET]\r\nexport const DEFAULT_TOKEN_DECIMAL = BIG_TEN.pow(18)\r\nexport const DEFAULT_GAS_LIMIT = 200000\r\nexport const AUCTION_BIDDERS_TO_FETCH = 500\r\nexport const RECLAIM_AUCTIONS_TO_FETCH = 500\r\nexport const AUCTION_WHITELISTED_BIDDERS_TO_FETCH = 500\r\nexport const IPFS_GATEWAY = 'https://ipfs.io/ipfs'\r\n// In reality its 10000 because of fast refresh, a bit less here to cover for possible long request times\r\nexport const PANCAKE_BUNNIES_UPDATE_FREQUENCY = 8000\r\n\r\nexport const HEADER_HEIGHT = 90\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport interface Call {\r\n  address: string\r\n  callData: string\r\n}\r\n\r\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\r\nconst LOWER_HEX_REGEX = /^0x[a-f0-9]*$/\r\nexport function toCallKey(call: Call): string {\r\n  if (!ADDRESS_REGEX.test(call.address)) {\r\n    throw new Error(`Invalid address: ${call.address}`)\r\n  }\r\n  if (!LOWER_HEX_REGEX.test(call.callData)) {\r\n    throw new Error(`Invalid hex: ${call.callData}`)\r\n  }\r\n  return `${call.address}-${call.callData}`\r\n}\r\n\r\nexport function parseCallKey(callKey: string): Call {\r\n  const pcs = callKey.split('-')\r\n  if (pcs.length !== 2) {\r\n    throw new Error(`Invalid call key: ${callKey}`)\r\n  }\r\n  return {\r\n    address: pcs[0],\r\n    callData: pcs[1],\r\n  }\r\n}\r\n\r\nexport interface ListenerOptions {\r\n  // how often this data should be fetched, by default 1\r\n  readonly blocksPerFetch?: number\r\n}\r\n\r\nexport const addMulticallListeners = createAction<{ chainId: number; calls: Call[]; options?: ListenerOptions }>(\r\n  'multicall/addMulticallListeners',\r\n)\r\nexport const removeMulticallListeners = createAction<{ chainId: number; calls: Call[]; options?: ListenerOptions }>(\r\n  'multicall/removeMulticallListeners',\r\n)\r\nexport const fetchingMulticallResults = createAction<{ chainId: number; calls: Call[]; fetchingBlockNumber: number }>(\r\n  'multicall/fetchingMulticallResults',\r\n)\r\nexport const errorFetchingMulticallResults = createAction<{\r\n  chainId: number\r\n  calls: Call[]\r\n  fetchingBlockNumber: number\r\n}>('multicall/errorFetchingMulticallResults')\r\nexport const updateMulticallResults = createAction<{\r\n  chainId: number\r\n  blockNumber: number\r\n  results: {\r\n    [callKey: string]: string | null\r\n  }\r\n}>('multicall/updateMulticallResults')\r\n","import { ethers } from 'ethers'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\n\r\nexport const simpleRpcProvider = new ethers.providers.StaticJsonRpcProvider(RPC_URL)\r\n\r\nexport default null\r\n","import { VaultKey } from 'state/types'\r\nimport tokens, { serializeTokens } from './tokens'\r\nimport { SerializedPoolConfig, PoolCategory } from './types'\r\n\r\nconst serializedTokens = serializeTokens()\r\n\r\nexport const vaultPoolConfig = {\r\n  [VaultKey.CakeVault]: {\r\n    name: 'Auto CAKE',\r\n    description: 'Automatic restaking',\r\n    autoCompoundFrequency: 5000,\r\n    gasLimit: 380000,\r\n    tokenImage: {\r\n      primarySrc: `/images/tokens/${tokens.cake.address}.svg`,\r\n      secondarySrc: '/images/tokens/autorenew.svg',\r\n    },\r\n  },\r\n  [VaultKey.IfoPool]: {\r\n    name: 'IFO CAKE',\r\n    description: 'Stake CAKE to participate in IFOs',\r\n    autoCompoundFrequency: 1,\r\n    gasLimit: 500000,\r\n    tokenImage: {\r\n      primarySrc: `/images/tokens/${tokens.cake.address}.svg`,\r\n      secondarySrc: `/images/tokens/${tokens.cake.address}.svg`,\r\n    },\r\n  },\r\n} as const\r\n\r\nconst pools: SerializedPoolConfig[] = [\r\n  {\r\n    sousId: 0,\r\n    stakingToken: serializedTokens.cake,\r\n    earningToken: serializedTokens.cake,\r\n    contractAddress: {\r\n      4002: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n      250: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n    },\r\n    poolCategory: PoolCategory.CORE,\r\n    harvest: true,\r\n    tokenPerBlock: '10',\r\n    sortOrder: 1,\r\n    isFinished: false,\r\n  },\r\n]\r\n\r\nexport default pools\r\n","import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport { formatUnits } from 'ethers/lib/utils'\r\nimport { getLanguageCodeFromLS } from 'contexts/Localization/helpers'\r\nimport { BIG_TEN } from './bigNumber'\r\n\r\n/**\r\n * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000\r\n */\r\nexport const getDecimalAmount = (amount: BigNumber, decimals = 18) => {\r\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals))\r\n}\r\n\r\nexport const getBalanceAmount = (amount: BigNumber, decimals = 18) => {\r\n  return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals))\r\n}\r\n\r\n/**\r\n * This function is not really necessary but is used throughout the site.\r\n */\r\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\r\n  return getBalanceAmount(balance, decimals).toNumber()\r\n}\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, displayDecimals?: number) => {\r\n  return getBalanceAmount(balance, decimals).toFixed(displayDecimals)\r\n}\r\n\r\nexport const formatNumber = (number: number, minPrecision = 2, maxPrecision = 2) => {\r\n  const options = {\r\n    minimumFractionDigits: minPrecision,\r\n    maximumFractionDigits: maxPrecision,\r\n  }\r\n  return number.toLocaleString(undefined, options)\r\n}\r\n\r\n/**\r\n * Method to format the display of wei given an ethers.BigNumber object\r\n * Note: does NOT round\r\n */\r\nexport const formatBigNumber = (number: ethers.BigNumber, displayDecimals = 18, decimals = 18) => {\r\n  const remainder = number.mod(ethers.BigNumber.from(10).pow(decimals - displayDecimals))\r\n  return formatUnits(number.sub(remainder), decimals)\r\n}\r\n\r\n/**\r\n * Method to format the display of wei given an ethers.BigNumber object with toFixed\r\n * Note: rounds\r\n */\r\nexport const formatBigNumberToFixed = (number: ethers.BigNumber, displayDecimals = 18, decimals = 18) => {\r\n  const formattedString = formatUnits(number, decimals)\r\n  return (+formattedString).toFixed(displayDecimals)\r\n}\r\n\r\n/**\r\n * Formats a FixedNumber like BigNumber\r\n * i.e. Formats 9763410526137450427.1196 into 9.763 (3 display decimals)\r\n */\r\nexport const formatFixedNumber = (number: ethers.FixedNumber, displayDecimals = 18, decimals = 18) => {\r\n  // Remove decimal\r\n  const [leftSide] = number.toString().split('.')\r\n  return formatBigNumber(ethers.BigNumber.from(leftSide), displayDecimals, decimals)\r\n}\r\n\r\nexport const formatLocalisedCompactNumber = (number: number): string => {\r\n  const codeFromStorage = getLanguageCodeFromLS()\r\n  return new Intl.NumberFormat(codeFromStorage, {\r\n    notation: 'compact',\r\n    compactDisplay: 'long',\r\n    maximumSignificantDigits: 2,\r\n  }).format(number)\r\n}\r\n\r\nexport default formatLocalisedCompactNumber\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { ethers } from 'ethers'\r\nimport { getAddress } from '@ethersproject/address'\r\nimport { AddressZero } from '@ethersproject/constants'\r\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { abi as IUniswapV2Router02ABI } from '@uniswap/v2-periphery/build/IUniswapV2Router02.json'\r\nimport { ChainId, JSBI, Percent, Token, CurrencyAmount, Currency, ETHER } from '@pancakeswap/sdk'\r\nimport { ROUTER_ADDRESS } from '../config/constants'\r\nimport { BASE_BSC_SCAN_URLS } from '../config'\r\nimport { TokenAddressMap } from '../state/lists/hooks'\r\nimport { simpleRpcProvider } from './providers'\r\n\r\n// returns the checksummed address if the address is valid, otherwise returns false\r\nexport function isAddress(value: any): string | false {\r\n  try {\r\n    return getAddress(value)\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\nexport function getBscScanLink(\r\n  data: string | number,\r\n  type: 'transaction' | 'token' | 'address' | 'block' | 'countdown',\r\n  chainId: ChainId = ChainId.MAINNET,\r\n): string {\r\n  switch (type) {\r\n    case 'transaction': {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/tx/${data}`\r\n    }\r\n    case 'token': {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/token/${data}`\r\n    }\r\n    case 'block': {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/block/${data}`\r\n    }\r\n    case 'countdown': {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/block/countdown/${data}`\r\n    }\r\n    default: {\r\n      return `${BASE_BSC_SCAN_URLS[chainId]}/address/${data}`\r\n    }\r\n  }\r\n}\r\n\r\nexport function getBscScanLinkForNft(\r\n  collectionAddress: string,\r\n  tokenId: string,\r\n  chainId: ChainId = ChainId.MAINNET,\r\n): string {\r\n  return `${BASE_BSC_SCAN_URLS[chainId]}/token/${collectionAddress}?a=${tokenId}`\r\n}\r\n\r\n// add 10%\r\nexport function calculateGasMargin(value: BigNumber): BigNumber {\r\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\r\n}\r\n\r\n// converts a basis points value to a sdk percent\r\nexport function basisPointsToPercent(num: number): Percent {\r\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000))\r\n}\r\n\r\nexport function calculateSlippageAmount(value: CurrencyAmount, slippage: number): [JSBI, JSBI] {\r\n  if (slippage < 0 || slippage > 10000) {\r\n    throw Error(`Unexpected slippage value: ${slippage}`)\r\n  }\r\n  return [\r\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)),\r\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000)),\r\n  ]\r\n}\r\n\r\n// account is not optional\r\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked()\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\r\n  return account ? getSigner(library, account) : library\r\n}\r\n\r\n// account is optional\r\nexport function getContract(address: string, ABI: any, signer?: ethers.Signer | ethers.providers.Provider): Contract {\r\n  if (!isAddress(address) || address === AddressZero) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`)\r\n  }\r\n\r\n  return new Contract(address, ABI, signer ?? simpleRpcProvider)\r\n}\r\n\r\n// account is optional\r\nexport function getRouterContract(_: number, library: Web3Provider, account?: string): Contract {\r\n  return getContract(ROUTER_ADDRESS, IUniswapV2Router02ABI, getProviderOrSigner(library, account))\r\n}\r\n\r\nexport function escapeRegExp(string: string): string {\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\r\n}\r\n\r\nexport function isTokenOnList(defaultTokens: TokenAddressMap, currency?: Currency): boolean {\r\n  if (currency === ETHER) return true\r\n  return Boolean(currency instanceof Token && defaultTokens[currency.chainId]?.[currency.address])\r\n}\r\n","import { Token } from '@pancakeswap/sdk'\r\nimport { SerializedToken } from 'config/constants/types'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\n\r\nexport function serializeToken(token: Token): SerializedToken {\r\n  return {\r\n    chainId: token.chainId,\r\n    address: token.address,\r\n    decimals: token.decimals,\r\n    symbol: token.symbol,\r\n    name: token.name,\r\n    projectLink: token.projectLink,\r\n  }\r\n}\r\n\r\nexport function deserializeToken(serializedToken: SerializedToken): Token {\r\n  return new Token(\r\n    serializedToken.chainId,\r\n    serializedToken.address,\r\n    serializedToken.decimals,\r\n    serializedToken.symbol,\r\n    serializedToken.name,\r\n    serializedToken.projectLink,\r\n  )\r\n}\r\n\r\nexport enum GAS_PRICE {\r\n  default = '5',\r\n  fast = '6',\r\n  instant = '7',\r\n  testnet = '10',\r\n}\r\n\r\nexport const GAS_PRICE_GWEI = {\r\n  default: parseUnits(GAS_PRICE.default, 'gwei').toString(),\r\n  fast: parseUnits(GAS_PRICE.fast, 'gwei').toString(),\r\n  instant: parseUnits(GAS_PRICE.instant, 'gwei').toString(),\r\n  testnet: parseUnits(GAS_PRICE.testnet, 'gwei').toString(),\r\n}\r\n","import { ChainId, JSBI, Percent, Token } from '@pancakeswap/sdk'\r\nimport { mainnetTokens, testnetTokens } from './tokens'\r\n\r\nexport const ROUTER_ADDRESS = '0x10ED43C718714eb63d5aA57B78B54704E256024E'\r\n\r\n// a list of tokens by chain\r\ntype ChainTokenList = {\r\n  readonly [chainId in ChainId]: Token[]\r\n}\r\n\r\n// used to construct intermediary pairs for trading\r\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\r\n  [ChainId.MAINNET]: [\r\n    mainnetTokens.wbnb,\r\n    mainnetTokens.cake,\r\n    mainnetTokens.busd,\r\n    mainnetTokens.usdt,\r\n    mainnetTokens.btcb,\r\n    mainnetTokens.ust,\r\n    mainnetTokens.eth,\r\n    mainnetTokens.usdc,\r\n  ],\r\n  [ChainId.TESTNET]: [testnetTokens.wbnb, testnetTokens.cake, testnetTokens.busd],\r\n}\r\n\r\n/**\r\n * Addittional bases for specific tokens\r\n * @example { [WBTC.address]: [renBTC], [renBTC.address]: [WBTC] }\r\n */\r\nexport const ADDITIONAL_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\r\n  [ChainId.MAINNET]: {},\r\n}\r\n\r\n/**\r\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\r\n * tokens.\r\n * @example [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\r\n */\r\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\r\n  [ChainId.MAINNET]: {},\r\n}\r\n\r\n// used for display in the default list when adding liquidity\r\nexport const SUGGESTED_BASES: ChainTokenList = {\r\n  [ChainId.MAINNET]: [mainnetTokens.busd, mainnetTokens.cake, mainnetTokens.btcb],\r\n  [ChainId.TESTNET]: [testnetTokens.wbnb, testnetTokens.cake, testnetTokens.busd],\r\n}\r\n\r\n// used to construct the list of all pairs we consider by default in the frontend\r\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\r\n  [ChainId.MAINNET]: [mainnetTokens.wbnb, mainnetTokens.dai, mainnetTokens.busd, mainnetTokens.usdt],\r\n  [ChainId.TESTNET]: [testnetTokens.wbnb, testnetTokens.cake, testnetTokens.busd],\r\n}\r\n\r\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\r\n  [ChainId.MAINNET]: [\r\n    [mainnetTokens.cake, mainnetTokens.wbnb],\r\n    [mainnetTokens.busd, mainnetTokens.usdt],\r\n    [mainnetTokens.dai, mainnetTokens.usdt],\r\n  ],\r\n}\r\n\r\nexport const NetworkContextName = 'NETWORK'\r\n\r\n// default allowed slippage, in bips\r\nexport const INITIAL_ALLOWED_SLIPPAGE = 50\r\n// 20 minutes, denominated in seconds\r\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\r\n\r\nexport const BIG_INT_ZERO = JSBI.BigInt(0)\r\n\r\n// one basis point\r\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\r\nexport const BIPS_BASE = JSBI.BigInt(10000)\r\n// used for warning states\r\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\r\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\r\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\r\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\r\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\r\n// for non expert mode disable swaps above this\r\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\r\n\r\n// used to ensure the user doesn't send so much BNB so they end up with <.01\r\nexport const MIN_BNB: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 BNB\r\nexport const BETTER_TRADE_LESS_HOPS_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(10000))\r\n\r\nexport const ZERO_PERCENT = new Percent('0')\r\nexport const ONE_HUNDRED_PERCENT = new Percent('1')\r\n\r\n// SDN OFAC addresses\r\nexport const BLOCKED_ADDRESSES: string[] = [\r\n  '0x7F367cC41522cE07553e823bf3be79A889DEbe1B',\r\n  '0xd882cFc20F52f2599D84b8e8D58C7FB62cfE344b',\r\n  '0x901bb9583b24D97e995513C6778dc6888AB6870e',\r\n  '0xA7e5d5A720f06526557c513402f2e6B5fA20b008',\r\n  '0x8576aCC5C05D6Ce88f4e49bf65BdF0C62F91353C',\r\n]\r\n\r\nexport { default as farmsConfig } from './farms'\r\nexport { default as poolsConfig } from './pools'\r\nexport { default as ifosConfig } from './ifo'\r\n","import { ActionCreatorWithPayload, createAction } from '@reduxjs/toolkit'\r\nimport { TokenList, Version } from '@uniswap/token-lists'\r\n\r\nexport const fetchTokenList: Readonly<{\r\n  pending: ActionCreatorWithPayload<{ url: string; requestId: string }>\r\n  fulfilled: ActionCreatorWithPayload<{ url: string; tokenList: TokenList; requestId: string }>\r\n  rejected: ActionCreatorWithPayload<{ url: string; errorMessage: string; requestId: string }>\r\n}> = {\r\n  pending: createAction('lists/fetchTokenList/pending'),\r\n  fulfilled: createAction('lists/fetchTokenList/fulfilled'),\r\n  rejected: createAction('lists/fetchTokenList/rejected'),\r\n}\r\n// add and remove from list options\r\nexport const addList = createAction<string>('lists/addList')\r\nexport const removeList = createAction<string>('lists/removeList')\r\n\r\n// select which lists to search across from loaded lists\r\nexport const enableList = createAction<string>('lists/enableList')\r\nexport const disableList = createAction<string>('lists/disableList')\r\n\r\n// versioning\r\nexport const acceptListUpdate = createAction<string>('lists/acceptListUpdate')\r\nexport const rejectVersionUpdate = createAction<Version>('lists/rejectVersionUpdate')\r\n","import { createAction } from '@reduxjs/toolkit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\n\r\nexport interface SerializableTransactionReceipt {\r\n  to: string\r\n  from: string\r\n  contractAddress: string\r\n  transactionIndex: number\r\n  blockHash: string\r\n  transactionHash: string\r\n  blockNumber: number\r\n  status?: number\r\n}\r\n\r\nexport const addTransaction = createAction<{\r\n  chainId: ChainId\r\n  hash: string\r\n  from: string\r\n  approval?: { tokenAddress: string; spender: string }\r\n  claim?: { recipient: string }\r\n  summary?: string\r\n}>('transactions/addTransaction')\r\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions')\r\nexport const finalizeTransaction = createAction<{\r\n  chainId: ChainId\r\n  hash: string\r\n  receipt: SerializableTransactionReceipt\r\n}>('transactions/finalizeTransaction')\r\nexport const checkedTransaction = createAction<{\r\n  chainId: ChainId\r\n  hash: string\r\n  blockNumber: number\r\n}>('transactions/checkedTransaction')\r\n"],"sourceRoot":""}